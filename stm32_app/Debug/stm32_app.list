
stm32_app.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08004000  08004000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003820  08004110  08004110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  08007930  08007930  00004930  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007a0c  08007a0c  00005058  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08007a0c  08007a0c  00005058  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08007a0c  08007a0c  00005058  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007a0c  08007a0c  00004a0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007a10  08007a10  00004a10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000058  20000000  08007a14  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002eac  20000058  08007a6c  00005058  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002f04  08007a6c  00005f04  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00005058  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c1b0  00000000  00000000  00005081  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002368  00000000  00000000  00011231  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bc0  00000000  00000000  000135a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008ff  00000000  00000000  00014160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001977b  00000000  00000000  00014a5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fb7f  00000000  00000000  0002e1da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009043c  00000000  00000000  0003dd59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ce195  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000033f0  00000000  00000000  000ce1d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  000d15c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08004110 <__do_global_dtors_aux>:
 8004110:	b510      	push	{r4, lr}
 8004112:	4c05      	ldr	r4, [pc, #20]	@ (8004128 <__do_global_dtors_aux+0x18>)
 8004114:	7823      	ldrb	r3, [r4, #0]
 8004116:	b933      	cbnz	r3, 8004126 <__do_global_dtors_aux+0x16>
 8004118:	4b04      	ldr	r3, [pc, #16]	@ (800412c <__do_global_dtors_aux+0x1c>)
 800411a:	b113      	cbz	r3, 8004122 <__do_global_dtors_aux+0x12>
 800411c:	4804      	ldr	r0, [pc, #16]	@ (8004130 <__do_global_dtors_aux+0x20>)
 800411e:	f3af 8000 	nop.w
 8004122:	2301      	movs	r3, #1
 8004124:	7023      	strb	r3, [r4, #0]
 8004126:	bd10      	pop	{r4, pc}
 8004128:	20000058 	.word	0x20000058
 800412c:	00000000 	.word	0x00000000
 8004130:	08007918 	.word	0x08007918

08004134 <frame_dummy>:
 8004134:	b508      	push	{r3, lr}
 8004136:	4b03      	ldr	r3, [pc, #12]	@ (8004144 <frame_dummy+0x10>)
 8004138:	b11b      	cbz	r3, 8004142 <frame_dummy+0xe>
 800413a:	4903      	ldr	r1, [pc, #12]	@ (8004148 <frame_dummy+0x14>)
 800413c:	4803      	ldr	r0, [pc, #12]	@ (800414c <frame_dummy+0x18>)
 800413e:	f3af 8000 	nop.w
 8004142:	bd08      	pop	{r3, pc}
 8004144:	00000000 	.word	0x00000000
 8004148:	2000005c 	.word	0x2000005c
 800414c:	08007918 	.word	0x08007918

08004150 <crc16_ccitt>:
#ifndef APP_INC_APP_CRC16_H_
#define APP_INC_APP_CRC16_H_

#include <stdint.h>

uint16_t crc16_ccitt(const uint8_t *data, uint32_t len) {
 8004150:	b480      	push	{r7}
 8004152:	b087      	sub	sp, #28
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
 8004158:	6039      	str	r1, [r7, #0]
    uint16_t crc = 0xFFFF;
 800415a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800415e:	82fb      	strh	r3, [r7, #22]
    for (uint32_t i = 0; i < len; i++) {
 8004160:	2300      	movs	r3, #0
 8004162:	613b      	str	r3, [r7, #16]
 8004164:	e029      	b.n	80041ba <crc16_ccitt+0x6a>
        crc ^= (uint16_t)data[i] << 8;
 8004166:	687a      	ldr	r2, [r7, #4]
 8004168:	693b      	ldr	r3, [r7, #16]
 800416a:	4413      	add	r3, r2
 800416c:	781b      	ldrb	r3, [r3, #0]
 800416e:	b21b      	sxth	r3, r3
 8004170:	021b      	lsls	r3, r3, #8
 8004172:	b21a      	sxth	r2, r3
 8004174:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004178:	4053      	eors	r3, r2
 800417a:	b21b      	sxth	r3, r3
 800417c:	82fb      	strh	r3, [r7, #22]
        for (int b = 0; b < 8; b++) {
 800417e:	2300      	movs	r3, #0
 8004180:	60fb      	str	r3, [r7, #12]
 8004182:	e014      	b.n	80041ae <crc16_ccitt+0x5e>
            if (crc & 0x8000) crc = (uint16_t)((crc << 1) ^ 0x1021);
 8004184:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004188:	2b00      	cmp	r3, #0
 800418a:	da0a      	bge.n	80041a2 <crc16_ccitt+0x52>
 800418c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004190:	005b      	lsls	r3, r3, #1
 8004192:	b21b      	sxth	r3, r3
 8004194:	f483 5381 	eor.w	r3, r3, #4128	@ 0x1020
 8004198:	f083 0301 	eor.w	r3, r3, #1
 800419c:	b21b      	sxth	r3, r3
 800419e:	82fb      	strh	r3, [r7, #22]
 80041a0:	e002      	b.n	80041a8 <crc16_ccitt+0x58>
            else              crc = (uint16_t)(crc << 1);
 80041a2:	8afb      	ldrh	r3, [r7, #22]
 80041a4:	005b      	lsls	r3, r3, #1
 80041a6:	82fb      	strh	r3, [r7, #22]
        for (int b = 0; b < 8; b++) {
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	3301      	adds	r3, #1
 80041ac:	60fb      	str	r3, [r7, #12]
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	2b07      	cmp	r3, #7
 80041b2:	dde7      	ble.n	8004184 <crc16_ccitt+0x34>
    for (uint32_t i = 0; i < len; i++) {
 80041b4:	693b      	ldr	r3, [r7, #16]
 80041b6:	3301      	adds	r3, #1
 80041b8:	613b      	str	r3, [r7, #16]
 80041ba:	693a      	ldr	r2, [r7, #16]
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	429a      	cmp	r2, r3
 80041c0:	d3d1      	bcc.n	8004166 <crc16_ccitt+0x16>
        }
    }
    return crc;
 80041c2:	8afb      	ldrh	r3, [r7, #22]
}
 80041c4:	4618      	mov	r0, r3
 80041c6:	371c      	adds	r7, #28
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bc80      	pop	{r7}
 80041cc:	4770      	bx	lr
	...

080041d0 <meta_request_boot>:
 */

#include "app.h"
#include <string.h>

void meta_request_boot(void) {
 80041d0:	b4b0      	push	{r4, r5, r7}
 80041d2:	b089      	sub	sp, #36	@ 0x24
 80041d4:	af00      	add	r7, sp, #0
    bl_meta_t m;
    memcpy(&m, (void *)META_BASE, sizeof(m));
 80041d6:	4b3c      	ldr	r3, [pc, #240]	@ (80042c8 <meta_request_boot+0xf8>)
 80041d8:	463c      	mov	r4, r7
 80041da:	461d      	mov	r5, r3
 80041dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80041de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80041e0:	682b      	ldr	r3, [r5, #0]
 80041e2:	6023      	str	r3, [r4, #0]
    if (m.magic != META_MAGIC || m.flags == 0xFFFFFFFFu) {
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	4a39      	ldr	r2, [pc, #228]	@ (80042cc <meta_request_boot+0xfc>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d103      	bne.n	80041f4 <meta_request_boot+0x24>
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041f2:	d109      	bne.n	8004208 <meta_request_boot+0x38>
        m.magic = META_MAGIC; m.version = 0; m.size = 0; m.crc32 = 0; m.flags = 0;
 80041f4:	4b35      	ldr	r3, [pc, #212]	@ (80042cc <meta_request_boot+0xfc>)
 80041f6:	603b      	str	r3, [r7, #0]
 80041f8:	2300      	movs	r3, #0
 80041fa:	607b      	str	r3, [r7, #4]
 80041fc:	2300      	movs	r3, #0
 80041fe:	60bb      	str	r3, [r7, #8]
 8004200:	2300      	movs	r3, #0
 8004202:	60fb      	str	r3, [r7, #12]
 8004204:	2300      	movs	r3, #0
 8004206:	613b      	str	r3, [r7, #16]
    }
    m.flags &= ~MF_IN_PROGRESS;
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	f023 0304 	bic.w	r3, r3, #4
 800420e:	613b      	str	r3, [r7, #16]
    m.flags |=  MF_BOOT_REQ;
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	f043 0301 	orr.w	r3, r3, #1
 8004216:	613b      	str	r3, [r7, #16]

    FLASH->KEYR = 0x45670123; FLASH->KEYR = 0xCDEF89AB;
 8004218:	4b2d      	ldr	r3, [pc, #180]	@ (80042d0 <meta_request_boot+0x100>)
 800421a:	4a2e      	ldr	r2, [pc, #184]	@ (80042d4 <meta_request_boot+0x104>)
 800421c:	605a      	str	r2, [r3, #4]
 800421e:	4b2c      	ldr	r3, [pc, #176]	@ (80042d0 <meta_request_boot+0x100>)
 8004220:	4a2d      	ldr	r2, [pc, #180]	@ (80042d8 <meta_request_boot+0x108>)
 8004222:	605a      	str	r2, [r3, #4]

    FLASH->CR |= FLASH_CR_PER; FLASH->AR = META_BASE; FLASH->CR |= FLASH_CR_STRT;
 8004224:	4b2a      	ldr	r3, [pc, #168]	@ (80042d0 <meta_request_boot+0x100>)
 8004226:	691b      	ldr	r3, [r3, #16]
 8004228:	4a29      	ldr	r2, [pc, #164]	@ (80042d0 <meta_request_boot+0x100>)
 800422a:	f043 0302 	orr.w	r3, r3, #2
 800422e:	6113      	str	r3, [r2, #16]
 8004230:	4b27      	ldr	r3, [pc, #156]	@ (80042d0 <meta_request_boot+0x100>)
 8004232:	4a25      	ldr	r2, [pc, #148]	@ (80042c8 <meta_request_boot+0xf8>)
 8004234:	615a      	str	r2, [r3, #20]
 8004236:	4b26      	ldr	r3, [pc, #152]	@ (80042d0 <meta_request_boot+0x100>)
 8004238:	691b      	ldr	r3, [r3, #16]
 800423a:	4a25      	ldr	r2, [pc, #148]	@ (80042d0 <meta_request_boot+0x100>)
 800423c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004240:	6113      	str	r3, [r2, #16]
    while (FLASH->SR & FLASH_SR_BSY) {}
 8004242:	bf00      	nop
 8004244:	4b22      	ldr	r3, [pc, #136]	@ (80042d0 <meta_request_boot+0x100>)
 8004246:	68db      	ldr	r3, [r3, #12]
 8004248:	f003 0301 	and.w	r3, r3, #1
 800424c:	2b00      	cmp	r3, #0
 800424e:	d1f9      	bne.n	8004244 <meta_request_boot+0x74>
    FLASH->CR &= ~FLASH_CR_PER;
 8004250:	4b1f      	ldr	r3, [pc, #124]	@ (80042d0 <meta_request_boot+0x100>)
 8004252:	691b      	ldr	r3, [r3, #16]
 8004254:	4a1e      	ldr	r2, [pc, #120]	@ (80042d0 <meta_request_boot+0x100>)
 8004256:	f023 0302 	bic.w	r3, r3, #2
 800425a:	6113      	str	r3, [r2, #16]

    FLASH->CR |= FLASH_CR_PG;
 800425c:	4b1c      	ldr	r3, [pc, #112]	@ (80042d0 <meta_request_boot+0x100>)
 800425e:	691b      	ldr	r3, [r3, #16]
 8004260:	4a1b      	ldr	r2, [pc, #108]	@ (80042d0 <meta_request_boot+0x100>)
 8004262:	f043 0301 	orr.w	r3, r3, #1
 8004266:	6113      	str	r3, [r2, #16]
    uint16_t *src = (uint16_t *)&m;
 8004268:	463b      	mov	r3, r7
 800426a:	61bb      	str	r3, [r7, #24]
    uint16_t *dst = (uint16_t *)META_BASE;
 800426c:	4b16      	ldr	r3, [pc, #88]	@ (80042c8 <meta_request_boot+0xf8>)
 800426e:	617b      	str	r3, [r7, #20]
    for (size_t i = 0; i < sizeof(m)/2; i++) {
 8004270:	2300      	movs	r3, #0
 8004272:	61fb      	str	r3, [r7, #28]
 8004274:	e013      	b.n	800429e <meta_request_boot+0xce>
        dst[i] = src[i];
 8004276:	69fb      	ldr	r3, [r7, #28]
 8004278:	005b      	lsls	r3, r3, #1
 800427a:	69ba      	ldr	r2, [r7, #24]
 800427c:	441a      	add	r2, r3
 800427e:	69fb      	ldr	r3, [r7, #28]
 8004280:	005b      	lsls	r3, r3, #1
 8004282:	6979      	ldr	r1, [r7, #20]
 8004284:	440b      	add	r3, r1
 8004286:	8812      	ldrh	r2, [r2, #0]
 8004288:	801a      	strh	r2, [r3, #0]
        while (FLASH->SR & FLASH_SR_BSY) {}
 800428a:	bf00      	nop
 800428c:	4b10      	ldr	r3, [pc, #64]	@ (80042d0 <meta_request_boot+0x100>)
 800428e:	68db      	ldr	r3, [r3, #12]
 8004290:	f003 0301 	and.w	r3, r3, #1
 8004294:	2b00      	cmp	r3, #0
 8004296:	d1f9      	bne.n	800428c <meta_request_boot+0xbc>
    for (size_t i = 0; i < sizeof(m)/2; i++) {
 8004298:	69fb      	ldr	r3, [r7, #28]
 800429a:	3301      	adds	r3, #1
 800429c:	61fb      	str	r3, [r7, #28]
 800429e:	69fb      	ldr	r3, [r7, #28]
 80042a0:	2b09      	cmp	r3, #9
 80042a2:	d9e8      	bls.n	8004276 <meta_request_boot+0xa6>
    }
    FLASH->CR &= ~FLASH_CR_PG;
 80042a4:	4b0a      	ldr	r3, [pc, #40]	@ (80042d0 <meta_request_boot+0x100>)
 80042a6:	691b      	ldr	r3, [r3, #16]
 80042a8:	4a09      	ldr	r2, [pc, #36]	@ (80042d0 <meta_request_boot+0x100>)
 80042aa:	f023 0301 	bic.w	r3, r3, #1
 80042ae:	6113      	str	r3, [r2, #16]
    FLASH->CR |= FLASH_CR_LOCK;
 80042b0:	4b07      	ldr	r3, [pc, #28]	@ (80042d0 <meta_request_boot+0x100>)
 80042b2:	691b      	ldr	r3, [r3, #16]
 80042b4:	4a06      	ldr	r2, [pc, #24]	@ (80042d0 <meta_request_boot+0x100>)
 80042b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80042ba:	6113      	str	r3, [r2, #16]
}
 80042bc:	bf00      	nop
 80042be:	3724      	adds	r7, #36	@ 0x24
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bcb0      	pop	{r4, r5, r7}
 80042c4:	4770      	bx	lr
 80042c6:	bf00      	nop
 80042c8:	0801fc00 	.word	0x0801fc00
 80042cc:	4d455441 	.word	0x4d455441
 80042d0:	40022000 	.word	0x40022000
 80042d4:	45670123 	.word	0x45670123
 80042d8:	cdef89ab 	.word	0xcdef89ab

080042dc <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80042dc:	b480      	push	{r7}
 80042de:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80042e0:	f3bf 8f4f 	dsb	sy
}
 80042e4:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80042e6:	4b06      	ldr	r3, [pc, #24]	@ (8004300 <__NVIC_SystemReset+0x24>)
 80042e8:	68db      	ldr	r3, [r3, #12]
 80042ea:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80042ee:	4904      	ldr	r1, [pc, #16]	@ (8004300 <__NVIC_SystemReset+0x24>)
 80042f0:	4b04      	ldr	r3, [pc, #16]	@ (8004304 <__NVIC_SystemReset+0x28>)
 80042f2:	4313      	orrs	r3, r2
 80042f4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80042f6:	f3bf 8f4f 	dsb	sy
}
 80042fa:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80042fc:	bf00      	nop
 80042fe:	e7fd      	b.n	80042fc <__NVIC_SystemReset+0x20>
 8004300:	e000ed00 	.word	0xe000ed00
 8004304:	05fa0004 	.word	0x05fa0004

08004308 <read_exact>:
#include "app_crc16.h"
#include <string.h>
#include "FreeRTOS.h"
#include "task.h"

static int read_exact(uint8_t *buf, uint32_t len, uint32_t per_byte_timeout_ms) {
 8004308:	b580      	push	{r7, lr}
 800430a:	b086      	sub	sp, #24
 800430c:	af00      	add	r7, sp, #0
 800430e:	60f8      	str	r0, [r7, #12]
 8004310:	60b9      	str	r1, [r7, #8]
 8004312:	607a      	str	r2, [r7, #4]
    for (uint32_t i = 0; i < len; i++) {
 8004314:	2300      	movs	r3, #0
 8004316:	617b      	str	r3, [r7, #20]
 8004318:	e00f      	b.n	800433a <read_exact+0x32>
        if (uart1_read_byte(&buf[i], per_byte_timeout_ms) < 0) return -1;
 800431a:	68fa      	ldr	r2, [r7, #12]
 800431c:	697b      	ldr	r3, [r7, #20]
 800431e:	4413      	add	r3, r2
 8004320:	6879      	ldr	r1, [r7, #4]
 8004322:	4618      	mov	r0, r3
 8004324:	f000 fc0e 	bl	8004b44 <uart1_read_byte>
 8004328:	4603      	mov	r3, r0
 800432a:	2b00      	cmp	r3, #0
 800432c:	da02      	bge.n	8004334 <read_exact+0x2c>
 800432e:	f04f 33ff 	mov.w	r3, #4294967295
 8004332:	e007      	b.n	8004344 <read_exact+0x3c>
    for (uint32_t i = 0; i < len; i++) {
 8004334:	697b      	ldr	r3, [r7, #20]
 8004336:	3301      	adds	r3, #1
 8004338:	617b      	str	r3, [r7, #20]
 800433a:	697a      	ldr	r2, [r7, #20]
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	429a      	cmp	r2, r3
 8004340:	d3eb      	bcc.n	800431a <read_exact+0x12>
    }
    return 0;
 8004342:	2300      	movs	r3, #0
}
 8004344:	4618      	mov	r0, r3
 8004346:	3718      	adds	r7, #24
 8004348:	46bd      	mov	sp, r7
 800434a:	bd80      	pop	{r7, pc}

0800434c <send_ack>:
static void send_ack(uint8_t seq)  { uint8_t a[2] = { ACK_BYTE,  seq }; uart1_write(a, 2); }
 800434c:	b580      	push	{r7, lr}
 800434e:	b084      	sub	sp, #16
 8004350:	af00      	add	r7, sp, #0
 8004352:	4603      	mov	r3, r0
 8004354:	71fb      	strb	r3, [r7, #7]
 8004356:	23aa      	movs	r3, #170	@ 0xaa
 8004358:	733b      	strb	r3, [r7, #12]
 800435a:	79fb      	ldrb	r3, [r7, #7]
 800435c:	737b      	strb	r3, [r7, #13]
 800435e:	f107 030c 	add.w	r3, r7, #12
 8004362:	2102      	movs	r1, #2
 8004364:	4618      	mov	r0, r3
 8004366:	f000 fbc9 	bl	8004afc <uart1_write>
 800436a:	bf00      	nop
 800436c:	3710      	adds	r7, #16
 800436e:	46bd      	mov	sp, r7
 8004370:	bd80      	pop	{r7, pc}

08004372 <send_nack>:
static void send_nack(uint8_t seq) { uint8_t a[2] = { NACK_BYTE, seq }; uart1_write(a, 2); }
 8004372:	b580      	push	{r7, lr}
 8004374:	b084      	sub	sp, #16
 8004376:	af00      	add	r7, sp, #0
 8004378:	4603      	mov	r3, r0
 800437a:	71fb      	strb	r3, [r7, #7]
 800437c:	23ee      	movs	r3, #238	@ 0xee
 800437e:	733b      	strb	r3, [r7, #12]
 8004380:	79fb      	ldrb	r3, [r7, #7]
 8004382:	737b      	strb	r3, [r7, #13]
 8004384:	f107 030c 	add.w	r3, r7, #12
 8004388:	2102      	movs	r1, #2
 800438a:	4618      	mov	r0, r3
 800438c:	f000 fbb6 	bl	8004afc <uart1_write>
 8004390:	bf00      	nop
 8004392:	3710      	adds	r7, #16
 8004394:	46bd      	mov	sp, r7
 8004396:	bd80      	pop	{r7, pc}

08004398 <uart_cmd_task>:

void uart_cmd_task(void *arg) {
 8004398:	b580      	push	{r7, lr}
 800439a:	b0aa      	sub	sp, #168	@ 0xa8
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
    (void)arg;
    for (;;) {
        uint8_t b;
        if (uart1_read_byte(&b, 100) == 0) {
 80043a0:	f107 039a 	add.w	r3, r7, #154	@ 0x9a
 80043a4:	2164      	movs	r1, #100	@ 0x64
 80043a6:	4618      	mov	r0, r3
 80043a8:	f000 fbcc 	bl	8004b44 <uart1_read_byte>
 80043ac:	4603      	mov	r3, r0
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	f040 810d 	bne.w	80045ce <uart_cmd_task+0x236>
            if (b != STX) { vTaskDelay(pdMS_TO_TICKS(1)); continue; }
 80043b4:	f897 309a 	ldrb.w	r3, [r7, #154]	@ 0x9a
 80043b8:	2b55      	cmp	r3, #85	@ 0x55
 80043ba:	d003      	beq.n	80043c4 <uart_cmd_task+0x2c>
 80043bc:	2001      	movs	r0, #1
 80043be:	f001 fc77 	bl	8005cb0 <vTaskDelay>
 80043c2:	e107      	b.n	80045d4 <uart_cmd_task+0x23c>

            uint8_t head[3];
            if (read_exact(head, 3, 50) < 0) { vTaskDelay(pdMS_TO_TICKS(1)); continue; }
 80043c4:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80043c8:	2232      	movs	r2, #50	@ 0x32
 80043ca:	2103      	movs	r1, #3
 80043cc:	4618      	mov	r0, r3
 80043ce:	f7ff ff9b 	bl	8004308 <read_exact>
 80043d2:	4603      	mov	r3, r0
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	da03      	bge.n	80043e0 <uart_cmd_task+0x48>
 80043d8:	2001      	movs	r0, #1
 80043da:	f001 fc69 	bl	8005cb0 <vTaskDelay>
 80043de:	e0f9      	b.n	80045d4 <uart_cmd_task+0x23c>
            const uint8_t type = head[0];
 80043e0:	f897 3094 	ldrb.w	r3, [r7, #148]	@ 0x94
 80043e4:	f887 30a5 	strb.w	r3, [r7, #165]	@ 0xa5
            const uint8_t seq  = head[1];
 80043e8:	f897 3095 	ldrb.w	r3, [r7, #149]	@ 0x95
 80043ec:	f887 30a4 	strb.w	r3, [r7, #164]	@ 0xa4
            const uint8_t lenL = head[2];
 80043f0:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 80043f4:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
            uint8_t lenH;
            if (read_exact(&lenH, 1, 50) < 0) { vTaskDelay(pdMS_TO_TICKS(1)); continue; }
 80043f8:	f107 0393 	add.w	r3, r7, #147	@ 0x93
 80043fc:	2232      	movs	r2, #50	@ 0x32
 80043fe:	2101      	movs	r1, #1
 8004400:	4618      	mov	r0, r3
 8004402:	f7ff ff81 	bl	8004308 <read_exact>
 8004406:	4603      	mov	r3, r0
 8004408:	2b00      	cmp	r3, #0
 800440a:	da03      	bge.n	8004414 <uart_cmd_task+0x7c>
 800440c:	2001      	movs	r0, #1
 800440e:	f001 fc4f 	bl	8005cb0 <vTaskDelay>
 8004412:	e0df      	b.n	80045d4 <uart_cmd_task+0x23c>
            const uint16_t len = (uint16_t)lenL | ((uint16_t)lenH << 8);
 8004414:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8004418:	b21a      	sxth	r2, r3
 800441a:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
 800441e:	b21b      	sxth	r3, r3
 8004420:	021b      	lsls	r3, r3, #8
 8004422:	b21b      	sxth	r3, r3
 8004424:	4313      	orrs	r3, r2
 8004426:	b21b      	sxth	r3, r3
 8004428:	f8a7 30a0 	strh.w	r3, [r7, #160]	@ 0xa0

            if (len > 64) {
 800442c:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	@ 0xa0
 8004430:	2b40      	cmp	r3, #64	@ 0x40
 8004432:	d91f      	bls.n	8004474 <uart_cmd_task+0xdc>
                uint8_t drop;
                for (uint16_t i = 0; i < (uint16_t)(len + 2); i++) {
 8004434:	2300      	movs	r3, #0
 8004436:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
 800443a:	e00d      	b.n	8004458 <uart_cmd_task+0xc0>
                    if (uart1_read_byte(&drop, 10) < 0) break;
 800443c:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8004440:	210a      	movs	r1, #10
 8004442:	4618      	mov	r0, r3
 8004444:	f000 fb7e 	bl	8004b44 <uart1_read_byte>
 8004448:	4603      	mov	r3, r0
 800444a:	2b00      	cmp	r3, #0
 800444c:	db0d      	blt.n	800446a <uart_cmd_task+0xd2>
                for (uint16_t i = 0; i < (uint16_t)(len + 2); i++) {
 800444e:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8004452:	3301      	adds	r3, #1
 8004454:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
 8004458:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	@ 0xa0
 800445c:	3302      	adds	r3, #2
 800445e:	b29b      	uxth	r3, r3
 8004460:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	@ 0xa6
 8004464:	429a      	cmp	r2, r3
 8004466:	d3e9      	bcc.n	800443c <uart_cmd_task+0xa4>
 8004468:	e000      	b.n	800446c <uart_cmd_task+0xd4>
                    if (uart1_read_byte(&drop, 10) < 0) break;
 800446a:	bf00      	nop
                }
                vTaskDelay(pdMS_TO_TICKS(1)); continue;
 800446c:	2001      	movs	r0, #1
 800446e:	f001 fc1f 	bl	8005cb0 <vTaskDelay>
 8004472:	e0af      	b.n	80045d4 <uart_cmd_task+0x23c>
            }

            uint8_t payload[64];
            if (len && read_exact(payload, len, 200) < 0) { vTaskDelay(pdMS_TO_TICKS(1)); continue; }
 8004474:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	@ 0xa0
 8004478:	2b00      	cmp	r3, #0
 800447a:	d00e      	beq.n	800449a <uart_cmd_task+0x102>
 800447c:	f8b7 10a0 	ldrh.w	r1, [r7, #160]	@ 0xa0
 8004480:	f107 0308 	add.w	r3, r7, #8
 8004484:	22c8      	movs	r2, #200	@ 0xc8
 8004486:	4618      	mov	r0, r3
 8004488:	f7ff ff3e 	bl	8004308 <read_exact>
 800448c:	4603      	mov	r3, r0
 800448e:	2b00      	cmp	r3, #0
 8004490:	da03      	bge.n	800449a <uart_cmd_task+0x102>
 8004492:	2001      	movs	r0, #1
 8004494:	f001 fc0c 	bl	8005cb0 <vTaskDelay>
 8004498:	e09c      	b.n	80045d4 <uart_cmd_task+0x23c>

            uint8_t c16lsb, c16msb;
            if (read_exact(&c16lsb, 1, 50) < 0 || read_exact(&c16msb, 1, 50) < 0) {
 800449a:	f107 0392 	add.w	r3, r7, #146	@ 0x92
 800449e:	2232      	movs	r2, #50	@ 0x32
 80044a0:	2101      	movs	r1, #1
 80044a2:	4618      	mov	r0, r3
 80044a4:	f7ff ff30 	bl	8004308 <read_exact>
 80044a8:	4603      	mov	r3, r0
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	db09      	blt.n	80044c2 <uart_cmd_task+0x12a>
 80044ae:	f107 0391 	add.w	r3, r7, #145	@ 0x91
 80044b2:	2232      	movs	r2, #50	@ 0x32
 80044b4:	2101      	movs	r1, #1
 80044b6:	4618      	mov	r0, r3
 80044b8:	f7ff ff26 	bl	8004308 <read_exact>
 80044bc:	4603      	mov	r3, r0
 80044be:	2b00      	cmp	r3, #0
 80044c0:	da03      	bge.n	80044ca <uart_cmd_task+0x132>
                vTaskDelay(pdMS_TO_TICKS(1)); continue;
 80044c2:	2001      	movs	r0, #1
 80044c4:	f001 fbf4 	bl	8005cb0 <vTaskDelay>
 80044c8:	e084      	b.n	80045d4 <uart_cmd_task+0x23c>
            }
            const uint16_t rx_crc = (uint16_t)c16lsb | ((uint16_t)c16msb << 8);
 80044ca:	f897 3092 	ldrb.w	r3, [r7, #146]	@ 0x92
 80044ce:	b21a      	sxth	r2, r3
 80044d0:	f897 3091 	ldrb.w	r3, [r7, #145]	@ 0x91
 80044d4:	b21b      	sxth	r3, r3
 80044d6:	021b      	lsls	r3, r3, #8
 80044d8:	b21b      	sxth	r3, r3
 80044da:	4313      	orrs	r3, r2
 80044dc:	b21b      	sxth	r3, r3
 80044de:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e

            uint8_t cbuf[5 + 64];
            cbuf[0]=STX; cbuf[1]=type; cbuf[2]=seq; cbuf[3]=lenL; cbuf[4]=lenH;
 80044e2:	2355      	movs	r3, #85	@ 0x55
 80044e4:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
 80044e8:	f897 30a5 	ldrb.w	r3, [r7, #165]	@ 0xa5
 80044ec:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
 80044f0:	f897 30a4 	ldrb.w	r3, [r7, #164]	@ 0xa4
 80044f4:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
 80044f8:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80044fc:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
 8004500:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
 8004504:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
            if (len) memcpy(&cbuf[5], payload, len);
 8004508:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	@ 0xa0
 800450c:	2b00      	cmp	r3, #0
 800450e:	d009      	beq.n	8004524 <uart_cmd_task+0x18c>
 8004510:	f8b7 20a0 	ldrh.w	r2, [r7, #160]	@ 0xa0
 8004514:	f107 0108 	add.w	r1, r7, #8
 8004518:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800451c:	3305      	adds	r3, #5
 800451e:	4618      	mov	r0, r3
 8004520:	f002 fda0 	bl	8007064 <memcpy>
            const uint16_t calc = crc16_ccitt(cbuf, 5 + len);
 8004524:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	@ 0xa0
 8004528:	3305      	adds	r3, #5
 800452a:	461a      	mov	r2, r3
 800452c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8004530:	4611      	mov	r1, r2
 8004532:	4618      	mov	r0, r3
 8004534:	f7ff fe0c 	bl	8004150 <crc16_ccitt>
 8004538:	4603      	mov	r3, r0
 800453a:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
            if (calc != rx_crc) { send_nack(seq); vTaskDelay(pdMS_TO_TICKS(1)); continue; }
 800453e:	f8b7 209c 	ldrh.w	r2, [r7, #156]	@ 0x9c
 8004542:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8004546:	429a      	cmp	r2, r3
 8004548:	d008      	beq.n	800455c <uart_cmd_task+0x1c4>
 800454a:	f897 30a4 	ldrb.w	r3, [r7, #164]	@ 0xa4
 800454e:	4618      	mov	r0, r3
 8004550:	f7ff ff0f 	bl	8004372 <send_nack>
 8004554:	2001      	movs	r0, #1
 8004556:	f001 fbab 	bl	8005cb0 <vTaskDelay>
 800455a:	e03b      	b.n	80045d4 <uart_cmd_task+0x23c>

            if (type == TYPE_Q && len == 1) {
 800455c:	f897 30a5 	ldrb.w	r3, [r7, #165]	@ 0xa5
 8004560:	2b10      	cmp	r3, #16
 8004562:	d12f      	bne.n	80045c4 <uart_cmd_task+0x22c>
 8004564:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	@ 0xa0
 8004568:	2b01      	cmp	r3, #1
 800456a:	d12b      	bne.n	80045c4 <uart_cmd_task+0x22c>
                const uint8_t cmd = payload[0];
 800456c:	7a3b      	ldrb	r3, [r7, #8]
 800456e:	f887 309b 	strb.w	r3, [r7, #155]	@ 0x9b
                log_printf("[APP] RX Q: cmd=0x%02X seq=%u len=%u\n", cmd, seq, (unsigned)len);
 8004572:	f897 109b 	ldrb.w	r1, [r7, #155]	@ 0x9b
 8004576:	f897 20a4 	ldrb.w	r2, [r7, #164]	@ 0xa4
 800457a:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	@ 0xa0
 800457e:	4816      	ldr	r0, [pc, #88]	@ (80045d8 <uart_cmd_task+0x240>)
 8004580:	f000 fb3b 	bl	8004bfa <log_printf>

                if (cmd == CMD_BOOT) {
 8004584:	f897 309b 	ldrb.w	r3, [r7, #155]	@ 0x9b
 8004588:	2b02      	cmp	r3, #2
 800458a:	d115      	bne.n	80045b8 <uart_cmd_task+0x220>
                    send_ack(seq);
 800458c:	f897 30a4 	ldrb.w	r3, [r7, #164]	@ 0xa4
 8004590:	4618      	mov	r0, r3
 8004592:	f7ff fedb 	bl	800434c <send_ack>
                    while (!(USART1->SR & USART_SR_TC)) {}
 8004596:	bf00      	nop
 8004598:	4b10      	ldr	r3, [pc, #64]	@ (80045dc <uart_cmd_task+0x244>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d0f9      	beq.n	8004598 <uart_cmd_task+0x200>
                    log_printf("[APP] CMD_BOOT -> set BOOT_REQ & reset\n");
 80045a4:	480e      	ldr	r0, [pc, #56]	@ (80045e0 <uart_cmd_task+0x248>)
 80045a6:	f000 fb28 	bl	8004bfa <log_printf>
                    meta_request_boot();
 80045aa:	f7ff fe11 	bl	80041d0 <meta_request_boot>
                    vTaskDelay(pdMS_TO_TICKS(10));
 80045ae:	200a      	movs	r0, #10
 80045b0:	f001 fb7e 	bl	8005cb0 <vTaskDelay>
                    NVIC_SystemReset();
 80045b4:	f7ff fe92 	bl	80042dc <__NVIC_SystemReset>
                } else {
                    send_ack(seq);
 80045b8:	f897 30a4 	ldrb.w	r3, [r7, #164]	@ 0xa4
 80045bc:	4618      	mov	r0, r3
 80045be:	f7ff fec5 	bl	800434c <send_ack>
            if (type == TYPE_Q && len == 1) {
 80045c2:	e004      	b.n	80045ce <uart_cmd_task+0x236>
                }
            } else {
                send_nack(seq);
 80045c4:	f897 30a4 	ldrb.w	r3, [r7, #164]	@ 0xa4
 80045c8:	4618      	mov	r0, r3
 80045ca:	f7ff fed2 	bl	8004372 <send_nack>
            }
        }
        vTaskDelay(pdMS_TO_TICKS(5));
 80045ce:	2005      	movs	r0, #5
 80045d0:	f001 fb6e 	bl	8005cb0 <vTaskDelay>
    for (;;) {
 80045d4:	e6e4      	b.n	80043a0 <uart_cmd_task+0x8>
 80045d6:	bf00      	nop
 80045d8:	08007930 	.word	0x08007930
 80045dc:	40013800 	.word	0x40013800
 80045e0:	08007958 	.word	0x08007958

080045e4 <clock_init>:
 */

#include "app.h"
#include "app_system.h"

static void clock_init(void) {
 80045e4:	b480      	push	{r7}
 80045e6:	af00      	add	r7, sp, #0
    RCC->CR |= RCC_CR_HSEON;
 80045e8:	4b31      	ldr	r3, [pc, #196]	@ (80046b0 <clock_init+0xcc>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a30      	ldr	r2, [pc, #192]	@ (80046b0 <clock_init+0xcc>)
 80045ee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80045f2:	6013      	str	r3, [r2, #0]
    while (!(RCC->CR & RCC_CR_HSERDY)) {}
 80045f4:	bf00      	nop
 80045f6:	4b2e      	ldr	r3, [pc, #184]	@ (80046b0 <clock_init+0xcc>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d0f9      	beq.n	80045f6 <clock_init+0x12>

    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8004602:	4b2c      	ldr	r3, [pc, #176]	@ (80046b4 <clock_init+0xd0>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a2b      	ldr	r2, [pc, #172]	@ (80046b4 <clock_init+0xd0>)
 8004608:	f043 0310 	orr.w	r3, r3, #16
 800460c:	6013      	str	r3, [r2, #0]
    FLASH->ACR &= ~FLASH_ACR_LATENCY;
 800460e:	4b29      	ldr	r3, [pc, #164]	@ (80046b4 <clock_init+0xd0>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a28      	ldr	r2, [pc, #160]	@ (80046b4 <clock_init+0xd0>)
 8004614:	f023 0307 	bic.w	r3, r3, #7
 8004618:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= FLASH_ACR_LATENCY_2;
 800461a:	4b26      	ldr	r3, [pc, #152]	@ (80046b4 <clock_init+0xd0>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a25      	ldr	r2, [pc, #148]	@ (80046b4 <clock_init+0xd0>)
 8004620:	f043 0304 	orr.w	r3, r3, #4
 8004624:	6013      	str	r3, [r2, #0]

    RCC->CFGR &= ~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL);
 8004626:	4b22      	ldr	r3, [pc, #136]	@ (80046b0 <clock_init+0xcc>)
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	4a21      	ldr	r2, [pc, #132]	@ (80046b0 <clock_init+0xcc>)
 800462c:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 8004630:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= RCC_CFGR_PLLSRC;      // HSE
 8004632:	4b1f      	ldr	r3, [pc, #124]	@ (80046b0 <clock_init+0xcc>)
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	4a1e      	ldr	r2, [pc, #120]	@ (80046b0 <clock_init+0xcc>)
 8004638:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800463c:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= RCC_CFGR_PLLMULL9;    // x9 = 72MHz
 800463e:	4b1c      	ldr	r3, [pc, #112]	@ (80046b0 <clock_init+0xcc>)
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	4a1b      	ldr	r2, [pc, #108]	@ (80046b0 <clock_init+0xcc>)
 8004644:	f443 13e0 	orr.w	r3, r3, #1835008	@ 0x1c0000
 8004648:	6053      	str	r3, [r2, #4]

    RCC->CFGR &= ~(RCC_CFGR_HPRE | RCC_CFGR_PPRE1 | RCC_CFGR_PPRE2);
 800464a:	4b19      	ldr	r3, [pc, #100]	@ (80046b0 <clock_init+0xcc>)
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	4a18      	ldr	r2, [pc, #96]	@ (80046b0 <clock_init+0xcc>)
 8004650:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8004654:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8004658:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;  // APB1 = 36MHz
 800465a:	4b15      	ldr	r3, [pc, #84]	@ (80046b0 <clock_init+0xcc>)
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	4a14      	ldr	r2, [pc, #80]	@ (80046b0 <clock_init+0xcc>)
 8004660:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004664:	6053      	str	r3, [r2, #4]

    RCC->CR |= RCC_CR_PLLON;
 8004666:	4b12      	ldr	r3, [pc, #72]	@ (80046b0 <clock_init+0xcc>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4a11      	ldr	r2, [pc, #68]	@ (80046b0 <clock_init+0xcc>)
 800466c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004670:	6013      	str	r3, [r2, #0]
    while (!(RCC->CR & RCC_CR_PLLRDY)) {}
 8004672:	bf00      	nop
 8004674:	4b0e      	ldr	r3, [pc, #56]	@ (80046b0 <clock_init+0xcc>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800467c:	2b00      	cmp	r3, #0
 800467e:	d0f9      	beq.n	8004674 <clock_init+0x90>

    RCC->CFGR &= ~RCC_CFGR_SW;
 8004680:	4b0b      	ldr	r3, [pc, #44]	@ (80046b0 <clock_init+0xcc>)
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	4a0a      	ldr	r2, [pc, #40]	@ (80046b0 <clock_init+0xcc>)
 8004686:	f023 0303 	bic.w	r3, r3, #3
 800468a:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 800468c:	4b08      	ldr	r3, [pc, #32]	@ (80046b0 <clock_init+0xcc>)
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	4a07      	ldr	r2, [pc, #28]	@ (80046b0 <clock_init+0xcc>)
 8004692:	f043 0302 	orr.w	r3, r3, #2
 8004696:	6053      	str	r3, [r2, #4]
    while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL) {}
 8004698:	bf00      	nop
 800469a:	4b05      	ldr	r3, [pc, #20]	@ (80046b0 <clock_init+0xcc>)
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	f003 030c 	and.w	r3, r3, #12
 80046a2:	2b08      	cmp	r3, #8
 80046a4:	d1f9      	bne.n	800469a <clock_init+0xb6>
}
 80046a6:	bf00      	nop
 80046a8:	bf00      	nop
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bc80      	pop	{r7}
 80046ae:	4770      	bx	lr
 80046b0:	40021000 	.word	0x40021000
 80046b4:	40022000 	.word	0x40022000

080046b8 <System_Init>:

void System_Init(void) {
 80046b8:	b580      	push	{r7, lr}
 80046ba:	af00      	add	r7, sp, #0
    RCC->CR   |= RCC_CR_HSION;
 80046bc:	4b0d      	ldr	r3, [pc, #52]	@ (80046f4 <System_Init+0x3c>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a0c      	ldr	r2, [pc, #48]	@ (80046f4 <System_Init+0x3c>)
 80046c2:	f043 0301 	orr.w	r3, r3, #1
 80046c6:	6013      	str	r3, [r2, #0]
    RCC->CFGR  = 0x00000000;
 80046c8:	4b0a      	ldr	r3, [pc, #40]	@ (80046f4 <System_Init+0x3c>)
 80046ca:	2200      	movs	r2, #0
 80046cc:	605a      	str	r2, [r3, #4]
    RCC->CR   &= ~(RCC_CR_HSEON | RCC_CR_PLLON);
 80046ce:	4b09      	ldr	r3, [pc, #36]	@ (80046f4 <System_Init+0x3c>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a08      	ldr	r2, [pc, #32]	@ (80046f4 <System_Init+0x3c>)
 80046d4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80046d8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80046dc:	6013      	str	r3, [r2, #0]
    RCC->CIR   = 0x00000000;
 80046de:	4b05      	ldr	r3, [pc, #20]	@ (80046f4 <System_Init+0x3c>)
 80046e0:	2200      	movs	r2, #0
 80046e2:	609a      	str	r2, [r3, #8]

    clock_init();
 80046e4:	f7ff ff7e 	bl	80045e4 <clock_init>
    SystemCoreClock = SYS_CORE_CLOCK_HZ;
 80046e8:	4b03      	ldr	r3, [pc, #12]	@ (80046f8 <System_Init+0x40>)
 80046ea:	4a04      	ldr	r2, [pc, #16]	@ (80046fc <System_Init+0x44>)
 80046ec:	601a      	str	r2, [r3, #0]
}
 80046ee:	bf00      	nop
 80046f0:	bd80      	pop	{r7, pc}
 80046f2:	bf00      	nop
 80046f4:	40021000 	.word	0x40021000
 80046f8:	20000000 	.word	0x20000000
 80046fc:	044aa200 	.word	0x044aa200

08004700 <relocate_vtor>:

void relocate_vtor(void) {
 8004700:	b480      	push	{r7}
 8004702:	af00      	add	r7, sp, #0
    SCB->VTOR = APP_BASE;
 8004704:	4b06      	ldr	r3, [pc, #24]	@ (8004720 <relocate_vtor+0x20>)
 8004706:	4a07      	ldr	r2, [pc, #28]	@ (8004724 <relocate_vtor+0x24>)
 8004708:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 800470a:	f3bf 8f4f 	dsb	sy
}
 800470e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004710:	f3bf 8f6f 	isb	sy
}
 8004714:	bf00      	nop
    __DSB(); __ISB();
}
 8004716:	bf00      	nop
 8004718:	46bd      	mov	sp, r7
 800471a:	bc80      	pop	{r7}
 800471c:	4770      	bx	lr
 800471e:	bf00      	nop
 8004720:	e000ed00 	.word	0xe000ed00
 8004724:	08004000 	.word	0x08004000

08004728 <app_tasks_preinit>:
#include "app_uart.h"
#include "app_tasks.h"

QueueHandle_t app_qh = NULL;

void app_tasks_preinit(void) {
 8004728:	b580      	push	{r7, lr}
 800472a:	af00      	add	r7, sp, #0
    app_qh = xQueueCreate(8, sizeof(uint32_t));
 800472c:	2200      	movs	r2, #0
 800472e:	2104      	movs	r1, #4
 8004730:	2008      	movs	r0, #8
 8004732:	f000 fdbf 	bl	80052b4 <xQueueGenericCreate>
 8004736:	4603      	mov	r3, r0
 8004738:	4a01      	ldr	r2, [pc, #4]	@ (8004740 <app_tasks_preinit+0x18>)
 800473a:	6013      	str	r3, [r2, #0]
}
 800473c:	bf00      	nop
 800473e:	bd80      	pop	{r7, pc}
 8004740:	20000074 	.word	0x20000074

08004744 <blink_task>:

void blink_task(void *arg) {
 8004744:	b580      	push	{r7, lr}
 8004746:	b082      	sub	sp, #8
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
    (void)arg;
    for (;;) {
        LED_PORT->ODR ^= (1U << LED_PIN);
 800474c:	4b05      	ldr	r3, [pc, #20]	@ (8004764 <blink_task+0x20>)
 800474e:	68db      	ldr	r3, [r3, #12]
 8004750:	4a04      	ldr	r2, [pc, #16]	@ (8004764 <blink_task+0x20>)
 8004752:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004756:	60d3      	str	r3, [r2, #12]
        vTaskDelay(pdMS_TO_TICKS(500));
 8004758:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800475c:	f001 faa8 	bl	8005cb0 <vTaskDelay>
        LED_PORT->ODR ^= (1U << LED_PIN);
 8004760:	bf00      	nop
 8004762:	e7f3      	b.n	800474c <blink_task+0x8>
 8004764:	40011000 	.word	0x40011000

08004768 <logger_task>:
    }
}

void logger_task(void *arg) {
 8004768:	b580      	push	{r7, lr}
 800476a:	b084      	sub	sp, #16
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
    (void)arg;
    for (;;) {
        const uint32_t tick = (uint32_t)xTaskGetTickCount();
 8004770:	f001 fbea 	bl	8005f48 <xTaskGetTickCount>
 8004774:	60f8      	str	r0, [r7, #12]
        const unsigned hz   = (unsigned)configTICK_RATE_HZ;
 8004776:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800477a:	60bb      	str	r3, [r7, #8]
        log_printf("[APP] tick=%lu tick_hz=%u\n", (unsigned long)tick, hz);
 800477c:	68ba      	ldr	r2, [r7, #8]
 800477e:	68f9      	ldr	r1, [r7, #12]
 8004780:	4804      	ldr	r0, [pc, #16]	@ (8004794 <logger_task+0x2c>)
 8004782:	f000 fa3a 	bl	8004bfa <log_printf>
        vTaskDelay(pdMS_TO_TICKS(1000));
 8004786:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800478a:	f001 fa91 	bl	8005cb0 <vTaskDelay>
    for (;;) {
 800478e:	bf00      	nop
 8004790:	e7ee      	b.n	8004770 <logger_task+0x8>
 8004792:	bf00      	nop
 8004794:	08007980 	.word	0x08007980

08004798 <producer_task>:
    }
}

void producer_task(void *arg) {
 8004798:	b580      	push	{r7, lr}
 800479a:	b084      	sub	sp, #16
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
    (void)arg;
    uint32_t i = 0;
 80047a0:	2300      	movs	r3, #0
 80047a2:	60fb      	str	r3, [r7, #12]
    for (;;) {
        if (app_qh) (void)xQueueSend(app_qh, &i, portMAX_DELAY);
 80047a4:	4b09      	ldr	r3, [pc, #36]	@ (80047cc <producer_task+0x34>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d008      	beq.n	80047be <producer_task+0x26>
 80047ac:	4b07      	ldr	r3, [pc, #28]	@ (80047cc <producer_task+0x34>)
 80047ae:	6818      	ldr	r0, [r3, #0]
 80047b0:	f107 010c 	add.w	r1, r7, #12
 80047b4:	2300      	movs	r3, #0
 80047b6:	f04f 32ff 	mov.w	r2, #4294967295
 80047ba:	f000 fdd5 	bl	8005368 <xQueueGenericSend>
        i++;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	3301      	adds	r3, #1
 80047c2:	60fb      	str	r3, [r7, #12]
        vTaskDelay(pdMS_TO_TICKS(200));
 80047c4:	20c8      	movs	r0, #200	@ 0xc8
 80047c6:	f001 fa73 	bl	8005cb0 <vTaskDelay>
        if (app_qh) (void)xQueueSend(app_qh, &i, portMAX_DELAY);
 80047ca:	e7eb      	b.n	80047a4 <producer_task+0xc>
 80047cc:	20000074 	.word	0x20000074

080047d0 <consumer_task>:
    }
}

void consumer_task(void *arg) {
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b084      	sub	sp, #16
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
    (void)arg;
    uint32_t v;
    for (;;) {
        if (app_qh && xQueueReceive(app_qh, &v, portMAX_DELAY) == pdTRUE) {
 80047d8:	4b0a      	ldr	r3, [pc, #40]	@ (8004804 <consumer_task+0x34>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d0fb      	beq.n	80047d8 <consumer_task+0x8>
 80047e0:	4b08      	ldr	r3, [pc, #32]	@ (8004804 <consumer_task+0x34>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f107 010c 	add.w	r1, r7, #12
 80047e8:	f04f 32ff 	mov.w	r2, #4294967295
 80047ec:	4618      	mov	r0, r3
 80047ee:	f000 febd 	bl	800556c <xQueueReceive>
 80047f2:	4603      	mov	r3, r0
 80047f4:	2b01      	cmp	r3, #1
 80047f6:	d1ef      	bne.n	80047d8 <consumer_task+0x8>
            log_printf("[Q] got %lu\n", (unsigned long)v);
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	4619      	mov	r1, r3
 80047fc:	4802      	ldr	r0, [pc, #8]	@ (8004808 <consumer_task+0x38>)
 80047fe:	f000 f9fc 	bl	8004bfa <log_printf>
        if (app_qh && xQueueReceive(app_qh, &v, portMAX_DELAY) == pdTRUE) {
 8004802:	e7e9      	b.n	80047d8 <consumer_task+0x8>
 8004804:	20000074 	.word	0x20000074
 8004808:	0800799c 	.word	0x0800799c

0800480c <__NVIC_EnableIRQ>:
{
 800480c:	b480      	push	{r7}
 800480e:	b083      	sub	sp, #12
 8004810:	af00      	add	r7, sp, #0
 8004812:	4603      	mov	r3, r0
 8004814:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800481a:	2b00      	cmp	r3, #0
 800481c:	db0b      	blt.n	8004836 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800481e:	79fb      	ldrb	r3, [r7, #7]
 8004820:	f003 021f 	and.w	r2, r3, #31
 8004824:	4906      	ldr	r1, [pc, #24]	@ (8004840 <__NVIC_EnableIRQ+0x34>)
 8004826:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800482a:	095b      	lsrs	r3, r3, #5
 800482c:	2001      	movs	r0, #1
 800482e:	fa00 f202 	lsl.w	r2, r0, r2
 8004832:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004836:	bf00      	nop
 8004838:	370c      	adds	r7, #12
 800483a:	46bd      	mov	sp, r7
 800483c:	bc80      	pop	{r7}
 800483e:	4770      	bx	lr
 8004840:	e000e100 	.word	0xe000e100

08004844 <__NVIC_SetPriority>:
{
 8004844:	b480      	push	{r7}
 8004846:	b083      	sub	sp, #12
 8004848:	af00      	add	r7, sp, #0
 800484a:	4603      	mov	r3, r0
 800484c:	6039      	str	r1, [r7, #0]
 800484e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004850:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004854:	2b00      	cmp	r3, #0
 8004856:	db0a      	blt.n	800486e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	b2da      	uxtb	r2, r3
 800485c:	490c      	ldr	r1, [pc, #48]	@ (8004890 <__NVIC_SetPriority+0x4c>)
 800485e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004862:	0112      	lsls	r2, r2, #4
 8004864:	b2d2      	uxtb	r2, r2
 8004866:	440b      	add	r3, r1
 8004868:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800486c:	e00a      	b.n	8004884 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	b2da      	uxtb	r2, r3
 8004872:	4908      	ldr	r1, [pc, #32]	@ (8004894 <__NVIC_SetPriority+0x50>)
 8004874:	79fb      	ldrb	r3, [r7, #7]
 8004876:	f003 030f 	and.w	r3, r3, #15
 800487a:	3b04      	subs	r3, #4
 800487c:	0112      	lsls	r2, r2, #4
 800487e:	b2d2      	uxtb	r2, r2
 8004880:	440b      	add	r3, r1
 8004882:	761a      	strb	r2, [r3, #24]
}
 8004884:	bf00      	nop
 8004886:	370c      	adds	r7, #12
 8004888:	46bd      	mov	sp, r7
 800488a:	bc80      	pop	{r7}
 800488c:	4770      	bx	lr
 800488e:	bf00      	nop
 8004890:	e000e100 	.word	0xe000e100
 8004894:	e000ed00 	.word	0xe000ed00

08004898 <rb_pop>:
/* Ring buffer RX USART1 */
#define RX_RB_SZ 256
static volatile uint8_t  rx_rb[RX_RB_SZ];
static volatile uint16_t rx_head = 0, rx_tail = 0;

static inline int rb_pop(uint8_t *out) {
 8004898:	b480      	push	{r7}
 800489a:	b083      	sub	sp, #12
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
    if (rx_head == rx_tail) return 0;
 80048a0:	4b0f      	ldr	r3, [pc, #60]	@ (80048e0 <rb_pop+0x48>)
 80048a2:	881b      	ldrh	r3, [r3, #0]
 80048a4:	b29a      	uxth	r2, r3
 80048a6:	4b0f      	ldr	r3, [pc, #60]	@ (80048e4 <rb_pop+0x4c>)
 80048a8:	881b      	ldrh	r3, [r3, #0]
 80048aa:	b29b      	uxth	r3, r3
 80048ac:	429a      	cmp	r2, r3
 80048ae:	d101      	bne.n	80048b4 <rb_pop+0x1c>
 80048b0:	2300      	movs	r3, #0
 80048b2:	e010      	b.n	80048d6 <rb_pop+0x3e>
    *out = rx_rb[rx_tail % RX_RB_SZ];
 80048b4:	4b0b      	ldr	r3, [pc, #44]	@ (80048e4 <rb_pop+0x4c>)
 80048b6:	881b      	ldrh	r3, [r3, #0]
 80048b8:	b29b      	uxth	r3, r3
 80048ba:	b2db      	uxtb	r3, r3
 80048bc:	4a0a      	ldr	r2, [pc, #40]	@ (80048e8 <rb_pop+0x50>)
 80048be:	5cd3      	ldrb	r3, [r2, r3]
 80048c0:	b2da      	uxtb	r2, r3
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	701a      	strb	r2, [r3, #0]
    rx_tail++;
 80048c6:	4b07      	ldr	r3, [pc, #28]	@ (80048e4 <rb_pop+0x4c>)
 80048c8:	881b      	ldrh	r3, [r3, #0]
 80048ca:	b29b      	uxth	r3, r3
 80048cc:	3301      	adds	r3, #1
 80048ce:	b29a      	uxth	r2, r3
 80048d0:	4b04      	ldr	r3, [pc, #16]	@ (80048e4 <rb_pop+0x4c>)
 80048d2:	801a      	strh	r2, [r3, #0]
    return 1;
 80048d4:	2301      	movs	r3, #1
}
 80048d6:	4618      	mov	r0, r3
 80048d8:	370c      	adds	r7, #12
 80048da:	46bd      	mov	sp, r7
 80048dc:	bc80      	pop	{r7}
 80048de:	4770      	bx	lr
 80048e0:	20000178 	.word	0x20000178
 80048e4:	2000017a 	.word	0x2000017a
 80048e8:	20000078 	.word	0x20000078

080048ec <rb_push>:
static inline void rb_push(uint8_t b) {
 80048ec:	b480      	push	{r7}
 80048ee:	b083      	sub	sp, #12
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	4603      	mov	r3, r0
 80048f4:	71fb      	strb	r3, [r7, #7]
    rx_rb[rx_head % RX_RB_SZ] = b;
 80048f6:	4b13      	ldr	r3, [pc, #76]	@ (8004944 <rb_push+0x58>)
 80048f8:	881b      	ldrh	r3, [r3, #0]
 80048fa:	b29b      	uxth	r3, r3
 80048fc:	b2db      	uxtb	r3, r3
 80048fe:	4912      	ldr	r1, [pc, #72]	@ (8004948 <rb_push+0x5c>)
 8004900:	79fa      	ldrb	r2, [r7, #7]
 8004902:	54ca      	strb	r2, [r1, r3]
    rx_head++;
 8004904:	4b0f      	ldr	r3, [pc, #60]	@ (8004944 <rb_push+0x58>)
 8004906:	881b      	ldrh	r3, [r3, #0]
 8004908:	b29b      	uxth	r3, r3
 800490a:	3301      	adds	r3, #1
 800490c:	b29a      	uxth	r2, r3
 800490e:	4b0d      	ldr	r3, [pc, #52]	@ (8004944 <rb_push+0x58>)
 8004910:	801a      	strh	r2, [r3, #0]
    if ((uint16_t)(rx_head - rx_tail) > RX_RB_SZ) rx_tail = rx_head - RX_RB_SZ;
 8004912:	4b0c      	ldr	r3, [pc, #48]	@ (8004944 <rb_push+0x58>)
 8004914:	881b      	ldrh	r3, [r3, #0]
 8004916:	b29a      	uxth	r2, r3
 8004918:	4b0c      	ldr	r3, [pc, #48]	@ (800494c <rb_push+0x60>)
 800491a:	881b      	ldrh	r3, [r3, #0]
 800491c:	b29b      	uxth	r3, r3
 800491e:	1ad3      	subs	r3, r2, r3
 8004920:	b29b      	uxth	r3, r3
 8004922:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004926:	d907      	bls.n	8004938 <rb_push+0x4c>
 8004928:	4b06      	ldr	r3, [pc, #24]	@ (8004944 <rb_push+0x58>)
 800492a:	881b      	ldrh	r3, [r3, #0]
 800492c:	b29b      	uxth	r3, r3
 800492e:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8004932:	b29a      	uxth	r2, r3
 8004934:	4b05      	ldr	r3, [pc, #20]	@ (800494c <rb_push+0x60>)
 8004936:	801a      	strh	r2, [r3, #0]
}
 8004938:	bf00      	nop
 800493a:	370c      	adds	r7, #12
 800493c:	46bd      	mov	sp, r7
 800493e:	bc80      	pop	{r7}
 8004940:	4770      	bx	lr
 8004942:	bf00      	nop
 8004944:	20000178 	.word	0x20000178
 8004948:	20000078 	.word	0x20000078
 800494c:	2000017a 	.word	0x2000017a

08004950 <uart_gpio_init>:

/* GPIO + USART setup */
static void uart_gpio_init(void) {
 8004950:	b480      	push	{r7}
 8004952:	b083      	sub	sp, #12
 8004954:	af00      	add	r7, sp, #0
    RCC->APB2ENR |= RCC_APB2ENR_IOPAEN | RCC_APB2ENR_IOPCEN |
 8004956:	4b25      	ldr	r3, [pc, #148]	@ (80049ec <uart_gpio_init+0x9c>)
 8004958:	699b      	ldr	r3, [r3, #24]
 800495a:	4a24      	ldr	r2, [pc, #144]	@ (80049ec <uart_gpio_init+0x9c>)
 800495c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004960:	f043 031d 	orr.w	r3, r3, #29
 8004964:	6193      	str	r3, [r2, #24]
                    RCC_APB2ENR_AFIOEN | RCC_APB2ENR_USART1EN | RCC_APB2ENR_IOPBEN;
    RCC->APB1ENR |= RCC_APB1ENR_USART3EN;
 8004966:	4b21      	ldr	r3, [pc, #132]	@ (80049ec <uart_gpio_init+0x9c>)
 8004968:	69db      	ldr	r3, [r3, #28]
 800496a:	4a20      	ldr	r2, [pc, #128]	@ (80049ec <uart_gpio_init+0x9c>)
 800496c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004970:	61d3      	str	r3, [r2, #28]

    /* LED PC13: output push-pull 10 MHz */
    GPIOC->CRH &= ~(0xFU << ((13U - 8U) * 4U));
 8004972:	4b1f      	ldr	r3, [pc, #124]	@ (80049f0 <uart_gpio_init+0xa0>)
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	4a1e      	ldr	r2, [pc, #120]	@ (80049f0 <uart_gpio_init+0xa0>)
 8004978:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800497c:	6053      	str	r3, [r2, #4]
    GPIOC->CRH |=  (0x1U << ((13U - 8U) * 4U));
 800497e:	4b1c      	ldr	r3, [pc, #112]	@ (80049f0 <uart_gpio_init+0xa0>)
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	4a1b      	ldr	r2, [pc, #108]	@ (80049f0 <uart_gpio_init+0xa0>)
 8004984:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004988:	6053      	str	r3, [r2, #4]

    /* PA9 TX1 (AF PP), PA10 RX1 (floating) */
    uint32_t crh = GPIOA->CRH;
 800498a:	4b1a      	ldr	r3, [pc, #104]	@ (80049f4 <uart_gpio_init+0xa4>)
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	607b      	str	r3, [r7, #4]
    crh &= ~((0xFU) << ((9U - 8U)  * 4U));  crh |= ((0xBU) << ((9U - 8U)  * 4U));
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004996:	607b      	str	r3, [r7, #4]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 800499e:	607b      	str	r3, [r7, #4]
    crh &= ~((0xFU) << ((10U - 8U) * 4U));  crh |= ((0x4U) << ((10U - 8U) * 4U));
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80049a6:	607b      	str	r3, [r7, #4]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80049ae:	607b      	str	r3, [r7, #4]
    GPIOA->CRH = crh;
 80049b0:	4a10      	ldr	r2, [pc, #64]	@ (80049f4 <uart_gpio_init+0xa4>)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6053      	str	r3, [r2, #4]

    /* PB10 TX3 (AF PP), PB11 RX3 (floating) */
    uint32_t crh_b = GPIOB->CRH;
 80049b6:	4b10      	ldr	r3, [pc, #64]	@ (80049f8 <uart_gpio_init+0xa8>)
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	603b      	str	r3, [r7, #0]
    crh_b &= ~((0xFU) << ((10U - 8U) * 4U)); crh_b |= ((0xBU) << ((10U - 8U) * 4U));
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80049c2:	603b      	str	r3, [r7, #0]
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	f443 6330 	orr.w	r3, r3, #2816	@ 0xb00
 80049ca:	603b      	str	r3, [r7, #0]
    crh_b &= ~((0xFU) << ((11U - 8U) * 4U)); crh_b |= ((0x4U) << ((11U - 8U) * 4U));
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80049d2:	603b      	str	r3, [r7, #0]
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80049da:	603b      	str	r3, [r7, #0]
    GPIOB->CRH = crh_b;
 80049dc:	4a06      	ldr	r2, [pc, #24]	@ (80049f8 <uart_gpio_init+0xa8>)
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	6053      	str	r3, [r2, #4]
}
 80049e2:	bf00      	nop
 80049e4:	370c      	adds	r7, #12
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bc80      	pop	{r7}
 80049ea:	4770      	bx	lr
 80049ec:	40021000 	.word	0x40021000
 80049f0:	40011000 	.word	0x40011000
 80049f4:	40010800 	.word	0x40010800
 80049f8:	40010c00 	.word	0x40010c00

080049fc <uart_setup>:

static void uart_setup(USART_TypeDef *U, uint32_t pclk, uint32_t baud, int enable_rx) {
 80049fc:	b480      	push	{r7}
 80049fe:	b087      	sub	sp, #28
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	60f8      	str	r0, [r7, #12]
 8004a04:	60b9      	str	r1, [r7, #8]
 8004a06:	607a      	str	r2, [r7, #4]
 8004a08:	603b      	str	r3, [r7, #0]
    U->CR1 = 0; U->CR2 = 0; U->CR3 = 0;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	60da      	str	r2, [r3, #12]
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	2200      	movs	r2, #0
 8004a14:	611a      	str	r2, [r3, #16]
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	2200      	movs	r2, #0
 8004a1a:	615a      	str	r2, [r3, #20]
    const uint32_t div_mantissa = pclk / (16U * baud);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	011b      	lsls	r3, r3, #4
 8004a20:	68ba      	ldr	r2, [r7, #8]
 8004a22:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a26:	617b      	str	r3, [r7, #20]
    const uint32_t div_frac     = ((pclk % (16U * baud)) * 16U) / (16U * baud);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	011a      	lsls	r2, r3, #4
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	fbb3 f1f2 	udiv	r1, r3, r2
 8004a32:	fb01 f202 	mul.w	r2, r1, r2
 8004a36:	1a9b      	subs	r3, r3, r2
 8004a38:	011a      	lsls	r2, r3, #4
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	011b      	lsls	r3, r3, #4
 8004a3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a42:	613b      	str	r3, [r7, #16]
    U->BRR = (div_mantissa << 4) | (div_frac & 0xFU);
 8004a44:	697b      	ldr	r3, [r7, #20]
 8004a46:	011a      	lsls	r2, r3, #4
 8004a48:	693b      	ldr	r3, [r7, #16]
 8004a4a:	f003 030f 	and.w	r3, r3, #15
 8004a4e:	431a      	orrs	r2, r3
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	609a      	str	r2, [r3, #8]
    U->CR1 = USART_CR1_TE | USART_CR1_UE;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	f242 0208 	movw	r2, #8200	@ 0x2008
 8004a5a:	60da      	str	r2, [r3, #12]
    if (enable_rx) U->CR1 |= USART_CR1_RE;
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d005      	beq.n	8004a6e <uart_setup+0x72>
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	68db      	ldr	r3, [r3, #12]
 8004a66:	f043 0204 	orr.w	r2, r3, #4
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	60da      	str	r2, [r3, #12]
}
 8004a6e:	bf00      	nop
 8004a70:	371c      	adds	r7, #28
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bc80      	pop	{r7}
 8004a76:	4770      	bx	lr

08004a78 <uart_init>:

void uart_init(void) {
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	af00      	add	r7, sp, #0
    uart_gpio_init();
 8004a7c:	f7ff ff68 	bl	8004950 <uart_gpio_init>
    uart_setup(USART1, SYS_CORE_CLOCK_HZ,   UART1_BAUD, 1);
 8004a80:	2301      	movs	r3, #1
 8004a82:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004a86:	490d      	ldr	r1, [pc, #52]	@ (8004abc <uart_init+0x44>)
 8004a88:	480d      	ldr	r0, [pc, #52]	@ (8004ac0 <uart_init+0x48>)
 8004a8a:	f7ff ffb7 	bl	80049fc <uart_setup>
    uart_setup(USART3, SYS_CORE_CLOCK_HZ/2, UART3_BAUD, 0);
 8004a8e:	2300      	movs	r3, #0
 8004a90:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004a94:	490b      	ldr	r1, [pc, #44]	@ (8004ac4 <uart_init+0x4c>)
 8004a96:	480c      	ldr	r0, [pc, #48]	@ (8004ac8 <uart_init+0x50>)
 8004a98:	f7ff ffb0 	bl	80049fc <uart_setup>

    USART1->CR1 |= USART_CR1_RXNEIE;
 8004a9c:	4b08      	ldr	r3, [pc, #32]	@ (8004ac0 <uart_init+0x48>)
 8004a9e:	68db      	ldr	r3, [r3, #12]
 8004aa0:	4a07      	ldr	r2, [pc, #28]	@ (8004ac0 <uart_init+0x48>)
 8004aa2:	f043 0320 	orr.w	r3, r3, #32
 8004aa6:	60d3      	str	r3, [r2, #12]
    NVIC_SetPriority(USART1_IRQn, 10);
 8004aa8:	210a      	movs	r1, #10
 8004aaa:	2025      	movs	r0, #37	@ 0x25
 8004aac:	f7ff feca 	bl	8004844 <__NVIC_SetPriority>
    NVIC_EnableIRQ(USART1_IRQn);
 8004ab0:	2025      	movs	r0, #37	@ 0x25
 8004ab2:	f7ff feab 	bl	800480c <__NVIC_EnableIRQ>
}
 8004ab6:	bf00      	nop
 8004ab8:	bd80      	pop	{r7, pc}
 8004aba:	bf00      	nop
 8004abc:	044aa200 	.word	0x044aa200
 8004ac0:	40013800 	.word	0x40013800
 8004ac4:	02255100 	.word	0x02255100
 8004ac8:	40004800 	.word	0x40004800

08004acc <USART1_IRQHandler>:

void USART1_IRQHandler(void) {
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b082      	sub	sp, #8
 8004ad0:	af00      	add	r7, sp, #0
    const uint32_t sr = USART1->SR;
 8004ad2:	4b09      	ldr	r3, [pc, #36]	@ (8004af8 <USART1_IRQHandler+0x2c>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	607b      	str	r3, [r7, #4]
    if (sr & (USART_SR_RXNE | USART_SR_ORE)) {
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d006      	beq.n	8004af0 <USART1_IRQHandler+0x24>
        const uint8_t d = (uint8_t)USART1->DR;
 8004ae2:	4b05      	ldr	r3, [pc, #20]	@ (8004af8 <USART1_IRQHandler+0x2c>)
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	70fb      	strb	r3, [r7, #3]
        rb_push(d);
 8004ae8:	78fb      	ldrb	r3, [r7, #3]
 8004aea:	4618      	mov	r0, r3
 8004aec:	f7ff fefe 	bl	80048ec <rb_push>
    }
}
 8004af0:	bf00      	nop
 8004af2:	3708      	adds	r7, #8
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bd80      	pop	{r7, pc}
 8004af8:	40013800 	.word	0x40013800

08004afc <uart1_write>:

void uart1_write(const uint8_t *p, uint32_t n) {
 8004afc:	b480      	push	{r7}
 8004afe:	b085      	sub	sp, #20
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
 8004b04:	6039      	str	r1, [r7, #0]
    for (uint32_t i = 0; i < n; ++i) { while (!(USART1->SR & USART_SR_TXE)) {} USART1->DR = p[i]; }
 8004b06:	2300      	movs	r3, #0
 8004b08:	60fb      	str	r3, [r7, #12]
 8004b0a:	e00f      	b.n	8004b2c <uart1_write+0x30>
 8004b0c:	bf00      	nop
 8004b0e:	4b0c      	ldr	r3, [pc, #48]	@ (8004b40 <uart1_write+0x44>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d0f9      	beq.n	8004b0e <uart1_write+0x12>
 8004b1a:	687a      	ldr	r2, [r7, #4]
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	4413      	add	r3, r2
 8004b20:	781a      	ldrb	r2, [r3, #0]
 8004b22:	4b07      	ldr	r3, [pc, #28]	@ (8004b40 <uart1_write+0x44>)
 8004b24:	605a      	str	r2, [r3, #4]
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	3301      	adds	r3, #1
 8004b2a:	60fb      	str	r3, [r7, #12]
 8004b2c:	68fa      	ldr	r2, [r7, #12]
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	429a      	cmp	r2, r3
 8004b32:	d3eb      	bcc.n	8004b0c <uart1_write+0x10>
}
 8004b34:	bf00      	nop
 8004b36:	bf00      	nop
 8004b38:	3714      	adds	r7, #20
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bc80      	pop	{r7}
 8004b3e:	4770      	bx	lr
 8004b40:	40013800 	.word	0x40013800

08004b44 <uart1_read_byte>:
void uart1_write_str(const char *s) { while (*s) { while(!(USART1->SR & USART_SR_TXE)){} USART1->DR = *s++; } }

int uart1_read_byte(uint8_t *out, uint32_t timeout_ms) {
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b084      	sub	sp, #16
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
 8004b4c:	6039      	str	r1, [r7, #0]
    const TickType_t t0 = xTaskGetTickCount();
 8004b4e:	f001 f9fb 	bl	8005f48 <xTaskGetTickCount>
 8004b52:	60f8      	str	r0, [r7, #12]
    const TickType_t to = pdMS_TO_TICKS(timeout_ms);
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004b5a:	fb02 f303 	mul.w	r3, r2, r3
 8004b5e:	4a10      	ldr	r2, [pc, #64]	@ (8004ba0 <uart1_read_byte+0x5c>)
 8004b60:	fba2 2303 	umull	r2, r3, r2, r3
 8004b64:	099b      	lsrs	r3, r3, #6
 8004b66:	60bb      	str	r3, [r7, #8]
    for (;;) {
        if (rb_pop(out)) return 0;
 8004b68:	6878      	ldr	r0, [r7, #4]
 8004b6a:	f7ff fe95 	bl	8004898 <rb_pop>
 8004b6e:	4603      	mov	r3, r0
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d001      	beq.n	8004b78 <uart1_read_byte+0x34>
 8004b74:	2300      	movs	r3, #0
 8004b76:	e00e      	b.n	8004b96 <uart1_read_byte+0x52>
        if ((xTaskGetTickCount() - t0) >= to) return -1;
 8004b78:	f001 f9e6 	bl	8005f48 <xTaskGetTickCount>
 8004b7c:	4602      	mov	r2, r0
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	1ad3      	subs	r3, r2, r3
 8004b82:	68ba      	ldr	r2, [r7, #8]
 8004b84:	429a      	cmp	r2, r3
 8004b86:	d802      	bhi.n	8004b8e <uart1_read_byte+0x4a>
 8004b88:	f04f 33ff 	mov.w	r3, #4294967295
 8004b8c:	e003      	b.n	8004b96 <uart1_read_byte+0x52>
        vTaskDelay(pdMS_TO_TICKS(1));
 8004b8e:	2001      	movs	r0, #1
 8004b90:	f001 f88e 	bl	8005cb0 <vTaskDelay>
        if (rb_pop(out)) return 0;
 8004b94:	e7e8      	b.n	8004b68 <uart1_read_byte+0x24>
    }
}
 8004b96:	4618      	mov	r0, r3
 8004b98:	3710      	adds	r7, #16
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bd80      	pop	{r7, pc}
 8004b9e:	bf00      	nop
 8004ba0:	10624dd3 	.word	0x10624dd3

08004ba4 <uart3_write_byte>:

static void uart3_write_byte(uint8_t b) { while (!(USART3->SR & USART_SR_TXE)) {} USART3->DR = b; }
 8004ba4:	b480      	push	{r7}
 8004ba6:	b083      	sub	sp, #12
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	4603      	mov	r3, r0
 8004bac:	71fb      	strb	r3, [r7, #7]
 8004bae:	bf00      	nop
 8004bb0:	4b06      	ldr	r3, [pc, #24]	@ (8004bcc <uart3_write_byte+0x28>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d0f9      	beq.n	8004bb0 <uart3_write_byte+0xc>
 8004bbc:	4a03      	ldr	r2, [pc, #12]	@ (8004bcc <uart3_write_byte+0x28>)
 8004bbe:	79fb      	ldrb	r3, [r7, #7]
 8004bc0:	6053      	str	r3, [r2, #4]
 8004bc2:	bf00      	nop
 8004bc4:	370c      	adds	r7, #12
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bc80      	pop	{r7}
 8004bca:	4770      	bx	lr
 8004bcc:	40004800 	.word	0x40004800

08004bd0 <uart3_write_str>:
void uart3_write_str(const char *s) { while (*s) uart3_write_byte((uint8_t)*s++); }
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b082      	sub	sp, #8
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
 8004bd8:	e006      	b.n	8004be8 <uart3_write_str+0x18>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	1c5a      	adds	r2, r3, #1
 8004bde:	607a      	str	r2, [r7, #4]
 8004be0:	781b      	ldrb	r3, [r3, #0]
 8004be2:	4618      	mov	r0, r3
 8004be4:	f7ff ffde 	bl	8004ba4 <uart3_write_byte>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	781b      	ldrb	r3, [r3, #0]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d1f4      	bne.n	8004bda <uart3_write_str+0xa>
 8004bf0:	bf00      	nop
 8004bf2:	bf00      	nop
 8004bf4:	3708      	adds	r7, #8
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bd80      	pop	{r7, pc}

08004bfa <log_printf>:

void log_printf(const char *fmt, ...) {
 8004bfa:	b40f      	push	{r0, r1, r2, r3}
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b0aa      	sub	sp, #168	@ 0xa8
 8004c00:	af00      	add	r7, sp, #0
    char buf[160];
    va_list ap; va_start(ap, fmt);
 8004c02:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8004c06:	603b      	str	r3, [r7, #0]
    int n = vsnprintf(buf, sizeof(buf), fmt, ap);
 8004c08:	1d38      	adds	r0, r7, #4
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004c10:	21a0      	movs	r1, #160	@ 0xa0
 8004c12:	f002 f987 	bl	8006f24 <vsniprintf>
 8004c16:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
    va_end(ap);
    if (n > 0) uart3_write_str(buf);
 8004c1a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	dd03      	ble.n	8004c2a <log_printf+0x30>
 8004c22:	1d3b      	adds	r3, r7, #4
 8004c24:	4618      	mov	r0, r3
 8004c26:	f7ff ffd3 	bl	8004bd0 <uart3_write_str>
}
 8004c2a:	bf00      	nop
 8004c2c:	37a8      	adds	r7, #168	@ 0xa8
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004c34:	b004      	add	sp, #16
 8004c36:	4770      	bx	lr

08004c38 <main>:
#include "app_system.h"
#include "app_uart.h"
#include "app_tasks.h"
#include "app_proto.h"

int main(void) {
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b082      	sub	sp, #8
 8004c3c:	af02      	add	r7, sp, #8
    System_Init();      // clock 72MHz, bus prescalers
 8004c3e:	f7ff fd3b 	bl	80046b8 <System_Init>
    relocate_vtor();    // VTOR -> APP_BASE (cực kỳ quan trọng)
 8004c42:	f7ff fd5d 	bl	8004700 <relocate_vtor>
    uart_init();        // USART1/3 + IRQ + ring buffer
 8004c46:	f7ff ff17 	bl	8004a78 <uart_init>

    // (Tuỳ chọn) khởi tạo tài nguyên dùng chung cho tasks
    app_tasks_preinit(); // tạo queue, biến dùng chung nếu cần
 8004c4a:	f7ff fd6d 	bl	8004728 <app_tasks_preinit>

    // Tạo tasks
    xTaskCreate(blink_task,    "blink",   128, NULL, tskIDLE_PRIORITY + 1, NULL);
 8004c4e:	2300      	movs	r3, #0
 8004c50:	9301      	str	r3, [sp, #4]
 8004c52:	2301      	movs	r3, #1
 8004c54:	9300      	str	r3, [sp, #0]
 8004c56:	2300      	movs	r3, #0
 8004c58:	2280      	movs	r2, #128	@ 0x80
 8004c5a:	4919      	ldr	r1, [pc, #100]	@ (8004cc0 <main+0x88>)
 8004c5c:	4819      	ldr	r0, [pc, #100]	@ (8004cc4 <main+0x8c>)
 8004c5e:	f000 fed7 	bl	8005a10 <xTaskCreate>
    xTaskCreate(logger_task,   "logger",  256, NULL, tskIDLE_PRIORITY + 1, NULL);
 8004c62:	2300      	movs	r3, #0
 8004c64:	9301      	str	r3, [sp, #4]
 8004c66:	2301      	movs	r3, #1
 8004c68:	9300      	str	r3, [sp, #0]
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004c70:	4915      	ldr	r1, [pc, #84]	@ (8004cc8 <main+0x90>)
 8004c72:	4816      	ldr	r0, [pc, #88]	@ (8004ccc <main+0x94>)
 8004c74:	f000 fecc 	bl	8005a10 <xTaskCreate>
    xTaskCreate(uart_cmd_task, "uartcmd", 256, NULL, tskIDLE_PRIORITY + 2, NULL);
 8004c78:	2300      	movs	r3, #0
 8004c7a:	9301      	str	r3, [sp, #4]
 8004c7c:	2302      	movs	r3, #2
 8004c7e:	9300      	str	r3, [sp, #0]
 8004c80:	2300      	movs	r3, #0
 8004c82:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004c86:	4912      	ldr	r1, [pc, #72]	@ (8004cd0 <main+0x98>)
 8004c88:	4812      	ldr	r0, [pc, #72]	@ (8004cd4 <main+0x9c>)
 8004c8a:	f000 fec1 	bl	8005a10 <xTaskCreate>
    xTaskCreate(producer_task, "prod",    128, NULL, tskIDLE_PRIORITY + 1, NULL);
 8004c8e:	2300      	movs	r3, #0
 8004c90:	9301      	str	r3, [sp, #4]
 8004c92:	2301      	movs	r3, #1
 8004c94:	9300      	str	r3, [sp, #0]
 8004c96:	2300      	movs	r3, #0
 8004c98:	2280      	movs	r2, #128	@ 0x80
 8004c9a:	490f      	ldr	r1, [pc, #60]	@ (8004cd8 <main+0xa0>)
 8004c9c:	480f      	ldr	r0, [pc, #60]	@ (8004cdc <main+0xa4>)
 8004c9e:	f000 feb7 	bl	8005a10 <xTaskCreate>
    xTaskCreate(consumer_task, "cons",    128, NULL, tskIDLE_PRIORITY + 1, NULL);
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	9301      	str	r3, [sp, #4]
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	9300      	str	r3, [sp, #0]
 8004caa:	2300      	movs	r3, #0
 8004cac:	2280      	movs	r2, #128	@ 0x80
 8004cae:	490c      	ldr	r1, [pc, #48]	@ (8004ce0 <main+0xa8>)
 8004cb0:	480c      	ldr	r0, [pc, #48]	@ (8004ce4 <main+0xac>)
 8004cb2:	f000 fead 	bl	8005a10 <xTaskCreate>

    vTaskStartScheduler();
 8004cb6:	f001 f831 	bl	8005d1c <vTaskStartScheduler>

    // Nếu tới đây: thiếu heap hoặc config chưa đúng
    for(;;) {}
 8004cba:	bf00      	nop
 8004cbc:	e7fd      	b.n	8004cba <main+0x82>
 8004cbe:	bf00      	nop
 8004cc0:	080079ac 	.word	0x080079ac
 8004cc4:	08004745 	.word	0x08004745
 8004cc8:	080079b4 	.word	0x080079b4
 8004ccc:	08004769 	.word	0x08004769
 8004cd0:	080079bc 	.word	0x080079bc
 8004cd4:	08004399 	.word	0x08004399
 8004cd8:	080079c4 	.word	0x080079c4
 8004cdc:	08004799 	.word	0x08004799
 8004ce0:	080079cc 	.word	0x080079cc
 8004ce4:	080047d1 	.word	0x080047d1

08004ce8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b085      	sub	sp, #20
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	60f8      	str	r0, [r7, #12]
 8004cf0:	60b9      	str	r1, [r7, #8]
 8004cf2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	4a06      	ldr	r2, [pc, #24]	@ (8004d10 <vApplicationGetIdleTaskMemory+0x28>)
 8004cf8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8004cfa:	68bb      	ldr	r3, [r7, #8]
 8004cfc:	4a05      	ldr	r2, [pc, #20]	@ (8004d14 <vApplicationGetIdleTaskMemory+0x2c>)
 8004cfe:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2280      	movs	r2, #128	@ 0x80
 8004d04:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8004d06:	bf00      	nop
 8004d08:	3714      	adds	r7, #20
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bc80      	pop	{r7}
 8004d0e:	4770      	bx	lr
 8004d10:	2000017c 	.word	0x2000017c
 8004d14:	2000021c 	.word	0x2000021c

08004d18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004d18:	b480      	push	{r7}
 8004d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004d1c:	bf00      	nop
 8004d1e:	e7fd      	b.n	8004d1c <NMI_Handler+0x4>

08004d20 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004d20:	b480      	push	{r7}
 8004d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004d24:	bf00      	nop
 8004d26:	e7fd      	b.n	8004d24 <HardFault_Handler+0x4>

08004d28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004d28:	b480      	push	{r7}
 8004d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004d2c:	bf00      	nop
 8004d2e:	e7fd      	b.n	8004d2c <MemManage_Handler+0x4>

08004d30 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004d30:	b480      	push	{r7}
 8004d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004d34:	bf00      	nop
 8004d36:	e7fd      	b.n	8004d34 <BusFault_Handler+0x4>

08004d38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004d38:	b480      	push	{r7}
 8004d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004d3c:	bf00      	nop
 8004d3e:	e7fd      	b.n	8004d3c <UsageFault_Handler+0x4>

08004d40 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004d40:	b480      	push	{r7}
 8004d42:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004d44:	bf00      	nop
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bc80      	pop	{r7}
 8004d4a:	4770      	bx	lr

08004d4c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8004d50:	4802      	ldr	r0, [pc, #8]	@ (8004d5c <TIM4_IRQHandler+0x10>)
 8004d52:	f000 f866 	bl	8004e22 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8004d56:	bf00      	nop
 8004d58:	bd80      	pop	{r7, pc}
 8004d5a:	bf00      	nop
 8004d5c:	2000041c 	.word	0x2000041c

08004d60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b086      	sub	sp, #24
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004d68:	4a14      	ldr	r2, [pc, #80]	@ (8004dbc <_sbrk+0x5c>)
 8004d6a:	4b15      	ldr	r3, [pc, #84]	@ (8004dc0 <_sbrk+0x60>)
 8004d6c:	1ad3      	subs	r3, r2, r3
 8004d6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004d70:	697b      	ldr	r3, [r7, #20]
 8004d72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004d74:	4b13      	ldr	r3, [pc, #76]	@ (8004dc4 <_sbrk+0x64>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d102      	bne.n	8004d82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004d7c:	4b11      	ldr	r3, [pc, #68]	@ (8004dc4 <_sbrk+0x64>)
 8004d7e:	4a12      	ldr	r2, [pc, #72]	@ (8004dc8 <_sbrk+0x68>)
 8004d80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004d82:	4b10      	ldr	r3, [pc, #64]	@ (8004dc4 <_sbrk+0x64>)
 8004d84:	681a      	ldr	r2, [r3, #0]
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	4413      	add	r3, r2
 8004d8a:	693a      	ldr	r2, [r7, #16]
 8004d8c:	429a      	cmp	r2, r3
 8004d8e:	d207      	bcs.n	8004da0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004d90:	f002 f93c 	bl	800700c <__errno>
 8004d94:	4603      	mov	r3, r0
 8004d96:	220c      	movs	r2, #12
 8004d98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004d9a:	f04f 33ff 	mov.w	r3, #4294967295
 8004d9e:	e009      	b.n	8004db4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004da0:	4b08      	ldr	r3, [pc, #32]	@ (8004dc4 <_sbrk+0x64>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004da6:	4b07      	ldr	r3, [pc, #28]	@ (8004dc4 <_sbrk+0x64>)
 8004da8:	681a      	ldr	r2, [r3, #0]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	4413      	add	r3, r2
 8004dae:	4a05      	ldr	r2, [pc, #20]	@ (8004dc4 <_sbrk+0x64>)
 8004db0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004db2:	68fb      	ldr	r3, [r7, #12]
}
 8004db4:	4618      	mov	r0, r3
 8004db6:	3718      	adds	r7, #24
 8004db8:	46bd      	mov	sp, r7
 8004dba:	bd80      	pop	{r7, pc}
 8004dbc:	20005000 	.word	0x20005000
 8004dc0:	00000400 	.word	0x00000400
 8004dc4:	20000464 	.word	0x20000464
 8004dc8:	20002f08 	.word	0x20002f08

08004dcc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004dd0:	bf00      	nop
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bc80      	pop	{r7}
 8004dd6:	4770      	bx	lr

08004dd8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004dd8:	f7ff fff8 	bl	8004dcc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004ddc:	480b      	ldr	r0, [pc, #44]	@ (8004e0c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8004dde:	490c      	ldr	r1, [pc, #48]	@ (8004e10 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8004de0:	4a0c      	ldr	r2, [pc, #48]	@ (8004e14 <LoopFillZerobss+0x16>)
  movs r3, #0
 8004de2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004de4:	e002      	b.n	8004dec <LoopCopyDataInit>

08004de6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004de6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004de8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004dea:	3304      	adds	r3, #4

08004dec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004dec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004dee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004df0:	d3f9      	bcc.n	8004de6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004df2:	4a09      	ldr	r2, [pc, #36]	@ (8004e18 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8004df4:	4c09      	ldr	r4, [pc, #36]	@ (8004e1c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004df6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004df8:	e001      	b.n	8004dfe <LoopFillZerobss>

08004dfa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004dfa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004dfc:	3204      	adds	r2, #4

08004dfe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004dfe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004e00:	d3fb      	bcc.n	8004dfa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004e02:	f002 f909 	bl	8007018 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004e06:	f7ff ff17 	bl	8004c38 <main>
  bx lr
 8004e0a:	4770      	bx	lr
  ldr r0, =_sdata
 8004e0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004e10:	20000058 	.word	0x20000058
  ldr r2, =_sidata
 8004e14:	08007a14 	.word	0x08007a14
  ldr r2, =_sbss
 8004e18:	20000058 	.word	0x20000058
  ldr r4, =_ebss
 8004e1c:	20002f04 	.word	0x20002f04

08004e20 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004e20:	e7fe      	b.n	8004e20 <ADC1_2_IRQHandler>

08004e22 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004e22:	b580      	push	{r7, lr}
 8004e24:	b084      	sub	sp, #16
 8004e26:	af00      	add	r7, sp, #0
 8004e28:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	68db      	ldr	r3, [r3, #12]
 8004e30:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	691b      	ldr	r3, [r3, #16]
 8004e38:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	f003 0302 	and.w	r3, r3, #2
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d020      	beq.n	8004e86 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	f003 0302 	and.w	r3, r3, #2
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d01b      	beq.n	8004e86 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f06f 0202 	mvn.w	r2, #2
 8004e56:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	699b      	ldr	r3, [r3, #24]
 8004e64:	f003 0303 	and.w	r3, r3, #3
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d003      	beq.n	8004e74 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004e6c:	6878      	ldr	r0, [r7, #4]
 8004e6e:	f000 f8da 	bl	8005026 <HAL_TIM_IC_CaptureCallback>
 8004e72:	e005      	b.n	8004e80 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e74:	6878      	ldr	r0, [r7, #4]
 8004e76:	f000 f8cd 	bl	8005014 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e7a:	6878      	ldr	r0, [r7, #4]
 8004e7c:	f000 f8dc 	bl	8005038 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2200      	movs	r2, #0
 8004e84:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004e86:	68bb      	ldr	r3, [r7, #8]
 8004e88:	f003 0304 	and.w	r3, r3, #4
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d020      	beq.n	8004ed2 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	f003 0304 	and.w	r3, r3, #4
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d01b      	beq.n	8004ed2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f06f 0204 	mvn.w	r2, #4
 8004ea2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2202      	movs	r2, #2
 8004ea8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	699b      	ldr	r3, [r3, #24]
 8004eb0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d003      	beq.n	8004ec0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004eb8:	6878      	ldr	r0, [r7, #4]
 8004eba:	f000 f8b4 	bl	8005026 <HAL_TIM_IC_CaptureCallback>
 8004ebe:	e005      	b.n	8004ecc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ec0:	6878      	ldr	r0, [r7, #4]
 8004ec2:	f000 f8a7 	bl	8005014 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ec6:	6878      	ldr	r0, [r7, #4]
 8004ec8:	f000 f8b6 	bl	8005038 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	f003 0308 	and.w	r3, r3, #8
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d020      	beq.n	8004f1e <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	f003 0308 	and.w	r3, r3, #8
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d01b      	beq.n	8004f1e <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f06f 0208 	mvn.w	r2, #8
 8004eee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2204      	movs	r2, #4
 8004ef4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	69db      	ldr	r3, [r3, #28]
 8004efc:	f003 0303 	and.w	r3, r3, #3
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d003      	beq.n	8004f0c <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f04:	6878      	ldr	r0, [r7, #4]
 8004f06:	f000 f88e 	bl	8005026 <HAL_TIM_IC_CaptureCallback>
 8004f0a:	e005      	b.n	8004f18 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f0c:	6878      	ldr	r0, [r7, #4]
 8004f0e:	f000 f881 	bl	8005014 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f12:	6878      	ldr	r0, [r7, #4]
 8004f14:	f000 f890 	bl	8005038 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	f003 0310 	and.w	r3, r3, #16
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d020      	beq.n	8004f6a <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	f003 0310 	and.w	r3, r3, #16
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d01b      	beq.n	8004f6a <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f06f 0210 	mvn.w	r2, #16
 8004f3a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2208      	movs	r2, #8
 8004f40:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	69db      	ldr	r3, [r3, #28]
 8004f48:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d003      	beq.n	8004f58 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f50:	6878      	ldr	r0, [r7, #4]
 8004f52:	f000 f868 	bl	8005026 <HAL_TIM_IC_CaptureCallback>
 8004f56:	e005      	b.n	8004f64 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f58:	6878      	ldr	r0, [r7, #4]
 8004f5a:	f000 f85b 	bl	8005014 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f5e:	6878      	ldr	r0, [r7, #4]
 8004f60:	f000 f86a 	bl	8005038 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2200      	movs	r2, #0
 8004f68:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	f003 0301 	and.w	r3, r3, #1
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d00c      	beq.n	8004f8e <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	f003 0301 	and.w	r3, r3, #1
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d007      	beq.n	8004f8e <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f06f 0201 	mvn.w	r2, #1
 8004f86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004f88:	6878      	ldr	r0, [r7, #4]
 8004f8a:	f000 f83a 	bl	8005002 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004f8e:	68bb      	ldr	r3, [r7, #8]
 8004f90:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d00c      	beq.n	8004fb2 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d007      	beq.n	8004fb2 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004faa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004fac:	6878      	ldr	r0, [r7, #4]
 8004fae:	f000 f85e 	bl	800506e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004fb2:	68bb      	ldr	r3, [r7, #8]
 8004fb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d00c      	beq.n	8004fd6 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d007      	beq.n	8004fd6 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004fce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004fd0:	6878      	ldr	r0, [r7, #4]
 8004fd2:	f000 f83a 	bl	800504a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004fd6:	68bb      	ldr	r3, [r7, #8]
 8004fd8:	f003 0320 	and.w	r3, r3, #32
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d00c      	beq.n	8004ffa <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	f003 0320 	and.w	r3, r3, #32
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d007      	beq.n	8004ffa <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f06f 0220 	mvn.w	r2, #32
 8004ff2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004ff4:	6878      	ldr	r0, [r7, #4]
 8004ff6:	f000 f831 	bl	800505c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004ffa:	bf00      	nop
 8004ffc:	3710      	adds	r7, #16
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bd80      	pop	{r7, pc}

08005002 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005002:	b480      	push	{r7}
 8005004:	b083      	sub	sp, #12
 8005006:	af00      	add	r7, sp, #0
 8005008:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800500a:	bf00      	nop
 800500c:	370c      	adds	r7, #12
 800500e:	46bd      	mov	sp, r7
 8005010:	bc80      	pop	{r7}
 8005012:	4770      	bx	lr

08005014 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005014:	b480      	push	{r7}
 8005016:	b083      	sub	sp, #12
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800501c:	bf00      	nop
 800501e:	370c      	adds	r7, #12
 8005020:	46bd      	mov	sp, r7
 8005022:	bc80      	pop	{r7}
 8005024:	4770      	bx	lr

08005026 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005026:	b480      	push	{r7}
 8005028:	b083      	sub	sp, #12
 800502a:	af00      	add	r7, sp, #0
 800502c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800502e:	bf00      	nop
 8005030:	370c      	adds	r7, #12
 8005032:	46bd      	mov	sp, r7
 8005034:	bc80      	pop	{r7}
 8005036:	4770      	bx	lr

08005038 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005038:	b480      	push	{r7}
 800503a:	b083      	sub	sp, #12
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005040:	bf00      	nop
 8005042:	370c      	adds	r7, #12
 8005044:	46bd      	mov	sp, r7
 8005046:	bc80      	pop	{r7}
 8005048:	4770      	bx	lr

0800504a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800504a:	b480      	push	{r7}
 800504c:	b083      	sub	sp, #12
 800504e:	af00      	add	r7, sp, #0
 8005050:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005052:	bf00      	nop
 8005054:	370c      	adds	r7, #12
 8005056:	46bd      	mov	sp, r7
 8005058:	bc80      	pop	{r7}
 800505a:	4770      	bx	lr

0800505c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800505c:	b480      	push	{r7}
 800505e:	b083      	sub	sp, #12
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005064:	bf00      	nop
 8005066:	370c      	adds	r7, #12
 8005068:	46bd      	mov	sp, r7
 800506a:	bc80      	pop	{r7}
 800506c:	4770      	bx	lr

0800506e <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800506e:	b480      	push	{r7}
 8005070:	b083      	sub	sp, #12
 8005072:	af00      	add	r7, sp, #0
 8005074:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005076:	bf00      	nop
 8005078:	370c      	adds	r7, #12
 800507a:	46bd      	mov	sp, r7
 800507c:	bc80      	pop	{r7}
 800507e:	4770      	bx	lr

08005080 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005080:	b480      	push	{r7}
 8005082:	b083      	sub	sp, #12
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	f103 0208 	add.w	r2, r3, #8
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	f04f 32ff 	mov.w	r2, #4294967295
 8005098:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	f103 0208 	add.w	r2, r3, #8
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	f103 0208 	add.w	r2, r3, #8
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2200      	movs	r2, #0
 80050b2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80050b4:	bf00      	nop
 80050b6:	370c      	adds	r7, #12
 80050b8:	46bd      	mov	sp, r7
 80050ba:	bc80      	pop	{r7}
 80050bc:	4770      	bx	lr

080050be <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80050be:	b480      	push	{r7}
 80050c0:	b083      	sub	sp, #12
 80050c2:	af00      	add	r7, sp, #0
 80050c4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2200      	movs	r2, #0
 80050ca:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80050cc:	bf00      	nop
 80050ce:	370c      	adds	r7, #12
 80050d0:	46bd      	mov	sp, r7
 80050d2:	bc80      	pop	{r7}
 80050d4:	4770      	bx	lr

080050d6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80050d6:	b480      	push	{r7}
 80050d8:	b085      	sub	sp, #20
 80050da:	af00      	add	r7, sp, #0
 80050dc:	6078      	str	r0, [r7, #4]
 80050de:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	68fa      	ldr	r2, [r7, #12]
 80050ea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	689a      	ldr	r2, [r3, #8]
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	689b      	ldr	r3, [r3, #8]
 80050f8:	683a      	ldr	r2, [r7, #0]
 80050fa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	683a      	ldr	r2, [r7, #0]
 8005100:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	687a      	ldr	r2, [r7, #4]
 8005106:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	1c5a      	adds	r2, r3, #1
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	601a      	str	r2, [r3, #0]
}
 8005112:	bf00      	nop
 8005114:	3714      	adds	r7, #20
 8005116:	46bd      	mov	sp, r7
 8005118:	bc80      	pop	{r7}
 800511a:	4770      	bx	lr

0800511c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800511c:	b480      	push	{r7}
 800511e:	b085      	sub	sp, #20
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
 8005124:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005132:	d103      	bne.n	800513c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	691b      	ldr	r3, [r3, #16]
 8005138:	60fb      	str	r3, [r7, #12]
 800513a:	e00c      	b.n	8005156 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	3308      	adds	r3, #8
 8005140:	60fb      	str	r3, [r7, #12]
 8005142:	e002      	b.n	800514a <vListInsert+0x2e>
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	685b      	ldr	r3, [r3, #4]
 8005148:	60fb      	str	r3, [r7, #12]
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	68ba      	ldr	r2, [r7, #8]
 8005152:	429a      	cmp	r2, r3
 8005154:	d2f6      	bcs.n	8005144 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	685a      	ldr	r2, [r3, #4]
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	685b      	ldr	r3, [r3, #4]
 8005162:	683a      	ldr	r2, [r7, #0]
 8005164:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	68fa      	ldr	r2, [r7, #12]
 800516a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	683a      	ldr	r2, [r7, #0]
 8005170:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	687a      	ldr	r2, [r7, #4]
 8005176:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	1c5a      	adds	r2, r3, #1
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	601a      	str	r2, [r3, #0]
}
 8005182:	bf00      	nop
 8005184:	3714      	adds	r7, #20
 8005186:	46bd      	mov	sp, r7
 8005188:	bc80      	pop	{r7}
 800518a:	4770      	bx	lr

0800518c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800518c:	b480      	push	{r7}
 800518e:	b085      	sub	sp, #20
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	691b      	ldr	r3, [r3, #16]
 8005198:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	685b      	ldr	r3, [r3, #4]
 800519e:	687a      	ldr	r2, [r7, #4]
 80051a0:	6892      	ldr	r2, [r2, #8]
 80051a2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	689b      	ldr	r3, [r3, #8]
 80051a8:	687a      	ldr	r2, [r7, #4]
 80051aa:	6852      	ldr	r2, [r2, #4]
 80051ac:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	687a      	ldr	r2, [r7, #4]
 80051b4:	429a      	cmp	r2, r3
 80051b6:	d103      	bne.n	80051c0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	689a      	ldr	r2, [r3, #8]
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2200      	movs	r2, #0
 80051c4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	1e5a      	subs	r2, r3, #1
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
}
 80051d4:	4618      	mov	r0, r3
 80051d6:	3714      	adds	r7, #20
 80051d8:	46bd      	mov	sp, r7
 80051da:	bc80      	pop	{r7}
 80051dc:	4770      	bx	lr
	...

080051e0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b084      	sub	sp, #16
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
 80051e8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d10b      	bne.n	800520c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80051f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051f8:	f383 8811 	msr	BASEPRI, r3
 80051fc:	f3bf 8f6f 	isb	sy
 8005200:	f3bf 8f4f 	dsb	sy
 8005204:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005206:	bf00      	nop
 8005208:	bf00      	nop
 800520a:	e7fd      	b.n	8005208 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800520c:	f001 fbae 	bl	800696c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681a      	ldr	r2, [r3, #0]
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005218:	68f9      	ldr	r1, [r7, #12]
 800521a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800521c:	fb01 f303 	mul.w	r3, r1, r3
 8005220:	441a      	add	r2, r3
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	2200      	movs	r2, #0
 800522a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681a      	ldr	r2, [r3, #0]
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681a      	ldr	r2, [r3, #0]
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800523c:	3b01      	subs	r3, #1
 800523e:	68f9      	ldr	r1, [r7, #12]
 8005240:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005242:	fb01 f303 	mul.w	r3, r1, r3
 8005246:	441a      	add	r2, r3
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	22ff      	movs	r2, #255	@ 0xff
 8005250:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	22ff      	movs	r2, #255	@ 0xff
 8005258:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d114      	bne.n	800528c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	691b      	ldr	r3, [r3, #16]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d01a      	beq.n	80052a0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	3310      	adds	r3, #16
 800526e:	4618      	mov	r0, r3
 8005270:	f000 ffba 	bl	80061e8 <xTaskRemoveFromEventList>
 8005274:	4603      	mov	r3, r0
 8005276:	2b00      	cmp	r3, #0
 8005278:	d012      	beq.n	80052a0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800527a:	4b0d      	ldr	r3, [pc, #52]	@ (80052b0 <xQueueGenericReset+0xd0>)
 800527c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005280:	601a      	str	r2, [r3, #0]
 8005282:	f3bf 8f4f 	dsb	sy
 8005286:	f3bf 8f6f 	isb	sy
 800528a:	e009      	b.n	80052a0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	3310      	adds	r3, #16
 8005290:	4618      	mov	r0, r3
 8005292:	f7ff fef5 	bl	8005080 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	3324      	adds	r3, #36	@ 0x24
 800529a:	4618      	mov	r0, r3
 800529c:	f7ff fef0 	bl	8005080 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80052a0:	f001 fb94 	bl	80069cc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80052a4:	2301      	movs	r3, #1
}
 80052a6:	4618      	mov	r0, r3
 80052a8:	3710      	adds	r7, #16
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bd80      	pop	{r7, pc}
 80052ae:	bf00      	nop
 80052b0:	e000ed04 	.word	0xe000ed04

080052b4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b08a      	sub	sp, #40	@ 0x28
 80052b8:	af02      	add	r7, sp, #8
 80052ba:	60f8      	str	r0, [r7, #12]
 80052bc:	60b9      	str	r1, [r7, #8]
 80052be:	4613      	mov	r3, r2
 80052c0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d10b      	bne.n	80052e0 <xQueueGenericCreate+0x2c>
	__asm volatile
 80052c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052cc:	f383 8811 	msr	BASEPRI, r3
 80052d0:	f3bf 8f6f 	isb	sy
 80052d4:	f3bf 8f4f 	dsb	sy
 80052d8:	613b      	str	r3, [r7, #16]
}
 80052da:	bf00      	nop
 80052dc:	bf00      	nop
 80052de:	e7fd      	b.n	80052dc <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	68ba      	ldr	r2, [r7, #8]
 80052e4:	fb02 f303 	mul.w	r3, r2, r3
 80052e8:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80052ea:	69fb      	ldr	r3, [r7, #28]
 80052ec:	3348      	adds	r3, #72	@ 0x48
 80052ee:	4618      	mov	r0, r3
 80052f0:	f001 fbfe 	bl	8006af0 <pvPortMalloc>
 80052f4:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80052f6:	69bb      	ldr	r3, [r7, #24]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d011      	beq.n	8005320 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80052fc:	69bb      	ldr	r3, [r7, #24]
 80052fe:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005300:	697b      	ldr	r3, [r7, #20]
 8005302:	3348      	adds	r3, #72	@ 0x48
 8005304:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005306:	69bb      	ldr	r3, [r7, #24]
 8005308:	2200      	movs	r2, #0
 800530a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800530e:	79fa      	ldrb	r2, [r7, #7]
 8005310:	69bb      	ldr	r3, [r7, #24]
 8005312:	9300      	str	r3, [sp, #0]
 8005314:	4613      	mov	r3, r2
 8005316:	697a      	ldr	r2, [r7, #20]
 8005318:	68b9      	ldr	r1, [r7, #8]
 800531a:	68f8      	ldr	r0, [r7, #12]
 800531c:	f000 f805 	bl	800532a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005320:	69bb      	ldr	r3, [r7, #24]
	}
 8005322:	4618      	mov	r0, r3
 8005324:	3720      	adds	r7, #32
 8005326:	46bd      	mov	sp, r7
 8005328:	bd80      	pop	{r7, pc}

0800532a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800532a:	b580      	push	{r7, lr}
 800532c:	b084      	sub	sp, #16
 800532e:	af00      	add	r7, sp, #0
 8005330:	60f8      	str	r0, [r7, #12]
 8005332:	60b9      	str	r1, [r7, #8]
 8005334:	607a      	str	r2, [r7, #4]
 8005336:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d103      	bne.n	8005346 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800533e:	69bb      	ldr	r3, [r7, #24]
 8005340:	69ba      	ldr	r2, [r7, #24]
 8005342:	601a      	str	r2, [r3, #0]
 8005344:	e002      	b.n	800534c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005346:	69bb      	ldr	r3, [r7, #24]
 8005348:	687a      	ldr	r2, [r7, #4]
 800534a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800534c:	69bb      	ldr	r3, [r7, #24]
 800534e:	68fa      	ldr	r2, [r7, #12]
 8005350:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005352:	69bb      	ldr	r3, [r7, #24]
 8005354:	68ba      	ldr	r2, [r7, #8]
 8005356:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005358:	2101      	movs	r1, #1
 800535a:	69b8      	ldr	r0, [r7, #24]
 800535c:	f7ff ff40 	bl	80051e0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005360:	bf00      	nop
 8005362:	3710      	adds	r7, #16
 8005364:	46bd      	mov	sp, r7
 8005366:	bd80      	pop	{r7, pc}

08005368 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b08e      	sub	sp, #56	@ 0x38
 800536c:	af00      	add	r7, sp, #0
 800536e:	60f8      	str	r0, [r7, #12]
 8005370:	60b9      	str	r1, [r7, #8]
 8005372:	607a      	str	r2, [r7, #4]
 8005374:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005376:	2300      	movs	r3, #0
 8005378:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800537e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005380:	2b00      	cmp	r3, #0
 8005382:	d10b      	bne.n	800539c <xQueueGenericSend+0x34>
	__asm volatile
 8005384:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005388:	f383 8811 	msr	BASEPRI, r3
 800538c:	f3bf 8f6f 	isb	sy
 8005390:	f3bf 8f4f 	dsb	sy
 8005394:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005396:	bf00      	nop
 8005398:	bf00      	nop
 800539a:	e7fd      	b.n	8005398 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d103      	bne.n	80053aa <xQueueGenericSend+0x42>
 80053a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d101      	bne.n	80053ae <xQueueGenericSend+0x46>
 80053aa:	2301      	movs	r3, #1
 80053ac:	e000      	b.n	80053b0 <xQueueGenericSend+0x48>
 80053ae:	2300      	movs	r3, #0
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d10b      	bne.n	80053cc <xQueueGenericSend+0x64>
	__asm volatile
 80053b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053b8:	f383 8811 	msr	BASEPRI, r3
 80053bc:	f3bf 8f6f 	isb	sy
 80053c0:	f3bf 8f4f 	dsb	sy
 80053c4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80053c6:	bf00      	nop
 80053c8:	bf00      	nop
 80053ca:	e7fd      	b.n	80053c8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	2b02      	cmp	r3, #2
 80053d0:	d103      	bne.n	80053da <xQueueGenericSend+0x72>
 80053d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053d6:	2b01      	cmp	r3, #1
 80053d8:	d101      	bne.n	80053de <xQueueGenericSend+0x76>
 80053da:	2301      	movs	r3, #1
 80053dc:	e000      	b.n	80053e0 <xQueueGenericSend+0x78>
 80053de:	2300      	movs	r3, #0
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d10b      	bne.n	80053fc <xQueueGenericSend+0x94>
	__asm volatile
 80053e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053e8:	f383 8811 	msr	BASEPRI, r3
 80053ec:	f3bf 8f6f 	isb	sy
 80053f0:	f3bf 8f4f 	dsb	sy
 80053f4:	623b      	str	r3, [r7, #32]
}
 80053f6:	bf00      	nop
 80053f8:	bf00      	nop
 80053fa:	e7fd      	b.n	80053f8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80053fc:	f001 f8ba 	bl	8006574 <xTaskGetSchedulerState>
 8005400:	4603      	mov	r3, r0
 8005402:	2b00      	cmp	r3, #0
 8005404:	d102      	bne.n	800540c <xQueueGenericSend+0xa4>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d101      	bne.n	8005410 <xQueueGenericSend+0xa8>
 800540c:	2301      	movs	r3, #1
 800540e:	e000      	b.n	8005412 <xQueueGenericSend+0xaa>
 8005410:	2300      	movs	r3, #0
 8005412:	2b00      	cmp	r3, #0
 8005414:	d10b      	bne.n	800542e <xQueueGenericSend+0xc6>
	__asm volatile
 8005416:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800541a:	f383 8811 	msr	BASEPRI, r3
 800541e:	f3bf 8f6f 	isb	sy
 8005422:	f3bf 8f4f 	dsb	sy
 8005426:	61fb      	str	r3, [r7, #28]
}
 8005428:	bf00      	nop
 800542a:	bf00      	nop
 800542c:	e7fd      	b.n	800542a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800542e:	f001 fa9d 	bl	800696c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005432:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005434:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005436:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005438:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800543a:	429a      	cmp	r2, r3
 800543c:	d302      	bcc.n	8005444 <xQueueGenericSend+0xdc>
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	2b02      	cmp	r3, #2
 8005442:	d129      	bne.n	8005498 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005444:	683a      	ldr	r2, [r7, #0]
 8005446:	68b9      	ldr	r1, [r7, #8]
 8005448:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800544a:	f000 f971 	bl	8005730 <prvCopyDataToQueue>
 800544e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005450:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005452:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005454:	2b00      	cmp	r3, #0
 8005456:	d010      	beq.n	800547a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005458:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800545a:	3324      	adds	r3, #36	@ 0x24
 800545c:	4618      	mov	r0, r3
 800545e:	f000 fec3 	bl	80061e8 <xTaskRemoveFromEventList>
 8005462:	4603      	mov	r3, r0
 8005464:	2b00      	cmp	r3, #0
 8005466:	d013      	beq.n	8005490 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005468:	4b3f      	ldr	r3, [pc, #252]	@ (8005568 <xQueueGenericSend+0x200>)
 800546a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800546e:	601a      	str	r2, [r3, #0]
 8005470:	f3bf 8f4f 	dsb	sy
 8005474:	f3bf 8f6f 	isb	sy
 8005478:	e00a      	b.n	8005490 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800547a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800547c:	2b00      	cmp	r3, #0
 800547e:	d007      	beq.n	8005490 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005480:	4b39      	ldr	r3, [pc, #228]	@ (8005568 <xQueueGenericSend+0x200>)
 8005482:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005486:	601a      	str	r2, [r3, #0]
 8005488:	f3bf 8f4f 	dsb	sy
 800548c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005490:	f001 fa9c 	bl	80069cc <vPortExitCritical>
				return pdPASS;
 8005494:	2301      	movs	r3, #1
 8005496:	e063      	b.n	8005560 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d103      	bne.n	80054a6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800549e:	f001 fa95 	bl	80069cc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80054a2:	2300      	movs	r3, #0
 80054a4:	e05c      	b.n	8005560 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80054a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d106      	bne.n	80054ba <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80054ac:	f107 0314 	add.w	r3, r7, #20
 80054b0:	4618      	mov	r0, r3
 80054b2:	f000 fefd 	bl	80062b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80054b6:	2301      	movs	r3, #1
 80054b8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80054ba:	f001 fa87 	bl	80069cc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80054be:	f000 fc97 	bl	8005df0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80054c2:	f001 fa53 	bl	800696c <vPortEnterCritical>
 80054c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054c8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80054cc:	b25b      	sxtb	r3, r3
 80054ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054d2:	d103      	bne.n	80054dc <xQueueGenericSend+0x174>
 80054d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054d6:	2200      	movs	r2, #0
 80054d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80054dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054de:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80054e2:	b25b      	sxtb	r3, r3
 80054e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054e8:	d103      	bne.n	80054f2 <xQueueGenericSend+0x18a>
 80054ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054ec:	2200      	movs	r2, #0
 80054ee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80054f2:	f001 fa6b 	bl	80069cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80054f6:	1d3a      	adds	r2, r7, #4
 80054f8:	f107 0314 	add.w	r3, r7, #20
 80054fc:	4611      	mov	r1, r2
 80054fe:	4618      	mov	r0, r3
 8005500:	f000 feec 	bl	80062dc <xTaskCheckForTimeOut>
 8005504:	4603      	mov	r3, r0
 8005506:	2b00      	cmp	r3, #0
 8005508:	d124      	bne.n	8005554 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800550a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800550c:	f000 fa08 	bl	8005920 <prvIsQueueFull>
 8005510:	4603      	mov	r3, r0
 8005512:	2b00      	cmp	r3, #0
 8005514:	d018      	beq.n	8005548 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005516:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005518:	3310      	adds	r3, #16
 800551a:	687a      	ldr	r2, [r7, #4]
 800551c:	4611      	mov	r1, r2
 800551e:	4618      	mov	r0, r3
 8005520:	f000 fe3c 	bl	800619c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005524:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005526:	f000 f993 	bl	8005850 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800552a:	f000 fc6f 	bl	8005e0c <xTaskResumeAll>
 800552e:	4603      	mov	r3, r0
 8005530:	2b00      	cmp	r3, #0
 8005532:	f47f af7c 	bne.w	800542e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8005536:	4b0c      	ldr	r3, [pc, #48]	@ (8005568 <xQueueGenericSend+0x200>)
 8005538:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800553c:	601a      	str	r2, [r3, #0]
 800553e:	f3bf 8f4f 	dsb	sy
 8005542:	f3bf 8f6f 	isb	sy
 8005546:	e772      	b.n	800542e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005548:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800554a:	f000 f981 	bl	8005850 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800554e:	f000 fc5d 	bl	8005e0c <xTaskResumeAll>
 8005552:	e76c      	b.n	800542e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005554:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005556:	f000 f97b 	bl	8005850 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800555a:	f000 fc57 	bl	8005e0c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800555e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005560:	4618      	mov	r0, r3
 8005562:	3738      	adds	r7, #56	@ 0x38
 8005564:	46bd      	mov	sp, r7
 8005566:	bd80      	pop	{r7, pc}
 8005568:	e000ed04 	.word	0xe000ed04

0800556c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b08c      	sub	sp, #48	@ 0x30
 8005570:	af00      	add	r7, sp, #0
 8005572:	60f8      	str	r0, [r7, #12]
 8005574:	60b9      	str	r1, [r7, #8]
 8005576:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005578:	2300      	movs	r3, #0
 800557a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005580:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005582:	2b00      	cmp	r3, #0
 8005584:	d10b      	bne.n	800559e <xQueueReceive+0x32>
	__asm volatile
 8005586:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800558a:	f383 8811 	msr	BASEPRI, r3
 800558e:	f3bf 8f6f 	isb	sy
 8005592:	f3bf 8f4f 	dsb	sy
 8005596:	623b      	str	r3, [r7, #32]
}
 8005598:	bf00      	nop
 800559a:	bf00      	nop
 800559c:	e7fd      	b.n	800559a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800559e:	68bb      	ldr	r3, [r7, #8]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d103      	bne.n	80055ac <xQueueReceive+0x40>
 80055a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d101      	bne.n	80055b0 <xQueueReceive+0x44>
 80055ac:	2301      	movs	r3, #1
 80055ae:	e000      	b.n	80055b2 <xQueueReceive+0x46>
 80055b0:	2300      	movs	r3, #0
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d10b      	bne.n	80055ce <xQueueReceive+0x62>
	__asm volatile
 80055b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055ba:	f383 8811 	msr	BASEPRI, r3
 80055be:	f3bf 8f6f 	isb	sy
 80055c2:	f3bf 8f4f 	dsb	sy
 80055c6:	61fb      	str	r3, [r7, #28]
}
 80055c8:	bf00      	nop
 80055ca:	bf00      	nop
 80055cc:	e7fd      	b.n	80055ca <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80055ce:	f000 ffd1 	bl	8006574 <xTaskGetSchedulerState>
 80055d2:	4603      	mov	r3, r0
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d102      	bne.n	80055de <xQueueReceive+0x72>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d101      	bne.n	80055e2 <xQueueReceive+0x76>
 80055de:	2301      	movs	r3, #1
 80055e0:	e000      	b.n	80055e4 <xQueueReceive+0x78>
 80055e2:	2300      	movs	r3, #0
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d10b      	bne.n	8005600 <xQueueReceive+0x94>
	__asm volatile
 80055e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055ec:	f383 8811 	msr	BASEPRI, r3
 80055f0:	f3bf 8f6f 	isb	sy
 80055f4:	f3bf 8f4f 	dsb	sy
 80055f8:	61bb      	str	r3, [r7, #24]
}
 80055fa:	bf00      	nop
 80055fc:	bf00      	nop
 80055fe:	e7fd      	b.n	80055fc <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005600:	f001 f9b4 	bl	800696c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005604:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005606:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005608:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800560a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800560c:	2b00      	cmp	r3, #0
 800560e:	d01f      	beq.n	8005650 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005610:	68b9      	ldr	r1, [r7, #8]
 8005612:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005614:	f000 f8f6 	bl	8005804 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800561a:	1e5a      	subs	r2, r3, #1
 800561c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800561e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005620:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005622:	691b      	ldr	r3, [r3, #16]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d00f      	beq.n	8005648 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005628:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800562a:	3310      	adds	r3, #16
 800562c:	4618      	mov	r0, r3
 800562e:	f000 fddb 	bl	80061e8 <xTaskRemoveFromEventList>
 8005632:	4603      	mov	r3, r0
 8005634:	2b00      	cmp	r3, #0
 8005636:	d007      	beq.n	8005648 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005638:	4b3c      	ldr	r3, [pc, #240]	@ (800572c <xQueueReceive+0x1c0>)
 800563a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800563e:	601a      	str	r2, [r3, #0]
 8005640:	f3bf 8f4f 	dsb	sy
 8005644:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005648:	f001 f9c0 	bl	80069cc <vPortExitCritical>
				return pdPASS;
 800564c:	2301      	movs	r3, #1
 800564e:	e069      	b.n	8005724 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d103      	bne.n	800565e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005656:	f001 f9b9 	bl	80069cc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800565a:	2300      	movs	r3, #0
 800565c:	e062      	b.n	8005724 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800565e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005660:	2b00      	cmp	r3, #0
 8005662:	d106      	bne.n	8005672 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005664:	f107 0310 	add.w	r3, r7, #16
 8005668:	4618      	mov	r0, r3
 800566a:	f000 fe21 	bl	80062b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800566e:	2301      	movs	r3, #1
 8005670:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005672:	f001 f9ab 	bl	80069cc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005676:	f000 fbbb 	bl	8005df0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800567a:	f001 f977 	bl	800696c <vPortEnterCritical>
 800567e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005680:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005684:	b25b      	sxtb	r3, r3
 8005686:	f1b3 3fff 	cmp.w	r3, #4294967295
 800568a:	d103      	bne.n	8005694 <xQueueReceive+0x128>
 800568c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800568e:	2200      	movs	r2, #0
 8005690:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005694:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005696:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800569a:	b25b      	sxtb	r3, r3
 800569c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056a0:	d103      	bne.n	80056aa <xQueueReceive+0x13e>
 80056a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056a4:	2200      	movs	r2, #0
 80056a6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80056aa:	f001 f98f 	bl	80069cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80056ae:	1d3a      	adds	r2, r7, #4
 80056b0:	f107 0310 	add.w	r3, r7, #16
 80056b4:	4611      	mov	r1, r2
 80056b6:	4618      	mov	r0, r3
 80056b8:	f000 fe10 	bl	80062dc <xTaskCheckForTimeOut>
 80056bc:	4603      	mov	r3, r0
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d123      	bne.n	800570a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80056c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80056c4:	f000 f916 	bl	80058f4 <prvIsQueueEmpty>
 80056c8:	4603      	mov	r3, r0
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d017      	beq.n	80056fe <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80056ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056d0:	3324      	adds	r3, #36	@ 0x24
 80056d2:	687a      	ldr	r2, [r7, #4]
 80056d4:	4611      	mov	r1, r2
 80056d6:	4618      	mov	r0, r3
 80056d8:	f000 fd60 	bl	800619c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80056dc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80056de:	f000 f8b7 	bl	8005850 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80056e2:	f000 fb93 	bl	8005e0c <xTaskResumeAll>
 80056e6:	4603      	mov	r3, r0
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d189      	bne.n	8005600 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80056ec:	4b0f      	ldr	r3, [pc, #60]	@ (800572c <xQueueReceive+0x1c0>)
 80056ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80056f2:	601a      	str	r2, [r3, #0]
 80056f4:	f3bf 8f4f 	dsb	sy
 80056f8:	f3bf 8f6f 	isb	sy
 80056fc:	e780      	b.n	8005600 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80056fe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005700:	f000 f8a6 	bl	8005850 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005704:	f000 fb82 	bl	8005e0c <xTaskResumeAll>
 8005708:	e77a      	b.n	8005600 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800570a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800570c:	f000 f8a0 	bl	8005850 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005710:	f000 fb7c 	bl	8005e0c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005714:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005716:	f000 f8ed 	bl	80058f4 <prvIsQueueEmpty>
 800571a:	4603      	mov	r3, r0
 800571c:	2b00      	cmp	r3, #0
 800571e:	f43f af6f 	beq.w	8005600 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005722:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005724:	4618      	mov	r0, r3
 8005726:	3730      	adds	r7, #48	@ 0x30
 8005728:	46bd      	mov	sp, r7
 800572a:	bd80      	pop	{r7, pc}
 800572c:	e000ed04 	.word	0xe000ed04

08005730 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b086      	sub	sp, #24
 8005734:	af00      	add	r7, sp, #0
 8005736:	60f8      	str	r0, [r7, #12]
 8005738:	60b9      	str	r1, [r7, #8]
 800573a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800573c:	2300      	movs	r3, #0
 800573e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005744:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800574a:	2b00      	cmp	r3, #0
 800574c:	d10d      	bne.n	800576a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d14d      	bne.n	80057f2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	689b      	ldr	r3, [r3, #8]
 800575a:	4618      	mov	r0, r3
 800575c:	f000 ff28 	bl	80065b0 <xTaskPriorityDisinherit>
 8005760:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	2200      	movs	r2, #0
 8005766:	609a      	str	r2, [r3, #8]
 8005768:	e043      	b.n	80057f2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d119      	bne.n	80057a4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	6858      	ldr	r0, [r3, #4]
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005778:	461a      	mov	r2, r3
 800577a:	68b9      	ldr	r1, [r7, #8]
 800577c:	f001 fc72 	bl	8007064 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	685a      	ldr	r2, [r3, #4]
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005788:	441a      	add	r2, r3
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	685a      	ldr	r2, [r3, #4]
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	689b      	ldr	r3, [r3, #8]
 8005796:	429a      	cmp	r2, r3
 8005798:	d32b      	bcc.n	80057f2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681a      	ldr	r2, [r3, #0]
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	605a      	str	r2, [r3, #4]
 80057a2:	e026      	b.n	80057f2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	68d8      	ldr	r0, [r3, #12]
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057ac:	461a      	mov	r2, r3
 80057ae:	68b9      	ldr	r1, [r7, #8]
 80057b0:	f001 fc58 	bl	8007064 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	68da      	ldr	r2, [r3, #12]
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057bc:	425b      	negs	r3, r3
 80057be:	441a      	add	r2, r3
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	68da      	ldr	r2, [r3, #12]
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	429a      	cmp	r2, r3
 80057ce:	d207      	bcs.n	80057e0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	689a      	ldr	r2, [r3, #8]
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057d8:	425b      	negs	r3, r3
 80057da:	441a      	add	r2, r3
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2b02      	cmp	r3, #2
 80057e4:	d105      	bne.n	80057f2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80057e6:	693b      	ldr	r3, [r7, #16]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d002      	beq.n	80057f2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80057ec:	693b      	ldr	r3, [r7, #16]
 80057ee:	3b01      	subs	r3, #1
 80057f0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80057f2:	693b      	ldr	r3, [r7, #16]
 80057f4:	1c5a      	adds	r2, r3, #1
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80057fa:	697b      	ldr	r3, [r7, #20]
}
 80057fc:	4618      	mov	r0, r3
 80057fe:	3718      	adds	r7, #24
 8005800:	46bd      	mov	sp, r7
 8005802:	bd80      	pop	{r7, pc}

08005804 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b082      	sub	sp, #8
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
 800580c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005812:	2b00      	cmp	r3, #0
 8005814:	d018      	beq.n	8005848 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	68da      	ldr	r2, [r3, #12]
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800581e:	441a      	add	r2, r3
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	68da      	ldr	r2, [r3, #12]
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	689b      	ldr	r3, [r3, #8]
 800582c:	429a      	cmp	r2, r3
 800582e:	d303      	bcc.n	8005838 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681a      	ldr	r2, [r3, #0]
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	68d9      	ldr	r1, [r3, #12]
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005840:	461a      	mov	r2, r3
 8005842:	6838      	ldr	r0, [r7, #0]
 8005844:	f001 fc0e 	bl	8007064 <memcpy>
	}
}
 8005848:	bf00      	nop
 800584a:	3708      	adds	r7, #8
 800584c:	46bd      	mov	sp, r7
 800584e:	bd80      	pop	{r7, pc}

08005850 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b084      	sub	sp, #16
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005858:	f001 f888 	bl	800696c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005862:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005864:	e011      	b.n	800588a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800586a:	2b00      	cmp	r3, #0
 800586c:	d012      	beq.n	8005894 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	3324      	adds	r3, #36	@ 0x24
 8005872:	4618      	mov	r0, r3
 8005874:	f000 fcb8 	bl	80061e8 <xTaskRemoveFromEventList>
 8005878:	4603      	mov	r3, r0
 800587a:	2b00      	cmp	r3, #0
 800587c:	d001      	beq.n	8005882 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800587e:	f000 fd91 	bl	80063a4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005882:	7bfb      	ldrb	r3, [r7, #15]
 8005884:	3b01      	subs	r3, #1
 8005886:	b2db      	uxtb	r3, r3
 8005888:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800588a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800588e:	2b00      	cmp	r3, #0
 8005890:	dce9      	bgt.n	8005866 <prvUnlockQueue+0x16>
 8005892:	e000      	b.n	8005896 <prvUnlockQueue+0x46>
					break;
 8005894:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	22ff      	movs	r2, #255	@ 0xff
 800589a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800589e:	f001 f895 	bl	80069cc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80058a2:	f001 f863 	bl	800696c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80058ac:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80058ae:	e011      	b.n	80058d4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	691b      	ldr	r3, [r3, #16]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d012      	beq.n	80058de <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	3310      	adds	r3, #16
 80058bc:	4618      	mov	r0, r3
 80058be:	f000 fc93 	bl	80061e8 <xTaskRemoveFromEventList>
 80058c2:	4603      	mov	r3, r0
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d001      	beq.n	80058cc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80058c8:	f000 fd6c 	bl	80063a4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80058cc:	7bbb      	ldrb	r3, [r7, #14]
 80058ce:	3b01      	subs	r3, #1
 80058d0:	b2db      	uxtb	r3, r3
 80058d2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80058d4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	dce9      	bgt.n	80058b0 <prvUnlockQueue+0x60>
 80058dc:	e000      	b.n	80058e0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80058de:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	22ff      	movs	r2, #255	@ 0xff
 80058e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80058e8:	f001 f870 	bl	80069cc <vPortExitCritical>
}
 80058ec:	bf00      	nop
 80058ee:	3710      	adds	r7, #16
 80058f0:	46bd      	mov	sp, r7
 80058f2:	bd80      	pop	{r7, pc}

080058f4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b084      	sub	sp, #16
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80058fc:	f001 f836 	bl	800696c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005904:	2b00      	cmp	r3, #0
 8005906:	d102      	bne.n	800590e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005908:	2301      	movs	r3, #1
 800590a:	60fb      	str	r3, [r7, #12]
 800590c:	e001      	b.n	8005912 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800590e:	2300      	movs	r3, #0
 8005910:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005912:	f001 f85b 	bl	80069cc <vPortExitCritical>

	return xReturn;
 8005916:	68fb      	ldr	r3, [r7, #12]
}
 8005918:	4618      	mov	r0, r3
 800591a:	3710      	adds	r7, #16
 800591c:	46bd      	mov	sp, r7
 800591e:	bd80      	pop	{r7, pc}

08005920 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b084      	sub	sp, #16
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005928:	f001 f820 	bl	800696c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005934:	429a      	cmp	r2, r3
 8005936:	d102      	bne.n	800593e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005938:	2301      	movs	r3, #1
 800593a:	60fb      	str	r3, [r7, #12]
 800593c:	e001      	b.n	8005942 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800593e:	2300      	movs	r3, #0
 8005940:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005942:	f001 f843 	bl	80069cc <vPortExitCritical>

	return xReturn;
 8005946:	68fb      	ldr	r3, [r7, #12]
}
 8005948:	4618      	mov	r0, r3
 800594a:	3710      	adds	r7, #16
 800594c:	46bd      	mov	sp, r7
 800594e:	bd80      	pop	{r7, pc}

08005950 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005950:	b580      	push	{r7, lr}
 8005952:	b08e      	sub	sp, #56	@ 0x38
 8005954:	af04      	add	r7, sp, #16
 8005956:	60f8      	str	r0, [r7, #12]
 8005958:	60b9      	str	r1, [r7, #8]
 800595a:	607a      	str	r2, [r7, #4]
 800595c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800595e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005960:	2b00      	cmp	r3, #0
 8005962:	d10b      	bne.n	800597c <xTaskCreateStatic+0x2c>
	__asm volatile
 8005964:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005968:	f383 8811 	msr	BASEPRI, r3
 800596c:	f3bf 8f6f 	isb	sy
 8005970:	f3bf 8f4f 	dsb	sy
 8005974:	623b      	str	r3, [r7, #32]
}
 8005976:	bf00      	nop
 8005978:	bf00      	nop
 800597a:	e7fd      	b.n	8005978 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800597c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800597e:	2b00      	cmp	r3, #0
 8005980:	d10b      	bne.n	800599a <xTaskCreateStatic+0x4a>
	__asm volatile
 8005982:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005986:	f383 8811 	msr	BASEPRI, r3
 800598a:	f3bf 8f6f 	isb	sy
 800598e:	f3bf 8f4f 	dsb	sy
 8005992:	61fb      	str	r3, [r7, #28]
}
 8005994:	bf00      	nop
 8005996:	bf00      	nop
 8005998:	e7fd      	b.n	8005996 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800599a:	23a0      	movs	r3, #160	@ 0xa0
 800599c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800599e:	693b      	ldr	r3, [r7, #16]
 80059a0:	2ba0      	cmp	r3, #160	@ 0xa0
 80059a2:	d00b      	beq.n	80059bc <xTaskCreateStatic+0x6c>
	__asm volatile
 80059a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059a8:	f383 8811 	msr	BASEPRI, r3
 80059ac:	f3bf 8f6f 	isb	sy
 80059b0:	f3bf 8f4f 	dsb	sy
 80059b4:	61bb      	str	r3, [r7, #24]
}
 80059b6:	bf00      	nop
 80059b8:	bf00      	nop
 80059ba:	e7fd      	b.n	80059b8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80059bc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80059be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d01e      	beq.n	8005a02 <xTaskCreateStatic+0xb2>
 80059c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d01b      	beq.n	8005a02 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80059ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059cc:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80059ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059d0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80059d2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80059d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059d6:	2202      	movs	r2, #2
 80059d8:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80059dc:	2300      	movs	r3, #0
 80059de:	9303      	str	r3, [sp, #12]
 80059e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059e2:	9302      	str	r3, [sp, #8]
 80059e4:	f107 0314 	add.w	r3, r7, #20
 80059e8:	9301      	str	r3, [sp, #4]
 80059ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059ec:	9300      	str	r3, [sp, #0]
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	687a      	ldr	r2, [r7, #4]
 80059f2:	68b9      	ldr	r1, [r7, #8]
 80059f4:	68f8      	ldr	r0, [r7, #12]
 80059f6:	f000 f851 	bl	8005a9c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80059fa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80059fc:	f000 f8ee 	bl	8005bdc <prvAddNewTaskToReadyList>
 8005a00:	e001      	b.n	8005a06 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8005a02:	2300      	movs	r3, #0
 8005a04:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005a06:	697b      	ldr	r3, [r7, #20]
	}
 8005a08:	4618      	mov	r0, r3
 8005a0a:	3728      	adds	r7, #40	@ 0x28
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	bd80      	pop	{r7, pc}

08005a10 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b08c      	sub	sp, #48	@ 0x30
 8005a14:	af04      	add	r7, sp, #16
 8005a16:	60f8      	str	r0, [r7, #12]
 8005a18:	60b9      	str	r1, [r7, #8]
 8005a1a:	603b      	str	r3, [r7, #0]
 8005a1c:	4613      	mov	r3, r2
 8005a1e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005a20:	88fb      	ldrh	r3, [r7, #6]
 8005a22:	009b      	lsls	r3, r3, #2
 8005a24:	4618      	mov	r0, r3
 8005a26:	f001 f863 	bl	8006af0 <pvPortMalloc>
 8005a2a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005a2c:	697b      	ldr	r3, [r7, #20]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d00e      	beq.n	8005a50 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005a32:	20a0      	movs	r0, #160	@ 0xa0
 8005a34:	f001 f85c 	bl	8006af0 <pvPortMalloc>
 8005a38:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005a3a:	69fb      	ldr	r3, [r7, #28]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d003      	beq.n	8005a48 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005a40:	69fb      	ldr	r3, [r7, #28]
 8005a42:	697a      	ldr	r2, [r7, #20]
 8005a44:	631a      	str	r2, [r3, #48]	@ 0x30
 8005a46:	e005      	b.n	8005a54 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005a48:	6978      	ldr	r0, [r7, #20]
 8005a4a:	f001 f91f 	bl	8006c8c <vPortFree>
 8005a4e:	e001      	b.n	8005a54 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005a50:	2300      	movs	r3, #0
 8005a52:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005a54:	69fb      	ldr	r3, [r7, #28]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d017      	beq.n	8005a8a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005a5a:	69fb      	ldr	r3, [r7, #28]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005a62:	88fa      	ldrh	r2, [r7, #6]
 8005a64:	2300      	movs	r3, #0
 8005a66:	9303      	str	r3, [sp, #12]
 8005a68:	69fb      	ldr	r3, [r7, #28]
 8005a6a:	9302      	str	r3, [sp, #8]
 8005a6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a6e:	9301      	str	r3, [sp, #4]
 8005a70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a72:	9300      	str	r3, [sp, #0]
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	68b9      	ldr	r1, [r7, #8]
 8005a78:	68f8      	ldr	r0, [r7, #12]
 8005a7a:	f000 f80f 	bl	8005a9c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005a7e:	69f8      	ldr	r0, [r7, #28]
 8005a80:	f000 f8ac 	bl	8005bdc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005a84:	2301      	movs	r3, #1
 8005a86:	61bb      	str	r3, [r7, #24]
 8005a88:	e002      	b.n	8005a90 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005a8a:	f04f 33ff 	mov.w	r3, #4294967295
 8005a8e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005a90:	69bb      	ldr	r3, [r7, #24]
	}
 8005a92:	4618      	mov	r0, r3
 8005a94:	3720      	adds	r7, #32
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bd80      	pop	{r7, pc}
	...

08005a9c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b088      	sub	sp, #32
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	60f8      	str	r0, [r7, #12]
 8005aa4:	60b9      	str	r1, [r7, #8]
 8005aa6:	607a      	str	r2, [r7, #4]
 8005aa8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005aaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005aac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005ab4:	3b01      	subs	r3, #1
 8005ab6:	009b      	lsls	r3, r3, #2
 8005ab8:	4413      	add	r3, r2
 8005aba:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005abc:	69bb      	ldr	r3, [r7, #24]
 8005abe:	f023 0307 	bic.w	r3, r3, #7
 8005ac2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005ac4:	69bb      	ldr	r3, [r7, #24]
 8005ac6:	f003 0307 	and.w	r3, r3, #7
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d00b      	beq.n	8005ae6 <prvInitialiseNewTask+0x4a>
	__asm volatile
 8005ace:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ad2:	f383 8811 	msr	BASEPRI, r3
 8005ad6:	f3bf 8f6f 	isb	sy
 8005ada:	f3bf 8f4f 	dsb	sy
 8005ade:	617b      	str	r3, [r7, #20]
}
 8005ae0:	bf00      	nop
 8005ae2:	bf00      	nop
 8005ae4:	e7fd      	b.n	8005ae2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005ae6:	68bb      	ldr	r3, [r7, #8]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d01f      	beq.n	8005b2c <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005aec:	2300      	movs	r3, #0
 8005aee:	61fb      	str	r3, [r7, #28]
 8005af0:	e012      	b.n	8005b18 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005af2:	68ba      	ldr	r2, [r7, #8]
 8005af4:	69fb      	ldr	r3, [r7, #28]
 8005af6:	4413      	add	r3, r2
 8005af8:	7819      	ldrb	r1, [r3, #0]
 8005afa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005afc:	69fb      	ldr	r3, [r7, #28]
 8005afe:	4413      	add	r3, r2
 8005b00:	3334      	adds	r3, #52	@ 0x34
 8005b02:	460a      	mov	r2, r1
 8005b04:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005b06:	68ba      	ldr	r2, [r7, #8]
 8005b08:	69fb      	ldr	r3, [r7, #28]
 8005b0a:	4413      	add	r3, r2
 8005b0c:	781b      	ldrb	r3, [r3, #0]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d006      	beq.n	8005b20 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005b12:	69fb      	ldr	r3, [r7, #28]
 8005b14:	3301      	adds	r3, #1
 8005b16:	61fb      	str	r3, [r7, #28]
 8005b18:	69fb      	ldr	r3, [r7, #28]
 8005b1a:	2b0f      	cmp	r3, #15
 8005b1c:	d9e9      	bls.n	8005af2 <prvInitialiseNewTask+0x56>
 8005b1e:	e000      	b.n	8005b22 <prvInitialiseNewTask+0x86>
			{
				break;
 8005b20:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005b22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b24:	2200      	movs	r2, #0
 8005b26:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005b2a:	e003      	b.n	8005b34 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005b2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b2e:	2200      	movs	r2, #0
 8005b30:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005b34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b36:	2b06      	cmp	r3, #6
 8005b38:	d901      	bls.n	8005b3e <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005b3a:	2306      	movs	r3, #6
 8005b3c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005b3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b40:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005b42:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005b44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b46:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005b48:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005b4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005b50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b52:	3304      	adds	r3, #4
 8005b54:	4618      	mov	r0, r3
 8005b56:	f7ff fab2 	bl	80050be <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005b5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b5c:	3318      	adds	r3, #24
 8005b5e:	4618      	mov	r0, r3
 8005b60:	f7ff faad 	bl	80050be <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005b64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b66:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b68:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b6c:	f1c3 0207 	rsb	r2, r3, #7
 8005b70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b72:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005b74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b76:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b78:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005b7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005b82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b84:	2200      	movs	r2, #0
 8005b86:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005b8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b8c:	334c      	adds	r3, #76	@ 0x4c
 8005b8e:	224c      	movs	r2, #76	@ 0x4c
 8005b90:	2100      	movs	r1, #0
 8005b92:	4618      	mov	r0, r3
 8005b94:	f001 f9d4 	bl	8006f40 <memset>
 8005b98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b9a:	4a0d      	ldr	r2, [pc, #52]	@ (8005bd0 <prvInitialiseNewTask+0x134>)
 8005b9c:	651a      	str	r2, [r3, #80]	@ 0x50
 8005b9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ba0:	4a0c      	ldr	r2, [pc, #48]	@ (8005bd4 <prvInitialiseNewTask+0x138>)
 8005ba2:	655a      	str	r2, [r3, #84]	@ 0x54
 8005ba4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ba6:	4a0c      	ldr	r2, [pc, #48]	@ (8005bd8 <prvInitialiseNewTask+0x13c>)
 8005ba8:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005baa:	683a      	ldr	r2, [r7, #0]
 8005bac:	68f9      	ldr	r1, [r7, #12]
 8005bae:	69b8      	ldr	r0, [r7, #24]
 8005bb0:	f000 fdec 	bl	800678c <pxPortInitialiseStack>
 8005bb4:	4602      	mov	r2, r0
 8005bb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bb8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005bba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d002      	beq.n	8005bc6 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005bc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bc2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005bc4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005bc6:	bf00      	nop
 8005bc8:	3720      	adds	r7, #32
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	bd80      	pop	{r7, pc}
 8005bce:	bf00      	nop
 8005bd0:	20002dbc 	.word	0x20002dbc
 8005bd4:	20002e24 	.word	0x20002e24
 8005bd8:	20002e8c 	.word	0x20002e8c

08005bdc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b082      	sub	sp, #8
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005be4:	f000 fec2 	bl	800696c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005be8:	4b2a      	ldr	r3, [pc, #168]	@ (8005c94 <prvAddNewTaskToReadyList+0xb8>)
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	3301      	adds	r3, #1
 8005bee:	4a29      	ldr	r2, [pc, #164]	@ (8005c94 <prvAddNewTaskToReadyList+0xb8>)
 8005bf0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005bf2:	4b29      	ldr	r3, [pc, #164]	@ (8005c98 <prvAddNewTaskToReadyList+0xbc>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d109      	bne.n	8005c0e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005bfa:	4a27      	ldr	r2, [pc, #156]	@ (8005c98 <prvAddNewTaskToReadyList+0xbc>)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005c00:	4b24      	ldr	r3, [pc, #144]	@ (8005c94 <prvAddNewTaskToReadyList+0xb8>)
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	2b01      	cmp	r3, #1
 8005c06:	d110      	bne.n	8005c2a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005c08:	f000 fbf0 	bl	80063ec <prvInitialiseTaskLists>
 8005c0c:	e00d      	b.n	8005c2a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005c0e:	4b23      	ldr	r3, [pc, #140]	@ (8005c9c <prvAddNewTaskToReadyList+0xc0>)
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d109      	bne.n	8005c2a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005c16:	4b20      	ldr	r3, [pc, #128]	@ (8005c98 <prvAddNewTaskToReadyList+0xbc>)
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c20:	429a      	cmp	r2, r3
 8005c22:	d802      	bhi.n	8005c2a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005c24:	4a1c      	ldr	r2, [pc, #112]	@ (8005c98 <prvAddNewTaskToReadyList+0xbc>)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005c2a:	4b1d      	ldr	r3, [pc, #116]	@ (8005ca0 <prvAddNewTaskToReadyList+0xc4>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	3301      	adds	r3, #1
 8005c30:	4a1b      	ldr	r2, [pc, #108]	@ (8005ca0 <prvAddNewTaskToReadyList+0xc4>)
 8005c32:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c38:	2201      	movs	r2, #1
 8005c3a:	409a      	lsls	r2, r3
 8005c3c:	4b19      	ldr	r3, [pc, #100]	@ (8005ca4 <prvAddNewTaskToReadyList+0xc8>)
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4313      	orrs	r3, r2
 8005c42:	4a18      	ldr	r2, [pc, #96]	@ (8005ca4 <prvAddNewTaskToReadyList+0xc8>)
 8005c44:	6013      	str	r3, [r2, #0]
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c4a:	4613      	mov	r3, r2
 8005c4c:	009b      	lsls	r3, r3, #2
 8005c4e:	4413      	add	r3, r2
 8005c50:	009b      	lsls	r3, r3, #2
 8005c52:	4a15      	ldr	r2, [pc, #84]	@ (8005ca8 <prvAddNewTaskToReadyList+0xcc>)
 8005c54:	441a      	add	r2, r3
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	3304      	adds	r3, #4
 8005c5a:	4619      	mov	r1, r3
 8005c5c:	4610      	mov	r0, r2
 8005c5e:	f7ff fa3a 	bl	80050d6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005c62:	f000 feb3 	bl	80069cc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005c66:	4b0d      	ldr	r3, [pc, #52]	@ (8005c9c <prvAddNewTaskToReadyList+0xc0>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d00e      	beq.n	8005c8c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005c6e:	4b0a      	ldr	r3, [pc, #40]	@ (8005c98 <prvAddNewTaskToReadyList+0xbc>)
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c78:	429a      	cmp	r2, r3
 8005c7a:	d207      	bcs.n	8005c8c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005c7c:	4b0b      	ldr	r3, [pc, #44]	@ (8005cac <prvAddNewTaskToReadyList+0xd0>)
 8005c7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005c82:	601a      	str	r2, [r3, #0]
 8005c84:	f3bf 8f4f 	dsb	sy
 8005c88:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005c8c:	bf00      	nop
 8005c8e:	3708      	adds	r7, #8
 8005c90:	46bd      	mov	sp, r7
 8005c92:	bd80      	pop	{r7, pc}
 8005c94:	20000568 	.word	0x20000568
 8005c98:	20000468 	.word	0x20000468
 8005c9c:	20000574 	.word	0x20000574
 8005ca0:	20000584 	.word	0x20000584
 8005ca4:	20000570 	.word	0x20000570
 8005ca8:	2000046c 	.word	0x2000046c
 8005cac:	e000ed04 	.word	0xe000ed04

08005cb0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b084      	sub	sp, #16
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005cb8:	2300      	movs	r3, #0
 8005cba:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d018      	beq.n	8005cf4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005cc2:	4b14      	ldr	r3, [pc, #80]	@ (8005d14 <vTaskDelay+0x64>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d00b      	beq.n	8005ce2 <vTaskDelay+0x32>
	__asm volatile
 8005cca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cce:	f383 8811 	msr	BASEPRI, r3
 8005cd2:	f3bf 8f6f 	isb	sy
 8005cd6:	f3bf 8f4f 	dsb	sy
 8005cda:	60bb      	str	r3, [r7, #8]
}
 8005cdc:	bf00      	nop
 8005cde:	bf00      	nop
 8005ce0:	e7fd      	b.n	8005cde <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005ce2:	f000 f885 	bl	8005df0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005ce6:	2100      	movs	r1, #0
 8005ce8:	6878      	ldr	r0, [r7, #4]
 8005cea:	f000 fce9 	bl	80066c0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005cee:	f000 f88d 	bl	8005e0c <xTaskResumeAll>
 8005cf2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d107      	bne.n	8005d0a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8005cfa:	4b07      	ldr	r3, [pc, #28]	@ (8005d18 <vTaskDelay+0x68>)
 8005cfc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005d00:	601a      	str	r2, [r3, #0]
 8005d02:	f3bf 8f4f 	dsb	sy
 8005d06:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005d0a:	bf00      	nop
 8005d0c:	3710      	adds	r7, #16
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	bd80      	pop	{r7, pc}
 8005d12:	bf00      	nop
 8005d14:	20000590 	.word	0x20000590
 8005d18:	e000ed04 	.word	0xe000ed04

08005d1c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b08a      	sub	sp, #40	@ 0x28
 8005d20:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005d22:	2300      	movs	r3, #0
 8005d24:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005d26:	2300      	movs	r3, #0
 8005d28:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005d2a:	463a      	mov	r2, r7
 8005d2c:	1d39      	adds	r1, r7, #4
 8005d2e:	f107 0308 	add.w	r3, r7, #8
 8005d32:	4618      	mov	r0, r3
 8005d34:	f7fe ffd8 	bl	8004ce8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005d38:	6839      	ldr	r1, [r7, #0]
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	68ba      	ldr	r2, [r7, #8]
 8005d3e:	9202      	str	r2, [sp, #8]
 8005d40:	9301      	str	r3, [sp, #4]
 8005d42:	2300      	movs	r3, #0
 8005d44:	9300      	str	r3, [sp, #0]
 8005d46:	2300      	movs	r3, #0
 8005d48:	460a      	mov	r2, r1
 8005d4a:	4921      	ldr	r1, [pc, #132]	@ (8005dd0 <vTaskStartScheduler+0xb4>)
 8005d4c:	4821      	ldr	r0, [pc, #132]	@ (8005dd4 <vTaskStartScheduler+0xb8>)
 8005d4e:	f7ff fdff 	bl	8005950 <xTaskCreateStatic>
 8005d52:	4603      	mov	r3, r0
 8005d54:	4a20      	ldr	r2, [pc, #128]	@ (8005dd8 <vTaskStartScheduler+0xbc>)
 8005d56:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005d58:	4b1f      	ldr	r3, [pc, #124]	@ (8005dd8 <vTaskStartScheduler+0xbc>)
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d002      	beq.n	8005d66 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005d60:	2301      	movs	r3, #1
 8005d62:	617b      	str	r3, [r7, #20]
 8005d64:	e001      	b.n	8005d6a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005d66:	2300      	movs	r3, #0
 8005d68:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005d6a:	697b      	ldr	r3, [r7, #20]
 8005d6c:	2b01      	cmp	r3, #1
 8005d6e:	d11b      	bne.n	8005da8 <vTaskStartScheduler+0x8c>
	__asm volatile
 8005d70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d74:	f383 8811 	msr	BASEPRI, r3
 8005d78:	f3bf 8f6f 	isb	sy
 8005d7c:	f3bf 8f4f 	dsb	sy
 8005d80:	613b      	str	r3, [r7, #16]
}
 8005d82:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005d84:	4b15      	ldr	r3, [pc, #84]	@ (8005ddc <vTaskStartScheduler+0xc0>)
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	334c      	adds	r3, #76	@ 0x4c
 8005d8a:	4a15      	ldr	r2, [pc, #84]	@ (8005de0 <vTaskStartScheduler+0xc4>)
 8005d8c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005d8e:	4b15      	ldr	r3, [pc, #84]	@ (8005de4 <vTaskStartScheduler+0xc8>)
 8005d90:	f04f 32ff 	mov.w	r2, #4294967295
 8005d94:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005d96:	4b14      	ldr	r3, [pc, #80]	@ (8005de8 <vTaskStartScheduler+0xcc>)
 8005d98:	2201      	movs	r2, #1
 8005d9a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005d9c:	4b13      	ldr	r3, [pc, #76]	@ (8005dec <vTaskStartScheduler+0xd0>)
 8005d9e:	2200      	movs	r2, #0
 8005da0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005da2:	f000 fd71 	bl	8006888 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005da6:	e00f      	b.n	8005dc8 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005da8:	697b      	ldr	r3, [r7, #20]
 8005daa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dae:	d10b      	bne.n	8005dc8 <vTaskStartScheduler+0xac>
	__asm volatile
 8005db0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005db4:	f383 8811 	msr	BASEPRI, r3
 8005db8:	f3bf 8f6f 	isb	sy
 8005dbc:	f3bf 8f4f 	dsb	sy
 8005dc0:	60fb      	str	r3, [r7, #12]
}
 8005dc2:	bf00      	nop
 8005dc4:	bf00      	nop
 8005dc6:	e7fd      	b.n	8005dc4 <vTaskStartScheduler+0xa8>
}
 8005dc8:	bf00      	nop
 8005dca:	3718      	adds	r7, #24
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	bd80      	pop	{r7, pc}
 8005dd0:	080079d4 	.word	0x080079d4
 8005dd4:	080063bd 	.word	0x080063bd
 8005dd8:	2000058c 	.word	0x2000058c
 8005ddc:	20000468 	.word	0x20000468
 8005de0:	20000008 	.word	0x20000008
 8005de4:	20000588 	.word	0x20000588
 8005de8:	20000574 	.word	0x20000574
 8005dec:	2000056c 	.word	0x2000056c

08005df0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005df0:	b480      	push	{r7}
 8005df2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005df4:	4b04      	ldr	r3, [pc, #16]	@ (8005e08 <vTaskSuspendAll+0x18>)
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	3301      	adds	r3, #1
 8005dfa:	4a03      	ldr	r2, [pc, #12]	@ (8005e08 <vTaskSuspendAll+0x18>)
 8005dfc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005dfe:	bf00      	nop
 8005e00:	46bd      	mov	sp, r7
 8005e02:	bc80      	pop	{r7}
 8005e04:	4770      	bx	lr
 8005e06:	bf00      	nop
 8005e08:	20000590 	.word	0x20000590

08005e0c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b084      	sub	sp, #16
 8005e10:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005e12:	2300      	movs	r3, #0
 8005e14:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005e16:	2300      	movs	r3, #0
 8005e18:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005e1a:	4b42      	ldr	r3, [pc, #264]	@ (8005f24 <xTaskResumeAll+0x118>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d10b      	bne.n	8005e3a <xTaskResumeAll+0x2e>
	__asm volatile
 8005e22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e26:	f383 8811 	msr	BASEPRI, r3
 8005e2a:	f3bf 8f6f 	isb	sy
 8005e2e:	f3bf 8f4f 	dsb	sy
 8005e32:	603b      	str	r3, [r7, #0]
}
 8005e34:	bf00      	nop
 8005e36:	bf00      	nop
 8005e38:	e7fd      	b.n	8005e36 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005e3a:	f000 fd97 	bl	800696c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005e3e:	4b39      	ldr	r3, [pc, #228]	@ (8005f24 <xTaskResumeAll+0x118>)
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	3b01      	subs	r3, #1
 8005e44:	4a37      	ldr	r2, [pc, #220]	@ (8005f24 <xTaskResumeAll+0x118>)
 8005e46:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005e48:	4b36      	ldr	r3, [pc, #216]	@ (8005f24 <xTaskResumeAll+0x118>)
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d161      	bne.n	8005f14 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005e50:	4b35      	ldr	r3, [pc, #212]	@ (8005f28 <xTaskResumeAll+0x11c>)
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d05d      	beq.n	8005f14 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005e58:	e02e      	b.n	8005eb8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e5a:	4b34      	ldr	r3, [pc, #208]	@ (8005f2c <xTaskResumeAll+0x120>)
 8005e5c:	68db      	ldr	r3, [r3, #12]
 8005e5e:	68db      	ldr	r3, [r3, #12]
 8005e60:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	3318      	adds	r3, #24
 8005e66:	4618      	mov	r0, r3
 8005e68:	f7ff f990 	bl	800518c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	3304      	adds	r3, #4
 8005e70:	4618      	mov	r0, r3
 8005e72:	f7ff f98b 	bl	800518c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e7a:	2201      	movs	r2, #1
 8005e7c:	409a      	lsls	r2, r3
 8005e7e:	4b2c      	ldr	r3, [pc, #176]	@ (8005f30 <xTaskResumeAll+0x124>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4313      	orrs	r3, r2
 8005e84:	4a2a      	ldr	r2, [pc, #168]	@ (8005f30 <xTaskResumeAll+0x124>)
 8005e86:	6013      	str	r3, [r2, #0]
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e8c:	4613      	mov	r3, r2
 8005e8e:	009b      	lsls	r3, r3, #2
 8005e90:	4413      	add	r3, r2
 8005e92:	009b      	lsls	r3, r3, #2
 8005e94:	4a27      	ldr	r2, [pc, #156]	@ (8005f34 <xTaskResumeAll+0x128>)
 8005e96:	441a      	add	r2, r3
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	3304      	adds	r3, #4
 8005e9c:	4619      	mov	r1, r3
 8005e9e:	4610      	mov	r0, r2
 8005ea0:	f7ff f919 	bl	80050d6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ea8:	4b23      	ldr	r3, [pc, #140]	@ (8005f38 <xTaskResumeAll+0x12c>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005eae:	429a      	cmp	r2, r3
 8005eb0:	d302      	bcc.n	8005eb8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005eb2:	4b22      	ldr	r3, [pc, #136]	@ (8005f3c <xTaskResumeAll+0x130>)
 8005eb4:	2201      	movs	r2, #1
 8005eb6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005eb8:	4b1c      	ldr	r3, [pc, #112]	@ (8005f2c <xTaskResumeAll+0x120>)
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d1cc      	bne.n	8005e5a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d001      	beq.n	8005eca <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005ec6:	f000 fb35 	bl	8006534 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005eca:	4b1d      	ldr	r3, [pc, #116]	@ (8005f40 <xTaskResumeAll+0x134>)
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d010      	beq.n	8005ef8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005ed6:	f000 f845 	bl	8005f64 <xTaskIncrementTick>
 8005eda:	4603      	mov	r3, r0
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d002      	beq.n	8005ee6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005ee0:	4b16      	ldr	r3, [pc, #88]	@ (8005f3c <xTaskResumeAll+0x130>)
 8005ee2:	2201      	movs	r2, #1
 8005ee4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	3b01      	subs	r3, #1
 8005eea:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d1f1      	bne.n	8005ed6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8005ef2:	4b13      	ldr	r3, [pc, #76]	@ (8005f40 <xTaskResumeAll+0x134>)
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005ef8:	4b10      	ldr	r3, [pc, #64]	@ (8005f3c <xTaskResumeAll+0x130>)
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d009      	beq.n	8005f14 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005f00:	2301      	movs	r3, #1
 8005f02:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005f04:	4b0f      	ldr	r3, [pc, #60]	@ (8005f44 <xTaskResumeAll+0x138>)
 8005f06:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005f0a:	601a      	str	r2, [r3, #0]
 8005f0c:	f3bf 8f4f 	dsb	sy
 8005f10:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005f14:	f000 fd5a 	bl	80069cc <vPortExitCritical>

	return xAlreadyYielded;
 8005f18:	68bb      	ldr	r3, [r7, #8]
}
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	3710      	adds	r7, #16
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	bd80      	pop	{r7, pc}
 8005f22:	bf00      	nop
 8005f24:	20000590 	.word	0x20000590
 8005f28:	20000568 	.word	0x20000568
 8005f2c:	20000528 	.word	0x20000528
 8005f30:	20000570 	.word	0x20000570
 8005f34:	2000046c 	.word	0x2000046c
 8005f38:	20000468 	.word	0x20000468
 8005f3c:	2000057c 	.word	0x2000057c
 8005f40:	20000578 	.word	0x20000578
 8005f44:	e000ed04 	.word	0xe000ed04

08005f48 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005f48:	b480      	push	{r7}
 8005f4a:	b083      	sub	sp, #12
 8005f4c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005f4e:	4b04      	ldr	r3, [pc, #16]	@ (8005f60 <xTaskGetTickCount+0x18>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005f54:	687b      	ldr	r3, [r7, #4]
}
 8005f56:	4618      	mov	r0, r3
 8005f58:	370c      	adds	r7, #12
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	bc80      	pop	{r7}
 8005f5e:	4770      	bx	lr
 8005f60:	2000056c 	.word	0x2000056c

08005f64 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b086      	sub	sp, #24
 8005f68:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f6e:	4b4f      	ldr	r3, [pc, #316]	@ (80060ac <xTaskIncrementTick+0x148>)
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	f040 808f 	bne.w	8006096 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005f78:	4b4d      	ldr	r3, [pc, #308]	@ (80060b0 <xTaskIncrementTick+0x14c>)
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	3301      	adds	r3, #1
 8005f7e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005f80:	4a4b      	ldr	r2, [pc, #300]	@ (80060b0 <xTaskIncrementTick+0x14c>)
 8005f82:	693b      	ldr	r3, [r7, #16]
 8005f84:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005f86:	693b      	ldr	r3, [r7, #16]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d121      	bne.n	8005fd0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005f8c:	4b49      	ldr	r3, [pc, #292]	@ (80060b4 <xTaskIncrementTick+0x150>)
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d00b      	beq.n	8005fae <xTaskIncrementTick+0x4a>
	__asm volatile
 8005f96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f9a:	f383 8811 	msr	BASEPRI, r3
 8005f9e:	f3bf 8f6f 	isb	sy
 8005fa2:	f3bf 8f4f 	dsb	sy
 8005fa6:	603b      	str	r3, [r7, #0]
}
 8005fa8:	bf00      	nop
 8005faa:	bf00      	nop
 8005fac:	e7fd      	b.n	8005faa <xTaskIncrementTick+0x46>
 8005fae:	4b41      	ldr	r3, [pc, #260]	@ (80060b4 <xTaskIncrementTick+0x150>)
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	60fb      	str	r3, [r7, #12]
 8005fb4:	4b40      	ldr	r3, [pc, #256]	@ (80060b8 <xTaskIncrementTick+0x154>)
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	4a3e      	ldr	r2, [pc, #248]	@ (80060b4 <xTaskIncrementTick+0x150>)
 8005fba:	6013      	str	r3, [r2, #0]
 8005fbc:	4a3e      	ldr	r2, [pc, #248]	@ (80060b8 <xTaskIncrementTick+0x154>)
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	6013      	str	r3, [r2, #0]
 8005fc2:	4b3e      	ldr	r3, [pc, #248]	@ (80060bc <xTaskIncrementTick+0x158>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	3301      	adds	r3, #1
 8005fc8:	4a3c      	ldr	r2, [pc, #240]	@ (80060bc <xTaskIncrementTick+0x158>)
 8005fca:	6013      	str	r3, [r2, #0]
 8005fcc:	f000 fab2 	bl	8006534 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005fd0:	4b3b      	ldr	r3, [pc, #236]	@ (80060c0 <xTaskIncrementTick+0x15c>)
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	693a      	ldr	r2, [r7, #16]
 8005fd6:	429a      	cmp	r2, r3
 8005fd8:	d348      	bcc.n	800606c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005fda:	4b36      	ldr	r3, [pc, #216]	@ (80060b4 <xTaskIncrementTick+0x150>)
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d104      	bne.n	8005fee <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005fe4:	4b36      	ldr	r3, [pc, #216]	@ (80060c0 <xTaskIncrementTick+0x15c>)
 8005fe6:	f04f 32ff 	mov.w	r2, #4294967295
 8005fea:	601a      	str	r2, [r3, #0]
					break;
 8005fec:	e03e      	b.n	800606c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005fee:	4b31      	ldr	r3, [pc, #196]	@ (80060b4 <xTaskIncrementTick+0x150>)
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	68db      	ldr	r3, [r3, #12]
 8005ff4:	68db      	ldr	r3, [r3, #12]
 8005ff6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005ff8:	68bb      	ldr	r3, [r7, #8]
 8005ffa:	685b      	ldr	r3, [r3, #4]
 8005ffc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005ffe:	693a      	ldr	r2, [r7, #16]
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	429a      	cmp	r2, r3
 8006004:	d203      	bcs.n	800600e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006006:	4a2e      	ldr	r2, [pc, #184]	@ (80060c0 <xTaskIncrementTick+0x15c>)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800600c:	e02e      	b.n	800606c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800600e:	68bb      	ldr	r3, [r7, #8]
 8006010:	3304      	adds	r3, #4
 8006012:	4618      	mov	r0, r3
 8006014:	f7ff f8ba 	bl	800518c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800601c:	2b00      	cmp	r3, #0
 800601e:	d004      	beq.n	800602a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	3318      	adds	r3, #24
 8006024:	4618      	mov	r0, r3
 8006026:	f7ff f8b1 	bl	800518c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800602e:	2201      	movs	r2, #1
 8006030:	409a      	lsls	r2, r3
 8006032:	4b24      	ldr	r3, [pc, #144]	@ (80060c4 <xTaskIncrementTick+0x160>)
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	4313      	orrs	r3, r2
 8006038:	4a22      	ldr	r2, [pc, #136]	@ (80060c4 <xTaskIncrementTick+0x160>)
 800603a:	6013      	str	r3, [r2, #0]
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006040:	4613      	mov	r3, r2
 8006042:	009b      	lsls	r3, r3, #2
 8006044:	4413      	add	r3, r2
 8006046:	009b      	lsls	r3, r3, #2
 8006048:	4a1f      	ldr	r2, [pc, #124]	@ (80060c8 <xTaskIncrementTick+0x164>)
 800604a:	441a      	add	r2, r3
 800604c:	68bb      	ldr	r3, [r7, #8]
 800604e:	3304      	adds	r3, #4
 8006050:	4619      	mov	r1, r3
 8006052:	4610      	mov	r0, r2
 8006054:	f7ff f83f 	bl	80050d6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800605c:	4b1b      	ldr	r3, [pc, #108]	@ (80060cc <xTaskIncrementTick+0x168>)
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006062:	429a      	cmp	r2, r3
 8006064:	d3b9      	bcc.n	8005fda <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8006066:	2301      	movs	r3, #1
 8006068:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800606a:	e7b6      	b.n	8005fda <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800606c:	4b17      	ldr	r3, [pc, #92]	@ (80060cc <xTaskIncrementTick+0x168>)
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006072:	4915      	ldr	r1, [pc, #84]	@ (80060c8 <xTaskIncrementTick+0x164>)
 8006074:	4613      	mov	r3, r2
 8006076:	009b      	lsls	r3, r3, #2
 8006078:	4413      	add	r3, r2
 800607a:	009b      	lsls	r3, r3, #2
 800607c:	440b      	add	r3, r1
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	2b01      	cmp	r3, #1
 8006082:	d901      	bls.n	8006088 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006084:	2301      	movs	r3, #1
 8006086:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006088:	4b11      	ldr	r3, [pc, #68]	@ (80060d0 <xTaskIncrementTick+0x16c>)
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d007      	beq.n	80060a0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006090:	2301      	movs	r3, #1
 8006092:	617b      	str	r3, [r7, #20]
 8006094:	e004      	b.n	80060a0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006096:	4b0f      	ldr	r3, [pc, #60]	@ (80060d4 <xTaskIncrementTick+0x170>)
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	3301      	adds	r3, #1
 800609c:	4a0d      	ldr	r2, [pc, #52]	@ (80060d4 <xTaskIncrementTick+0x170>)
 800609e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80060a0:	697b      	ldr	r3, [r7, #20]
}
 80060a2:	4618      	mov	r0, r3
 80060a4:	3718      	adds	r7, #24
 80060a6:	46bd      	mov	sp, r7
 80060a8:	bd80      	pop	{r7, pc}
 80060aa:	bf00      	nop
 80060ac:	20000590 	.word	0x20000590
 80060b0:	2000056c 	.word	0x2000056c
 80060b4:	20000520 	.word	0x20000520
 80060b8:	20000524 	.word	0x20000524
 80060bc:	20000580 	.word	0x20000580
 80060c0:	20000588 	.word	0x20000588
 80060c4:	20000570 	.word	0x20000570
 80060c8:	2000046c 	.word	0x2000046c
 80060cc:	20000468 	.word	0x20000468
 80060d0:	2000057c 	.word	0x2000057c
 80060d4:	20000578 	.word	0x20000578

080060d8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80060d8:	b480      	push	{r7}
 80060da:	b087      	sub	sp, #28
 80060dc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80060de:	4b29      	ldr	r3, [pc, #164]	@ (8006184 <vTaskSwitchContext+0xac>)
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d003      	beq.n	80060ee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80060e6:	4b28      	ldr	r3, [pc, #160]	@ (8006188 <vTaskSwitchContext+0xb0>)
 80060e8:	2201      	movs	r2, #1
 80060ea:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80060ec:	e045      	b.n	800617a <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 80060ee:	4b26      	ldr	r3, [pc, #152]	@ (8006188 <vTaskSwitchContext+0xb0>)
 80060f0:	2200      	movs	r2, #0
 80060f2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80060f4:	4b25      	ldr	r3, [pc, #148]	@ (800618c <vTaskSwitchContext+0xb4>)
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	fab3 f383 	clz	r3, r3
 8006100:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006102:	7afb      	ldrb	r3, [r7, #11]
 8006104:	f1c3 031f 	rsb	r3, r3, #31
 8006108:	617b      	str	r3, [r7, #20]
 800610a:	4921      	ldr	r1, [pc, #132]	@ (8006190 <vTaskSwitchContext+0xb8>)
 800610c:	697a      	ldr	r2, [r7, #20]
 800610e:	4613      	mov	r3, r2
 8006110:	009b      	lsls	r3, r3, #2
 8006112:	4413      	add	r3, r2
 8006114:	009b      	lsls	r3, r3, #2
 8006116:	440b      	add	r3, r1
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d10b      	bne.n	8006136 <vTaskSwitchContext+0x5e>
	__asm volatile
 800611e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006122:	f383 8811 	msr	BASEPRI, r3
 8006126:	f3bf 8f6f 	isb	sy
 800612a:	f3bf 8f4f 	dsb	sy
 800612e:	607b      	str	r3, [r7, #4]
}
 8006130:	bf00      	nop
 8006132:	bf00      	nop
 8006134:	e7fd      	b.n	8006132 <vTaskSwitchContext+0x5a>
 8006136:	697a      	ldr	r2, [r7, #20]
 8006138:	4613      	mov	r3, r2
 800613a:	009b      	lsls	r3, r3, #2
 800613c:	4413      	add	r3, r2
 800613e:	009b      	lsls	r3, r3, #2
 8006140:	4a13      	ldr	r2, [pc, #76]	@ (8006190 <vTaskSwitchContext+0xb8>)
 8006142:	4413      	add	r3, r2
 8006144:	613b      	str	r3, [r7, #16]
 8006146:	693b      	ldr	r3, [r7, #16]
 8006148:	685b      	ldr	r3, [r3, #4]
 800614a:	685a      	ldr	r2, [r3, #4]
 800614c:	693b      	ldr	r3, [r7, #16]
 800614e:	605a      	str	r2, [r3, #4]
 8006150:	693b      	ldr	r3, [r7, #16]
 8006152:	685a      	ldr	r2, [r3, #4]
 8006154:	693b      	ldr	r3, [r7, #16]
 8006156:	3308      	adds	r3, #8
 8006158:	429a      	cmp	r2, r3
 800615a:	d104      	bne.n	8006166 <vTaskSwitchContext+0x8e>
 800615c:	693b      	ldr	r3, [r7, #16]
 800615e:	685b      	ldr	r3, [r3, #4]
 8006160:	685a      	ldr	r2, [r3, #4]
 8006162:	693b      	ldr	r3, [r7, #16]
 8006164:	605a      	str	r2, [r3, #4]
 8006166:	693b      	ldr	r3, [r7, #16]
 8006168:	685b      	ldr	r3, [r3, #4]
 800616a:	68db      	ldr	r3, [r3, #12]
 800616c:	4a09      	ldr	r2, [pc, #36]	@ (8006194 <vTaskSwitchContext+0xbc>)
 800616e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006170:	4b08      	ldr	r3, [pc, #32]	@ (8006194 <vTaskSwitchContext+0xbc>)
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	334c      	adds	r3, #76	@ 0x4c
 8006176:	4a08      	ldr	r2, [pc, #32]	@ (8006198 <vTaskSwitchContext+0xc0>)
 8006178:	6013      	str	r3, [r2, #0]
}
 800617a:	bf00      	nop
 800617c:	371c      	adds	r7, #28
 800617e:	46bd      	mov	sp, r7
 8006180:	bc80      	pop	{r7}
 8006182:	4770      	bx	lr
 8006184:	20000590 	.word	0x20000590
 8006188:	2000057c 	.word	0x2000057c
 800618c:	20000570 	.word	0x20000570
 8006190:	2000046c 	.word	0x2000046c
 8006194:	20000468 	.word	0x20000468
 8006198:	20000008 	.word	0x20000008

0800619c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b084      	sub	sp, #16
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
 80061a4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d10b      	bne.n	80061c4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80061ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061b0:	f383 8811 	msr	BASEPRI, r3
 80061b4:	f3bf 8f6f 	isb	sy
 80061b8:	f3bf 8f4f 	dsb	sy
 80061bc:	60fb      	str	r3, [r7, #12]
}
 80061be:	bf00      	nop
 80061c0:	bf00      	nop
 80061c2:	e7fd      	b.n	80061c0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80061c4:	4b07      	ldr	r3, [pc, #28]	@ (80061e4 <vTaskPlaceOnEventList+0x48>)
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	3318      	adds	r3, #24
 80061ca:	4619      	mov	r1, r3
 80061cc:	6878      	ldr	r0, [r7, #4]
 80061ce:	f7fe ffa5 	bl	800511c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80061d2:	2101      	movs	r1, #1
 80061d4:	6838      	ldr	r0, [r7, #0]
 80061d6:	f000 fa73 	bl	80066c0 <prvAddCurrentTaskToDelayedList>
}
 80061da:	bf00      	nop
 80061dc:	3710      	adds	r7, #16
 80061de:	46bd      	mov	sp, r7
 80061e0:	bd80      	pop	{r7, pc}
 80061e2:	bf00      	nop
 80061e4:	20000468 	.word	0x20000468

080061e8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b086      	sub	sp, #24
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	68db      	ldr	r3, [r3, #12]
 80061f4:	68db      	ldr	r3, [r3, #12]
 80061f6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80061f8:	693b      	ldr	r3, [r7, #16]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d10b      	bne.n	8006216 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80061fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006202:	f383 8811 	msr	BASEPRI, r3
 8006206:	f3bf 8f6f 	isb	sy
 800620a:	f3bf 8f4f 	dsb	sy
 800620e:	60fb      	str	r3, [r7, #12]
}
 8006210:	bf00      	nop
 8006212:	bf00      	nop
 8006214:	e7fd      	b.n	8006212 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006216:	693b      	ldr	r3, [r7, #16]
 8006218:	3318      	adds	r3, #24
 800621a:	4618      	mov	r0, r3
 800621c:	f7fe ffb6 	bl	800518c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006220:	4b1d      	ldr	r3, [pc, #116]	@ (8006298 <xTaskRemoveFromEventList+0xb0>)
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d11c      	bne.n	8006262 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006228:	693b      	ldr	r3, [r7, #16]
 800622a:	3304      	adds	r3, #4
 800622c:	4618      	mov	r0, r3
 800622e:	f7fe ffad 	bl	800518c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006232:	693b      	ldr	r3, [r7, #16]
 8006234:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006236:	2201      	movs	r2, #1
 8006238:	409a      	lsls	r2, r3
 800623a:	4b18      	ldr	r3, [pc, #96]	@ (800629c <xTaskRemoveFromEventList+0xb4>)
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	4313      	orrs	r3, r2
 8006240:	4a16      	ldr	r2, [pc, #88]	@ (800629c <xTaskRemoveFromEventList+0xb4>)
 8006242:	6013      	str	r3, [r2, #0]
 8006244:	693b      	ldr	r3, [r7, #16]
 8006246:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006248:	4613      	mov	r3, r2
 800624a:	009b      	lsls	r3, r3, #2
 800624c:	4413      	add	r3, r2
 800624e:	009b      	lsls	r3, r3, #2
 8006250:	4a13      	ldr	r2, [pc, #76]	@ (80062a0 <xTaskRemoveFromEventList+0xb8>)
 8006252:	441a      	add	r2, r3
 8006254:	693b      	ldr	r3, [r7, #16]
 8006256:	3304      	adds	r3, #4
 8006258:	4619      	mov	r1, r3
 800625a:	4610      	mov	r0, r2
 800625c:	f7fe ff3b 	bl	80050d6 <vListInsertEnd>
 8006260:	e005      	b.n	800626e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006262:	693b      	ldr	r3, [r7, #16]
 8006264:	3318      	adds	r3, #24
 8006266:	4619      	mov	r1, r3
 8006268:	480e      	ldr	r0, [pc, #56]	@ (80062a4 <xTaskRemoveFromEventList+0xbc>)
 800626a:	f7fe ff34 	bl	80050d6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800626e:	693b      	ldr	r3, [r7, #16]
 8006270:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006272:	4b0d      	ldr	r3, [pc, #52]	@ (80062a8 <xTaskRemoveFromEventList+0xc0>)
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006278:	429a      	cmp	r2, r3
 800627a:	d905      	bls.n	8006288 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800627c:	2301      	movs	r3, #1
 800627e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006280:	4b0a      	ldr	r3, [pc, #40]	@ (80062ac <xTaskRemoveFromEventList+0xc4>)
 8006282:	2201      	movs	r2, #1
 8006284:	601a      	str	r2, [r3, #0]
 8006286:	e001      	b.n	800628c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006288:	2300      	movs	r3, #0
 800628a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800628c:	697b      	ldr	r3, [r7, #20]
}
 800628e:	4618      	mov	r0, r3
 8006290:	3718      	adds	r7, #24
 8006292:	46bd      	mov	sp, r7
 8006294:	bd80      	pop	{r7, pc}
 8006296:	bf00      	nop
 8006298:	20000590 	.word	0x20000590
 800629c:	20000570 	.word	0x20000570
 80062a0:	2000046c 	.word	0x2000046c
 80062a4:	20000528 	.word	0x20000528
 80062a8:	20000468 	.word	0x20000468
 80062ac:	2000057c 	.word	0x2000057c

080062b0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80062b0:	b480      	push	{r7}
 80062b2:	b083      	sub	sp, #12
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80062b8:	4b06      	ldr	r3, [pc, #24]	@ (80062d4 <vTaskInternalSetTimeOutState+0x24>)
 80062ba:	681a      	ldr	r2, [r3, #0]
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80062c0:	4b05      	ldr	r3, [pc, #20]	@ (80062d8 <vTaskInternalSetTimeOutState+0x28>)
 80062c2:	681a      	ldr	r2, [r3, #0]
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	605a      	str	r2, [r3, #4]
}
 80062c8:	bf00      	nop
 80062ca:	370c      	adds	r7, #12
 80062cc:	46bd      	mov	sp, r7
 80062ce:	bc80      	pop	{r7}
 80062d0:	4770      	bx	lr
 80062d2:	bf00      	nop
 80062d4:	20000580 	.word	0x20000580
 80062d8:	2000056c 	.word	0x2000056c

080062dc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b088      	sub	sp, #32
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
 80062e4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d10b      	bne.n	8006304 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80062ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062f0:	f383 8811 	msr	BASEPRI, r3
 80062f4:	f3bf 8f6f 	isb	sy
 80062f8:	f3bf 8f4f 	dsb	sy
 80062fc:	613b      	str	r3, [r7, #16]
}
 80062fe:	bf00      	nop
 8006300:	bf00      	nop
 8006302:	e7fd      	b.n	8006300 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d10b      	bne.n	8006322 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800630a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800630e:	f383 8811 	msr	BASEPRI, r3
 8006312:	f3bf 8f6f 	isb	sy
 8006316:	f3bf 8f4f 	dsb	sy
 800631a:	60fb      	str	r3, [r7, #12]
}
 800631c:	bf00      	nop
 800631e:	bf00      	nop
 8006320:	e7fd      	b.n	800631e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8006322:	f000 fb23 	bl	800696c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006326:	4b1d      	ldr	r3, [pc, #116]	@ (800639c <xTaskCheckForTimeOut+0xc0>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	685b      	ldr	r3, [r3, #4]
 8006330:	69ba      	ldr	r2, [r7, #24]
 8006332:	1ad3      	subs	r3, r2, r3
 8006334:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800633e:	d102      	bne.n	8006346 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006340:	2300      	movs	r3, #0
 8006342:	61fb      	str	r3, [r7, #28]
 8006344:	e023      	b.n	800638e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681a      	ldr	r2, [r3, #0]
 800634a:	4b15      	ldr	r3, [pc, #84]	@ (80063a0 <xTaskCheckForTimeOut+0xc4>)
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	429a      	cmp	r2, r3
 8006350:	d007      	beq.n	8006362 <xTaskCheckForTimeOut+0x86>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	685b      	ldr	r3, [r3, #4]
 8006356:	69ba      	ldr	r2, [r7, #24]
 8006358:	429a      	cmp	r2, r3
 800635a:	d302      	bcc.n	8006362 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800635c:	2301      	movs	r3, #1
 800635e:	61fb      	str	r3, [r7, #28]
 8006360:	e015      	b.n	800638e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	697a      	ldr	r2, [r7, #20]
 8006368:	429a      	cmp	r2, r3
 800636a:	d20b      	bcs.n	8006384 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	681a      	ldr	r2, [r3, #0]
 8006370:	697b      	ldr	r3, [r7, #20]
 8006372:	1ad2      	subs	r2, r2, r3
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006378:	6878      	ldr	r0, [r7, #4]
 800637a:	f7ff ff99 	bl	80062b0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800637e:	2300      	movs	r3, #0
 8006380:	61fb      	str	r3, [r7, #28]
 8006382:	e004      	b.n	800638e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	2200      	movs	r2, #0
 8006388:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800638a:	2301      	movs	r3, #1
 800638c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800638e:	f000 fb1d 	bl	80069cc <vPortExitCritical>

	return xReturn;
 8006392:	69fb      	ldr	r3, [r7, #28]
}
 8006394:	4618      	mov	r0, r3
 8006396:	3720      	adds	r7, #32
 8006398:	46bd      	mov	sp, r7
 800639a:	bd80      	pop	{r7, pc}
 800639c:	2000056c 	.word	0x2000056c
 80063a0:	20000580 	.word	0x20000580

080063a4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80063a4:	b480      	push	{r7}
 80063a6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80063a8:	4b03      	ldr	r3, [pc, #12]	@ (80063b8 <vTaskMissedYield+0x14>)
 80063aa:	2201      	movs	r2, #1
 80063ac:	601a      	str	r2, [r3, #0]
}
 80063ae:	bf00      	nop
 80063b0:	46bd      	mov	sp, r7
 80063b2:	bc80      	pop	{r7}
 80063b4:	4770      	bx	lr
 80063b6:	bf00      	nop
 80063b8:	2000057c 	.word	0x2000057c

080063bc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b082      	sub	sp, #8
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80063c4:	f000 f852 	bl	800646c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80063c8:	4b06      	ldr	r3, [pc, #24]	@ (80063e4 <prvIdleTask+0x28>)
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	2b01      	cmp	r3, #1
 80063ce:	d9f9      	bls.n	80063c4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80063d0:	4b05      	ldr	r3, [pc, #20]	@ (80063e8 <prvIdleTask+0x2c>)
 80063d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80063d6:	601a      	str	r2, [r3, #0]
 80063d8:	f3bf 8f4f 	dsb	sy
 80063dc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80063e0:	e7f0      	b.n	80063c4 <prvIdleTask+0x8>
 80063e2:	bf00      	nop
 80063e4:	2000046c 	.word	0x2000046c
 80063e8:	e000ed04 	.word	0xe000ed04

080063ec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b082      	sub	sp, #8
 80063f0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80063f2:	2300      	movs	r3, #0
 80063f4:	607b      	str	r3, [r7, #4]
 80063f6:	e00c      	b.n	8006412 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80063f8:	687a      	ldr	r2, [r7, #4]
 80063fa:	4613      	mov	r3, r2
 80063fc:	009b      	lsls	r3, r3, #2
 80063fe:	4413      	add	r3, r2
 8006400:	009b      	lsls	r3, r3, #2
 8006402:	4a12      	ldr	r2, [pc, #72]	@ (800644c <prvInitialiseTaskLists+0x60>)
 8006404:	4413      	add	r3, r2
 8006406:	4618      	mov	r0, r3
 8006408:	f7fe fe3a 	bl	8005080 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	3301      	adds	r3, #1
 8006410:	607b      	str	r3, [r7, #4]
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2b06      	cmp	r3, #6
 8006416:	d9ef      	bls.n	80063f8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006418:	480d      	ldr	r0, [pc, #52]	@ (8006450 <prvInitialiseTaskLists+0x64>)
 800641a:	f7fe fe31 	bl	8005080 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800641e:	480d      	ldr	r0, [pc, #52]	@ (8006454 <prvInitialiseTaskLists+0x68>)
 8006420:	f7fe fe2e 	bl	8005080 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006424:	480c      	ldr	r0, [pc, #48]	@ (8006458 <prvInitialiseTaskLists+0x6c>)
 8006426:	f7fe fe2b 	bl	8005080 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800642a:	480c      	ldr	r0, [pc, #48]	@ (800645c <prvInitialiseTaskLists+0x70>)
 800642c:	f7fe fe28 	bl	8005080 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006430:	480b      	ldr	r0, [pc, #44]	@ (8006460 <prvInitialiseTaskLists+0x74>)
 8006432:	f7fe fe25 	bl	8005080 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006436:	4b0b      	ldr	r3, [pc, #44]	@ (8006464 <prvInitialiseTaskLists+0x78>)
 8006438:	4a05      	ldr	r2, [pc, #20]	@ (8006450 <prvInitialiseTaskLists+0x64>)
 800643a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800643c:	4b0a      	ldr	r3, [pc, #40]	@ (8006468 <prvInitialiseTaskLists+0x7c>)
 800643e:	4a05      	ldr	r2, [pc, #20]	@ (8006454 <prvInitialiseTaskLists+0x68>)
 8006440:	601a      	str	r2, [r3, #0]
}
 8006442:	bf00      	nop
 8006444:	3708      	adds	r7, #8
 8006446:	46bd      	mov	sp, r7
 8006448:	bd80      	pop	{r7, pc}
 800644a:	bf00      	nop
 800644c:	2000046c 	.word	0x2000046c
 8006450:	200004f8 	.word	0x200004f8
 8006454:	2000050c 	.word	0x2000050c
 8006458:	20000528 	.word	0x20000528
 800645c:	2000053c 	.word	0x2000053c
 8006460:	20000554 	.word	0x20000554
 8006464:	20000520 	.word	0x20000520
 8006468:	20000524 	.word	0x20000524

0800646c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b082      	sub	sp, #8
 8006470:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006472:	e019      	b.n	80064a8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006474:	f000 fa7a 	bl	800696c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006478:	4b10      	ldr	r3, [pc, #64]	@ (80064bc <prvCheckTasksWaitingTermination+0x50>)
 800647a:	68db      	ldr	r3, [r3, #12]
 800647c:	68db      	ldr	r3, [r3, #12]
 800647e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	3304      	adds	r3, #4
 8006484:	4618      	mov	r0, r3
 8006486:	f7fe fe81 	bl	800518c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800648a:	4b0d      	ldr	r3, [pc, #52]	@ (80064c0 <prvCheckTasksWaitingTermination+0x54>)
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	3b01      	subs	r3, #1
 8006490:	4a0b      	ldr	r2, [pc, #44]	@ (80064c0 <prvCheckTasksWaitingTermination+0x54>)
 8006492:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006494:	4b0b      	ldr	r3, [pc, #44]	@ (80064c4 <prvCheckTasksWaitingTermination+0x58>)
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	3b01      	subs	r3, #1
 800649a:	4a0a      	ldr	r2, [pc, #40]	@ (80064c4 <prvCheckTasksWaitingTermination+0x58>)
 800649c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800649e:	f000 fa95 	bl	80069cc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80064a2:	6878      	ldr	r0, [r7, #4]
 80064a4:	f000 f810 	bl	80064c8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80064a8:	4b06      	ldr	r3, [pc, #24]	@ (80064c4 <prvCheckTasksWaitingTermination+0x58>)
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d1e1      	bne.n	8006474 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80064b0:	bf00      	nop
 80064b2:	bf00      	nop
 80064b4:	3708      	adds	r7, #8
 80064b6:	46bd      	mov	sp, r7
 80064b8:	bd80      	pop	{r7, pc}
 80064ba:	bf00      	nop
 80064bc:	2000053c 	.word	0x2000053c
 80064c0:	20000568 	.word	0x20000568
 80064c4:	20000550 	.word	0x20000550

080064c8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b084      	sub	sp, #16
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	334c      	adds	r3, #76	@ 0x4c
 80064d4:	4618      	mov	r0, r3
 80064d6:	f000 fd3b 	bl	8006f50 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d108      	bne.n	80064f6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064e8:	4618      	mov	r0, r3
 80064ea:	f000 fbcf 	bl	8006c8c <vPortFree>
				vPortFree( pxTCB );
 80064ee:	6878      	ldr	r0, [r7, #4]
 80064f0:	f000 fbcc 	bl	8006c8c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80064f4:	e019      	b.n	800652a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80064fc:	2b01      	cmp	r3, #1
 80064fe:	d103      	bne.n	8006508 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006500:	6878      	ldr	r0, [r7, #4]
 8006502:	f000 fbc3 	bl	8006c8c <vPortFree>
	}
 8006506:	e010      	b.n	800652a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800650e:	2b02      	cmp	r3, #2
 8006510:	d00b      	beq.n	800652a <prvDeleteTCB+0x62>
	__asm volatile
 8006512:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006516:	f383 8811 	msr	BASEPRI, r3
 800651a:	f3bf 8f6f 	isb	sy
 800651e:	f3bf 8f4f 	dsb	sy
 8006522:	60fb      	str	r3, [r7, #12]
}
 8006524:	bf00      	nop
 8006526:	bf00      	nop
 8006528:	e7fd      	b.n	8006526 <prvDeleteTCB+0x5e>
	}
 800652a:	bf00      	nop
 800652c:	3710      	adds	r7, #16
 800652e:	46bd      	mov	sp, r7
 8006530:	bd80      	pop	{r7, pc}
	...

08006534 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006534:	b480      	push	{r7}
 8006536:	b083      	sub	sp, #12
 8006538:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800653a:	4b0c      	ldr	r3, [pc, #48]	@ (800656c <prvResetNextTaskUnblockTime+0x38>)
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d104      	bne.n	800654e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006544:	4b0a      	ldr	r3, [pc, #40]	@ (8006570 <prvResetNextTaskUnblockTime+0x3c>)
 8006546:	f04f 32ff 	mov.w	r2, #4294967295
 800654a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800654c:	e008      	b.n	8006560 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800654e:	4b07      	ldr	r3, [pc, #28]	@ (800656c <prvResetNextTaskUnblockTime+0x38>)
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	68db      	ldr	r3, [r3, #12]
 8006554:	68db      	ldr	r3, [r3, #12]
 8006556:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	685b      	ldr	r3, [r3, #4]
 800655c:	4a04      	ldr	r2, [pc, #16]	@ (8006570 <prvResetNextTaskUnblockTime+0x3c>)
 800655e:	6013      	str	r3, [r2, #0]
}
 8006560:	bf00      	nop
 8006562:	370c      	adds	r7, #12
 8006564:	46bd      	mov	sp, r7
 8006566:	bc80      	pop	{r7}
 8006568:	4770      	bx	lr
 800656a:	bf00      	nop
 800656c:	20000520 	.word	0x20000520
 8006570:	20000588 	.word	0x20000588

08006574 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006574:	b480      	push	{r7}
 8006576:	b083      	sub	sp, #12
 8006578:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800657a:	4b0b      	ldr	r3, [pc, #44]	@ (80065a8 <xTaskGetSchedulerState+0x34>)
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d102      	bne.n	8006588 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006582:	2301      	movs	r3, #1
 8006584:	607b      	str	r3, [r7, #4]
 8006586:	e008      	b.n	800659a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006588:	4b08      	ldr	r3, [pc, #32]	@ (80065ac <xTaskGetSchedulerState+0x38>)
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d102      	bne.n	8006596 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006590:	2302      	movs	r3, #2
 8006592:	607b      	str	r3, [r7, #4]
 8006594:	e001      	b.n	800659a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006596:	2300      	movs	r3, #0
 8006598:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800659a:	687b      	ldr	r3, [r7, #4]
	}
 800659c:	4618      	mov	r0, r3
 800659e:	370c      	adds	r7, #12
 80065a0:	46bd      	mov	sp, r7
 80065a2:	bc80      	pop	{r7}
 80065a4:	4770      	bx	lr
 80065a6:	bf00      	nop
 80065a8:	20000574 	.word	0x20000574
 80065ac:	20000590 	.word	0x20000590

080065b0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b086      	sub	sp, #24
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80065bc:	2300      	movs	r3, #0
 80065be:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d070      	beq.n	80066a8 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80065c6:	4b3b      	ldr	r3, [pc, #236]	@ (80066b4 <xTaskPriorityDisinherit+0x104>)
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	693a      	ldr	r2, [r7, #16]
 80065cc:	429a      	cmp	r2, r3
 80065ce:	d00b      	beq.n	80065e8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80065d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065d4:	f383 8811 	msr	BASEPRI, r3
 80065d8:	f3bf 8f6f 	isb	sy
 80065dc:	f3bf 8f4f 	dsb	sy
 80065e0:	60fb      	str	r3, [r7, #12]
}
 80065e2:	bf00      	nop
 80065e4:	bf00      	nop
 80065e6:	e7fd      	b.n	80065e4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80065e8:	693b      	ldr	r3, [r7, #16]
 80065ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d10b      	bne.n	8006608 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80065f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065f4:	f383 8811 	msr	BASEPRI, r3
 80065f8:	f3bf 8f6f 	isb	sy
 80065fc:	f3bf 8f4f 	dsb	sy
 8006600:	60bb      	str	r3, [r7, #8]
}
 8006602:	bf00      	nop
 8006604:	bf00      	nop
 8006606:	e7fd      	b.n	8006604 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8006608:	693b      	ldr	r3, [r7, #16]
 800660a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800660c:	1e5a      	subs	r2, r3, #1
 800660e:	693b      	ldr	r3, [r7, #16]
 8006610:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006612:	693b      	ldr	r3, [r7, #16]
 8006614:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006616:	693b      	ldr	r3, [r7, #16]
 8006618:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800661a:	429a      	cmp	r2, r3
 800661c:	d044      	beq.n	80066a8 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800661e:	693b      	ldr	r3, [r7, #16]
 8006620:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006622:	2b00      	cmp	r3, #0
 8006624:	d140      	bne.n	80066a8 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006626:	693b      	ldr	r3, [r7, #16]
 8006628:	3304      	adds	r3, #4
 800662a:	4618      	mov	r0, r3
 800662c:	f7fe fdae 	bl	800518c <uxListRemove>
 8006630:	4603      	mov	r3, r0
 8006632:	2b00      	cmp	r3, #0
 8006634:	d115      	bne.n	8006662 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006636:	693b      	ldr	r3, [r7, #16]
 8006638:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800663a:	491f      	ldr	r1, [pc, #124]	@ (80066b8 <xTaskPriorityDisinherit+0x108>)
 800663c:	4613      	mov	r3, r2
 800663e:	009b      	lsls	r3, r3, #2
 8006640:	4413      	add	r3, r2
 8006642:	009b      	lsls	r3, r3, #2
 8006644:	440b      	add	r3, r1
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d10a      	bne.n	8006662 <xTaskPriorityDisinherit+0xb2>
 800664c:	693b      	ldr	r3, [r7, #16]
 800664e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006650:	2201      	movs	r2, #1
 8006652:	fa02 f303 	lsl.w	r3, r2, r3
 8006656:	43da      	mvns	r2, r3
 8006658:	4b18      	ldr	r3, [pc, #96]	@ (80066bc <xTaskPriorityDisinherit+0x10c>)
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	4013      	ands	r3, r2
 800665e:	4a17      	ldr	r2, [pc, #92]	@ (80066bc <xTaskPriorityDisinherit+0x10c>)
 8006660:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006662:	693b      	ldr	r3, [r7, #16]
 8006664:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006666:	693b      	ldr	r3, [r7, #16]
 8006668:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800666a:	693b      	ldr	r3, [r7, #16]
 800666c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800666e:	f1c3 0207 	rsb	r2, r3, #7
 8006672:	693b      	ldr	r3, [r7, #16]
 8006674:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006676:	693b      	ldr	r3, [r7, #16]
 8006678:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800667a:	2201      	movs	r2, #1
 800667c:	409a      	lsls	r2, r3
 800667e:	4b0f      	ldr	r3, [pc, #60]	@ (80066bc <xTaskPriorityDisinherit+0x10c>)
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	4313      	orrs	r3, r2
 8006684:	4a0d      	ldr	r2, [pc, #52]	@ (80066bc <xTaskPriorityDisinherit+0x10c>)
 8006686:	6013      	str	r3, [r2, #0]
 8006688:	693b      	ldr	r3, [r7, #16]
 800668a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800668c:	4613      	mov	r3, r2
 800668e:	009b      	lsls	r3, r3, #2
 8006690:	4413      	add	r3, r2
 8006692:	009b      	lsls	r3, r3, #2
 8006694:	4a08      	ldr	r2, [pc, #32]	@ (80066b8 <xTaskPriorityDisinherit+0x108>)
 8006696:	441a      	add	r2, r3
 8006698:	693b      	ldr	r3, [r7, #16]
 800669a:	3304      	adds	r3, #4
 800669c:	4619      	mov	r1, r3
 800669e:	4610      	mov	r0, r2
 80066a0:	f7fe fd19 	bl	80050d6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80066a4:	2301      	movs	r3, #1
 80066a6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80066a8:	697b      	ldr	r3, [r7, #20]
	}
 80066aa:	4618      	mov	r0, r3
 80066ac:	3718      	adds	r7, #24
 80066ae:	46bd      	mov	sp, r7
 80066b0:	bd80      	pop	{r7, pc}
 80066b2:	bf00      	nop
 80066b4:	20000468 	.word	0x20000468
 80066b8:	2000046c 	.word	0x2000046c
 80066bc:	20000570 	.word	0x20000570

080066c0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b084      	sub	sp, #16
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
 80066c8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80066ca:	4b29      	ldr	r3, [pc, #164]	@ (8006770 <prvAddCurrentTaskToDelayedList+0xb0>)
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80066d0:	4b28      	ldr	r3, [pc, #160]	@ (8006774 <prvAddCurrentTaskToDelayedList+0xb4>)
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	3304      	adds	r3, #4
 80066d6:	4618      	mov	r0, r3
 80066d8:	f7fe fd58 	bl	800518c <uxListRemove>
 80066dc:	4603      	mov	r3, r0
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d10b      	bne.n	80066fa <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80066e2:	4b24      	ldr	r3, [pc, #144]	@ (8006774 <prvAddCurrentTaskToDelayedList+0xb4>)
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066e8:	2201      	movs	r2, #1
 80066ea:	fa02 f303 	lsl.w	r3, r2, r3
 80066ee:	43da      	mvns	r2, r3
 80066f0:	4b21      	ldr	r3, [pc, #132]	@ (8006778 <prvAddCurrentTaskToDelayedList+0xb8>)
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	4013      	ands	r3, r2
 80066f6:	4a20      	ldr	r2, [pc, #128]	@ (8006778 <prvAddCurrentTaskToDelayedList+0xb8>)
 80066f8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006700:	d10a      	bne.n	8006718 <prvAddCurrentTaskToDelayedList+0x58>
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d007      	beq.n	8006718 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006708:	4b1a      	ldr	r3, [pc, #104]	@ (8006774 <prvAddCurrentTaskToDelayedList+0xb4>)
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	3304      	adds	r3, #4
 800670e:	4619      	mov	r1, r3
 8006710:	481a      	ldr	r0, [pc, #104]	@ (800677c <prvAddCurrentTaskToDelayedList+0xbc>)
 8006712:	f7fe fce0 	bl	80050d6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006716:	e026      	b.n	8006766 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006718:	68fa      	ldr	r2, [r7, #12]
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	4413      	add	r3, r2
 800671e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006720:	4b14      	ldr	r3, [pc, #80]	@ (8006774 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	68ba      	ldr	r2, [r7, #8]
 8006726:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006728:	68ba      	ldr	r2, [r7, #8]
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	429a      	cmp	r2, r3
 800672e:	d209      	bcs.n	8006744 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006730:	4b13      	ldr	r3, [pc, #76]	@ (8006780 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006732:	681a      	ldr	r2, [r3, #0]
 8006734:	4b0f      	ldr	r3, [pc, #60]	@ (8006774 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	3304      	adds	r3, #4
 800673a:	4619      	mov	r1, r3
 800673c:	4610      	mov	r0, r2
 800673e:	f7fe fced 	bl	800511c <vListInsert>
}
 8006742:	e010      	b.n	8006766 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006744:	4b0f      	ldr	r3, [pc, #60]	@ (8006784 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006746:	681a      	ldr	r2, [r3, #0]
 8006748:	4b0a      	ldr	r3, [pc, #40]	@ (8006774 <prvAddCurrentTaskToDelayedList+0xb4>)
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	3304      	adds	r3, #4
 800674e:	4619      	mov	r1, r3
 8006750:	4610      	mov	r0, r2
 8006752:	f7fe fce3 	bl	800511c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006756:	4b0c      	ldr	r3, [pc, #48]	@ (8006788 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	68ba      	ldr	r2, [r7, #8]
 800675c:	429a      	cmp	r2, r3
 800675e:	d202      	bcs.n	8006766 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006760:	4a09      	ldr	r2, [pc, #36]	@ (8006788 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006762:	68bb      	ldr	r3, [r7, #8]
 8006764:	6013      	str	r3, [r2, #0]
}
 8006766:	bf00      	nop
 8006768:	3710      	adds	r7, #16
 800676a:	46bd      	mov	sp, r7
 800676c:	bd80      	pop	{r7, pc}
 800676e:	bf00      	nop
 8006770:	2000056c 	.word	0x2000056c
 8006774:	20000468 	.word	0x20000468
 8006778:	20000570 	.word	0x20000570
 800677c:	20000554 	.word	0x20000554
 8006780:	20000524 	.word	0x20000524
 8006784:	20000520 	.word	0x20000520
 8006788:	20000588 	.word	0x20000588

0800678c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800678c:	b480      	push	{r7}
 800678e:	b085      	sub	sp, #20
 8006790:	af00      	add	r7, sp, #0
 8006792:	60f8      	str	r0, [r7, #12]
 8006794:	60b9      	str	r1, [r7, #8]
 8006796:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	3b04      	subs	r3, #4
 800679c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80067a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	3b04      	subs	r3, #4
 80067aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80067ac:	68bb      	ldr	r3, [r7, #8]
 80067ae:	f023 0201 	bic.w	r2, r3, #1
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	3b04      	subs	r3, #4
 80067ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80067bc:	4a08      	ldr	r2, [pc, #32]	@ (80067e0 <pxPortInitialiseStack+0x54>)
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	3b14      	subs	r3, #20
 80067c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80067c8:	687a      	ldr	r2, [r7, #4]
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	3b20      	subs	r3, #32
 80067d2:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80067d4:	68fb      	ldr	r3, [r7, #12]
}
 80067d6:	4618      	mov	r0, r3
 80067d8:	3714      	adds	r7, #20
 80067da:	46bd      	mov	sp, r7
 80067dc:	bc80      	pop	{r7}
 80067de:	4770      	bx	lr
 80067e0:	080067e5 	.word	0x080067e5

080067e4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80067e4:	b480      	push	{r7}
 80067e6:	b085      	sub	sp, #20
 80067e8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80067ea:	2300      	movs	r3, #0
 80067ec:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80067ee:	4b12      	ldr	r3, [pc, #72]	@ (8006838 <prvTaskExitError+0x54>)
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067f6:	d00b      	beq.n	8006810 <prvTaskExitError+0x2c>
	__asm volatile
 80067f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067fc:	f383 8811 	msr	BASEPRI, r3
 8006800:	f3bf 8f6f 	isb	sy
 8006804:	f3bf 8f4f 	dsb	sy
 8006808:	60fb      	str	r3, [r7, #12]
}
 800680a:	bf00      	nop
 800680c:	bf00      	nop
 800680e:	e7fd      	b.n	800680c <prvTaskExitError+0x28>
	__asm volatile
 8006810:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006814:	f383 8811 	msr	BASEPRI, r3
 8006818:	f3bf 8f6f 	isb	sy
 800681c:	f3bf 8f4f 	dsb	sy
 8006820:	60bb      	str	r3, [r7, #8]
}
 8006822:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006824:	bf00      	nop
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d0fc      	beq.n	8006826 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800682c:	bf00      	nop
 800682e:	bf00      	nop
 8006830:	3714      	adds	r7, #20
 8006832:	46bd      	mov	sp, r7
 8006834:	bc80      	pop	{r7}
 8006836:	4770      	bx	lr
 8006838:	20000004 	.word	0x20000004
 800683c:	00000000 	.word	0x00000000

08006840 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006840:	4b07      	ldr	r3, [pc, #28]	@ (8006860 <pxCurrentTCBConst2>)
 8006842:	6819      	ldr	r1, [r3, #0]
 8006844:	6808      	ldr	r0, [r1, #0]
 8006846:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800684a:	f380 8809 	msr	PSP, r0
 800684e:	f3bf 8f6f 	isb	sy
 8006852:	f04f 0000 	mov.w	r0, #0
 8006856:	f380 8811 	msr	BASEPRI, r0
 800685a:	f04e 0e0d 	orr.w	lr, lr, #13
 800685e:	4770      	bx	lr

08006860 <pxCurrentTCBConst2>:
 8006860:	20000468 	.word	0x20000468
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006864:	bf00      	nop
 8006866:	bf00      	nop

08006868 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8006868:	4806      	ldr	r0, [pc, #24]	@ (8006884 <prvPortStartFirstTask+0x1c>)
 800686a:	6800      	ldr	r0, [r0, #0]
 800686c:	6800      	ldr	r0, [r0, #0]
 800686e:	f380 8808 	msr	MSP, r0
 8006872:	b662      	cpsie	i
 8006874:	b661      	cpsie	f
 8006876:	f3bf 8f4f 	dsb	sy
 800687a:	f3bf 8f6f 	isb	sy
 800687e:	df00      	svc	0
 8006880:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006882:	bf00      	nop
 8006884:	e000ed08 	.word	0xe000ed08

08006888 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b084      	sub	sp, #16
 800688c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800688e:	4b32      	ldr	r3, [pc, #200]	@ (8006958 <xPortStartScheduler+0xd0>)
 8006890:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	781b      	ldrb	r3, [r3, #0]
 8006896:	b2db      	uxtb	r3, r3
 8006898:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	22ff      	movs	r2, #255	@ 0xff
 800689e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	781b      	ldrb	r3, [r3, #0]
 80068a4:	b2db      	uxtb	r3, r3
 80068a6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80068a8:	78fb      	ldrb	r3, [r7, #3]
 80068aa:	b2db      	uxtb	r3, r3
 80068ac:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80068b0:	b2da      	uxtb	r2, r3
 80068b2:	4b2a      	ldr	r3, [pc, #168]	@ (800695c <xPortStartScheduler+0xd4>)
 80068b4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80068b6:	4b2a      	ldr	r3, [pc, #168]	@ (8006960 <xPortStartScheduler+0xd8>)
 80068b8:	2207      	movs	r2, #7
 80068ba:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80068bc:	e009      	b.n	80068d2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80068be:	4b28      	ldr	r3, [pc, #160]	@ (8006960 <xPortStartScheduler+0xd8>)
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	3b01      	subs	r3, #1
 80068c4:	4a26      	ldr	r2, [pc, #152]	@ (8006960 <xPortStartScheduler+0xd8>)
 80068c6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80068c8:	78fb      	ldrb	r3, [r7, #3]
 80068ca:	b2db      	uxtb	r3, r3
 80068cc:	005b      	lsls	r3, r3, #1
 80068ce:	b2db      	uxtb	r3, r3
 80068d0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80068d2:	78fb      	ldrb	r3, [r7, #3]
 80068d4:	b2db      	uxtb	r3, r3
 80068d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80068da:	2b80      	cmp	r3, #128	@ 0x80
 80068dc:	d0ef      	beq.n	80068be <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80068de:	4b20      	ldr	r3, [pc, #128]	@ (8006960 <xPortStartScheduler+0xd8>)
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f1c3 0307 	rsb	r3, r3, #7
 80068e6:	2b04      	cmp	r3, #4
 80068e8:	d00b      	beq.n	8006902 <xPortStartScheduler+0x7a>
	__asm volatile
 80068ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068ee:	f383 8811 	msr	BASEPRI, r3
 80068f2:	f3bf 8f6f 	isb	sy
 80068f6:	f3bf 8f4f 	dsb	sy
 80068fa:	60bb      	str	r3, [r7, #8]
}
 80068fc:	bf00      	nop
 80068fe:	bf00      	nop
 8006900:	e7fd      	b.n	80068fe <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006902:	4b17      	ldr	r3, [pc, #92]	@ (8006960 <xPortStartScheduler+0xd8>)
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	021b      	lsls	r3, r3, #8
 8006908:	4a15      	ldr	r2, [pc, #84]	@ (8006960 <xPortStartScheduler+0xd8>)
 800690a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800690c:	4b14      	ldr	r3, [pc, #80]	@ (8006960 <xPortStartScheduler+0xd8>)
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006914:	4a12      	ldr	r2, [pc, #72]	@ (8006960 <xPortStartScheduler+0xd8>)
 8006916:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	b2da      	uxtb	r2, r3
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006920:	4b10      	ldr	r3, [pc, #64]	@ (8006964 <xPortStartScheduler+0xdc>)
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	4a0f      	ldr	r2, [pc, #60]	@ (8006964 <xPortStartScheduler+0xdc>)
 8006926:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800692a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800692c:	4b0d      	ldr	r3, [pc, #52]	@ (8006964 <xPortStartScheduler+0xdc>)
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	4a0c      	ldr	r2, [pc, #48]	@ (8006964 <xPortStartScheduler+0xdc>)
 8006932:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006936:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006938:	f000 f8b8 	bl	8006aac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800693c:	4b0a      	ldr	r3, [pc, #40]	@ (8006968 <xPortStartScheduler+0xe0>)
 800693e:	2200      	movs	r2, #0
 8006940:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006942:	f7ff ff91 	bl	8006868 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006946:	f7ff fbc7 	bl	80060d8 <vTaskSwitchContext>
	prvTaskExitError();
 800694a:	f7ff ff4b 	bl	80067e4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800694e:	2300      	movs	r3, #0
}
 8006950:	4618      	mov	r0, r3
 8006952:	3710      	adds	r7, #16
 8006954:	46bd      	mov	sp, r7
 8006956:	bd80      	pop	{r7, pc}
 8006958:	e000e400 	.word	0xe000e400
 800695c:	20000594 	.word	0x20000594
 8006960:	20000598 	.word	0x20000598
 8006964:	e000ed20 	.word	0xe000ed20
 8006968:	20000004 	.word	0x20000004

0800696c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800696c:	b480      	push	{r7}
 800696e:	b083      	sub	sp, #12
 8006970:	af00      	add	r7, sp, #0
	__asm volatile
 8006972:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006976:	f383 8811 	msr	BASEPRI, r3
 800697a:	f3bf 8f6f 	isb	sy
 800697e:	f3bf 8f4f 	dsb	sy
 8006982:	607b      	str	r3, [r7, #4]
}
 8006984:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006986:	4b0f      	ldr	r3, [pc, #60]	@ (80069c4 <vPortEnterCritical+0x58>)
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	3301      	adds	r3, #1
 800698c:	4a0d      	ldr	r2, [pc, #52]	@ (80069c4 <vPortEnterCritical+0x58>)
 800698e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006990:	4b0c      	ldr	r3, [pc, #48]	@ (80069c4 <vPortEnterCritical+0x58>)
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	2b01      	cmp	r3, #1
 8006996:	d110      	bne.n	80069ba <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006998:	4b0b      	ldr	r3, [pc, #44]	@ (80069c8 <vPortEnterCritical+0x5c>)
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	b2db      	uxtb	r3, r3
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d00b      	beq.n	80069ba <vPortEnterCritical+0x4e>
	__asm volatile
 80069a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069a6:	f383 8811 	msr	BASEPRI, r3
 80069aa:	f3bf 8f6f 	isb	sy
 80069ae:	f3bf 8f4f 	dsb	sy
 80069b2:	603b      	str	r3, [r7, #0]
}
 80069b4:	bf00      	nop
 80069b6:	bf00      	nop
 80069b8:	e7fd      	b.n	80069b6 <vPortEnterCritical+0x4a>
	}
}
 80069ba:	bf00      	nop
 80069bc:	370c      	adds	r7, #12
 80069be:	46bd      	mov	sp, r7
 80069c0:	bc80      	pop	{r7}
 80069c2:	4770      	bx	lr
 80069c4:	20000004 	.word	0x20000004
 80069c8:	e000ed04 	.word	0xe000ed04

080069cc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80069cc:	b480      	push	{r7}
 80069ce:	b083      	sub	sp, #12
 80069d0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80069d2:	4b12      	ldr	r3, [pc, #72]	@ (8006a1c <vPortExitCritical+0x50>)
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d10b      	bne.n	80069f2 <vPortExitCritical+0x26>
	__asm volatile
 80069da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069de:	f383 8811 	msr	BASEPRI, r3
 80069e2:	f3bf 8f6f 	isb	sy
 80069e6:	f3bf 8f4f 	dsb	sy
 80069ea:	607b      	str	r3, [r7, #4]
}
 80069ec:	bf00      	nop
 80069ee:	bf00      	nop
 80069f0:	e7fd      	b.n	80069ee <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80069f2:	4b0a      	ldr	r3, [pc, #40]	@ (8006a1c <vPortExitCritical+0x50>)
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	3b01      	subs	r3, #1
 80069f8:	4a08      	ldr	r2, [pc, #32]	@ (8006a1c <vPortExitCritical+0x50>)
 80069fa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80069fc:	4b07      	ldr	r3, [pc, #28]	@ (8006a1c <vPortExitCritical+0x50>)
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d105      	bne.n	8006a10 <vPortExitCritical+0x44>
 8006a04:	2300      	movs	r3, #0
 8006a06:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006a0e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006a10:	bf00      	nop
 8006a12:	370c      	adds	r7, #12
 8006a14:	46bd      	mov	sp, r7
 8006a16:	bc80      	pop	{r7}
 8006a18:	4770      	bx	lr
 8006a1a:	bf00      	nop
 8006a1c:	20000004 	.word	0x20000004

08006a20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006a20:	f3ef 8009 	mrs	r0, PSP
 8006a24:	f3bf 8f6f 	isb	sy
 8006a28:	4b0d      	ldr	r3, [pc, #52]	@ (8006a60 <pxCurrentTCBConst>)
 8006a2a:	681a      	ldr	r2, [r3, #0]
 8006a2c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006a30:	6010      	str	r0, [r2, #0]
 8006a32:	e92d 4008 	stmdb	sp!, {r3, lr}
 8006a36:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006a3a:	f380 8811 	msr	BASEPRI, r0
 8006a3e:	f7ff fb4b 	bl	80060d8 <vTaskSwitchContext>
 8006a42:	f04f 0000 	mov.w	r0, #0
 8006a46:	f380 8811 	msr	BASEPRI, r0
 8006a4a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8006a4e:	6819      	ldr	r1, [r3, #0]
 8006a50:	6808      	ldr	r0, [r1, #0]
 8006a52:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006a56:	f380 8809 	msr	PSP, r0
 8006a5a:	f3bf 8f6f 	isb	sy
 8006a5e:	4770      	bx	lr

08006a60 <pxCurrentTCBConst>:
 8006a60:	20000468 	.word	0x20000468
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006a64:	bf00      	nop
 8006a66:	bf00      	nop

08006a68 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b082      	sub	sp, #8
 8006a6c:	af00      	add	r7, sp, #0
	__asm volatile
 8006a6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a72:	f383 8811 	msr	BASEPRI, r3
 8006a76:	f3bf 8f6f 	isb	sy
 8006a7a:	f3bf 8f4f 	dsb	sy
 8006a7e:	607b      	str	r3, [r7, #4]
}
 8006a80:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006a82:	f7ff fa6f 	bl	8005f64 <xTaskIncrementTick>
 8006a86:	4603      	mov	r3, r0
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d003      	beq.n	8006a94 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006a8c:	4b06      	ldr	r3, [pc, #24]	@ (8006aa8 <SysTick_Handler+0x40>)
 8006a8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006a92:	601a      	str	r2, [r3, #0]
 8006a94:	2300      	movs	r3, #0
 8006a96:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	f383 8811 	msr	BASEPRI, r3
}
 8006a9e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006aa0:	bf00      	nop
 8006aa2:	3708      	adds	r7, #8
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	bd80      	pop	{r7, pc}
 8006aa8:	e000ed04 	.word	0xe000ed04

08006aac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006aac:	b480      	push	{r7}
 8006aae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006ab0:	4b0a      	ldr	r3, [pc, #40]	@ (8006adc <vPortSetupTimerInterrupt+0x30>)
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006ab6:	4b0a      	ldr	r3, [pc, #40]	@ (8006ae0 <vPortSetupTimerInterrupt+0x34>)
 8006ab8:	2200      	movs	r2, #0
 8006aba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006abc:	4b09      	ldr	r3, [pc, #36]	@ (8006ae4 <vPortSetupTimerInterrupt+0x38>)
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	4a09      	ldr	r2, [pc, #36]	@ (8006ae8 <vPortSetupTimerInterrupt+0x3c>)
 8006ac2:	fba2 2303 	umull	r2, r3, r2, r3
 8006ac6:	099b      	lsrs	r3, r3, #6
 8006ac8:	4a08      	ldr	r2, [pc, #32]	@ (8006aec <vPortSetupTimerInterrupt+0x40>)
 8006aca:	3b01      	subs	r3, #1
 8006acc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006ace:	4b03      	ldr	r3, [pc, #12]	@ (8006adc <vPortSetupTimerInterrupt+0x30>)
 8006ad0:	2207      	movs	r2, #7
 8006ad2:	601a      	str	r2, [r3, #0]
}
 8006ad4:	bf00      	nop
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	bc80      	pop	{r7}
 8006ada:	4770      	bx	lr
 8006adc:	e000e010 	.word	0xe000e010
 8006ae0:	e000e018 	.word	0xe000e018
 8006ae4:	20000000 	.word	0x20000000
 8006ae8:	10624dd3 	.word	0x10624dd3
 8006aec:	e000e014 	.word	0xe000e014

08006af0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b08a      	sub	sp, #40	@ 0x28
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006af8:	2300      	movs	r3, #0
 8006afa:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006afc:	f7ff f978 	bl	8005df0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006b00:	4b5c      	ldr	r3, [pc, #368]	@ (8006c74 <pvPortMalloc+0x184>)
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d101      	bne.n	8006b0c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006b08:	f000 f924 	bl	8006d54 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006b0c:	4b5a      	ldr	r3, [pc, #360]	@ (8006c78 <pvPortMalloc+0x188>)
 8006b0e:	681a      	ldr	r2, [r3, #0]
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	4013      	ands	r3, r2
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	f040 8095 	bne.w	8006c44 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d01e      	beq.n	8006b5e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8006b20:	2208      	movs	r2, #8
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	4413      	add	r3, r2
 8006b26:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	f003 0307 	and.w	r3, r3, #7
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d015      	beq.n	8006b5e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	f023 0307 	bic.w	r3, r3, #7
 8006b38:	3308      	adds	r3, #8
 8006b3a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	f003 0307 	and.w	r3, r3, #7
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d00b      	beq.n	8006b5e <pvPortMalloc+0x6e>
	__asm volatile
 8006b46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b4a:	f383 8811 	msr	BASEPRI, r3
 8006b4e:	f3bf 8f6f 	isb	sy
 8006b52:	f3bf 8f4f 	dsb	sy
 8006b56:	617b      	str	r3, [r7, #20]
}
 8006b58:	bf00      	nop
 8006b5a:	bf00      	nop
 8006b5c:	e7fd      	b.n	8006b5a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d06f      	beq.n	8006c44 <pvPortMalloc+0x154>
 8006b64:	4b45      	ldr	r3, [pc, #276]	@ (8006c7c <pvPortMalloc+0x18c>)
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	687a      	ldr	r2, [r7, #4]
 8006b6a:	429a      	cmp	r2, r3
 8006b6c:	d86a      	bhi.n	8006c44 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006b6e:	4b44      	ldr	r3, [pc, #272]	@ (8006c80 <pvPortMalloc+0x190>)
 8006b70:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006b72:	4b43      	ldr	r3, [pc, #268]	@ (8006c80 <pvPortMalloc+0x190>)
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006b78:	e004      	b.n	8006b84 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8006b7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b7c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006b7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006b84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b86:	685b      	ldr	r3, [r3, #4]
 8006b88:	687a      	ldr	r2, [r7, #4]
 8006b8a:	429a      	cmp	r2, r3
 8006b8c:	d903      	bls.n	8006b96 <pvPortMalloc+0xa6>
 8006b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d1f1      	bne.n	8006b7a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006b96:	4b37      	ldr	r3, [pc, #220]	@ (8006c74 <pvPortMalloc+0x184>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b9c:	429a      	cmp	r2, r3
 8006b9e:	d051      	beq.n	8006c44 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006ba0:	6a3b      	ldr	r3, [r7, #32]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	2208      	movs	r2, #8
 8006ba6:	4413      	add	r3, r2
 8006ba8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006baa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bac:	681a      	ldr	r2, [r3, #0]
 8006bae:	6a3b      	ldr	r3, [r7, #32]
 8006bb0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006bb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bb4:	685a      	ldr	r2, [r3, #4]
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	1ad2      	subs	r2, r2, r3
 8006bba:	2308      	movs	r3, #8
 8006bbc:	005b      	lsls	r3, r3, #1
 8006bbe:	429a      	cmp	r2, r3
 8006bc0:	d920      	bls.n	8006c04 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006bc2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	4413      	add	r3, r2
 8006bc8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006bca:	69bb      	ldr	r3, [r7, #24]
 8006bcc:	f003 0307 	and.w	r3, r3, #7
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d00b      	beq.n	8006bec <pvPortMalloc+0xfc>
	__asm volatile
 8006bd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bd8:	f383 8811 	msr	BASEPRI, r3
 8006bdc:	f3bf 8f6f 	isb	sy
 8006be0:	f3bf 8f4f 	dsb	sy
 8006be4:	613b      	str	r3, [r7, #16]
}
 8006be6:	bf00      	nop
 8006be8:	bf00      	nop
 8006bea:	e7fd      	b.n	8006be8 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006bec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bee:	685a      	ldr	r2, [r3, #4]
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	1ad2      	subs	r2, r2, r3
 8006bf4:	69bb      	ldr	r3, [r7, #24]
 8006bf6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006bf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bfa:	687a      	ldr	r2, [r7, #4]
 8006bfc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006bfe:	69b8      	ldr	r0, [r7, #24]
 8006c00:	f000 f90a 	bl	8006e18 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006c04:	4b1d      	ldr	r3, [pc, #116]	@ (8006c7c <pvPortMalloc+0x18c>)
 8006c06:	681a      	ldr	r2, [r3, #0]
 8006c08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c0a:	685b      	ldr	r3, [r3, #4]
 8006c0c:	1ad3      	subs	r3, r2, r3
 8006c0e:	4a1b      	ldr	r2, [pc, #108]	@ (8006c7c <pvPortMalloc+0x18c>)
 8006c10:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006c12:	4b1a      	ldr	r3, [pc, #104]	@ (8006c7c <pvPortMalloc+0x18c>)
 8006c14:	681a      	ldr	r2, [r3, #0]
 8006c16:	4b1b      	ldr	r3, [pc, #108]	@ (8006c84 <pvPortMalloc+0x194>)
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	429a      	cmp	r2, r3
 8006c1c:	d203      	bcs.n	8006c26 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006c1e:	4b17      	ldr	r3, [pc, #92]	@ (8006c7c <pvPortMalloc+0x18c>)
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	4a18      	ldr	r2, [pc, #96]	@ (8006c84 <pvPortMalloc+0x194>)
 8006c24:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c28:	685a      	ldr	r2, [r3, #4]
 8006c2a:	4b13      	ldr	r3, [pc, #76]	@ (8006c78 <pvPortMalloc+0x188>)
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	431a      	orrs	r2, r3
 8006c30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c32:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006c34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c36:	2200      	movs	r2, #0
 8006c38:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006c3a:	4b13      	ldr	r3, [pc, #76]	@ (8006c88 <pvPortMalloc+0x198>)
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	3301      	adds	r3, #1
 8006c40:	4a11      	ldr	r2, [pc, #68]	@ (8006c88 <pvPortMalloc+0x198>)
 8006c42:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006c44:	f7ff f8e2 	bl	8005e0c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006c48:	69fb      	ldr	r3, [r7, #28]
 8006c4a:	f003 0307 	and.w	r3, r3, #7
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d00b      	beq.n	8006c6a <pvPortMalloc+0x17a>
	__asm volatile
 8006c52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c56:	f383 8811 	msr	BASEPRI, r3
 8006c5a:	f3bf 8f6f 	isb	sy
 8006c5e:	f3bf 8f4f 	dsb	sy
 8006c62:	60fb      	str	r3, [r7, #12]
}
 8006c64:	bf00      	nop
 8006c66:	bf00      	nop
 8006c68:	e7fd      	b.n	8006c66 <pvPortMalloc+0x176>
	return pvReturn;
 8006c6a:	69fb      	ldr	r3, [r7, #28]
}
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	3728      	adds	r7, #40	@ 0x28
 8006c70:	46bd      	mov	sp, r7
 8006c72:	bd80      	pop	{r7, pc}
 8006c74:	20002da4 	.word	0x20002da4
 8006c78:	20002db8 	.word	0x20002db8
 8006c7c:	20002da8 	.word	0x20002da8
 8006c80:	20002d9c 	.word	0x20002d9c
 8006c84:	20002dac 	.word	0x20002dac
 8006c88:	20002db0 	.word	0x20002db0

08006c8c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b086      	sub	sp, #24
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d04f      	beq.n	8006d3e <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006c9e:	2308      	movs	r3, #8
 8006ca0:	425b      	negs	r3, r3
 8006ca2:	697a      	ldr	r2, [r7, #20]
 8006ca4:	4413      	add	r3, r2
 8006ca6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006ca8:	697b      	ldr	r3, [r7, #20]
 8006caa:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006cac:	693b      	ldr	r3, [r7, #16]
 8006cae:	685a      	ldr	r2, [r3, #4]
 8006cb0:	4b25      	ldr	r3, [pc, #148]	@ (8006d48 <vPortFree+0xbc>)
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	4013      	ands	r3, r2
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d10b      	bne.n	8006cd2 <vPortFree+0x46>
	__asm volatile
 8006cba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cbe:	f383 8811 	msr	BASEPRI, r3
 8006cc2:	f3bf 8f6f 	isb	sy
 8006cc6:	f3bf 8f4f 	dsb	sy
 8006cca:	60fb      	str	r3, [r7, #12]
}
 8006ccc:	bf00      	nop
 8006cce:	bf00      	nop
 8006cd0:	e7fd      	b.n	8006cce <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006cd2:	693b      	ldr	r3, [r7, #16]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d00b      	beq.n	8006cf2 <vPortFree+0x66>
	__asm volatile
 8006cda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cde:	f383 8811 	msr	BASEPRI, r3
 8006ce2:	f3bf 8f6f 	isb	sy
 8006ce6:	f3bf 8f4f 	dsb	sy
 8006cea:	60bb      	str	r3, [r7, #8]
}
 8006cec:	bf00      	nop
 8006cee:	bf00      	nop
 8006cf0:	e7fd      	b.n	8006cee <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006cf2:	693b      	ldr	r3, [r7, #16]
 8006cf4:	685a      	ldr	r2, [r3, #4]
 8006cf6:	4b14      	ldr	r3, [pc, #80]	@ (8006d48 <vPortFree+0xbc>)
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	4013      	ands	r3, r2
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d01e      	beq.n	8006d3e <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006d00:	693b      	ldr	r3, [r7, #16]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d11a      	bne.n	8006d3e <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006d08:	693b      	ldr	r3, [r7, #16]
 8006d0a:	685a      	ldr	r2, [r3, #4]
 8006d0c:	4b0e      	ldr	r3, [pc, #56]	@ (8006d48 <vPortFree+0xbc>)
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	43db      	mvns	r3, r3
 8006d12:	401a      	ands	r2, r3
 8006d14:	693b      	ldr	r3, [r7, #16]
 8006d16:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006d18:	f7ff f86a 	bl	8005df0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006d1c:	693b      	ldr	r3, [r7, #16]
 8006d1e:	685a      	ldr	r2, [r3, #4]
 8006d20:	4b0a      	ldr	r3, [pc, #40]	@ (8006d4c <vPortFree+0xc0>)
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	4413      	add	r3, r2
 8006d26:	4a09      	ldr	r2, [pc, #36]	@ (8006d4c <vPortFree+0xc0>)
 8006d28:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006d2a:	6938      	ldr	r0, [r7, #16]
 8006d2c:	f000 f874 	bl	8006e18 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006d30:	4b07      	ldr	r3, [pc, #28]	@ (8006d50 <vPortFree+0xc4>)
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	3301      	adds	r3, #1
 8006d36:	4a06      	ldr	r2, [pc, #24]	@ (8006d50 <vPortFree+0xc4>)
 8006d38:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006d3a:	f7ff f867 	bl	8005e0c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006d3e:	bf00      	nop
 8006d40:	3718      	adds	r7, #24
 8006d42:	46bd      	mov	sp, r7
 8006d44:	bd80      	pop	{r7, pc}
 8006d46:	bf00      	nop
 8006d48:	20002db8 	.word	0x20002db8
 8006d4c:	20002da8 	.word	0x20002da8
 8006d50:	20002db4 	.word	0x20002db4

08006d54 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006d54:	b480      	push	{r7}
 8006d56:	b085      	sub	sp, #20
 8006d58:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006d5a:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8006d5e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006d60:	4b27      	ldr	r3, [pc, #156]	@ (8006e00 <prvHeapInit+0xac>)
 8006d62:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	f003 0307 	and.w	r3, r3, #7
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d00c      	beq.n	8006d88 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	3307      	adds	r3, #7
 8006d72:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	f023 0307 	bic.w	r3, r3, #7
 8006d7a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006d7c:	68ba      	ldr	r2, [r7, #8]
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	1ad3      	subs	r3, r2, r3
 8006d82:	4a1f      	ldr	r2, [pc, #124]	@ (8006e00 <prvHeapInit+0xac>)
 8006d84:	4413      	add	r3, r2
 8006d86:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006d8c:	4a1d      	ldr	r2, [pc, #116]	@ (8006e04 <prvHeapInit+0xb0>)
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006d92:	4b1c      	ldr	r3, [pc, #112]	@ (8006e04 <prvHeapInit+0xb0>)
 8006d94:	2200      	movs	r2, #0
 8006d96:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	68ba      	ldr	r2, [r7, #8]
 8006d9c:	4413      	add	r3, r2
 8006d9e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006da0:	2208      	movs	r2, #8
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	1a9b      	subs	r3, r3, r2
 8006da6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	f023 0307 	bic.w	r3, r3, #7
 8006dae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	4a15      	ldr	r2, [pc, #84]	@ (8006e08 <prvHeapInit+0xb4>)
 8006db4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006db6:	4b14      	ldr	r3, [pc, #80]	@ (8006e08 <prvHeapInit+0xb4>)
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	2200      	movs	r2, #0
 8006dbc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006dbe:	4b12      	ldr	r3, [pc, #72]	@ (8006e08 <prvHeapInit+0xb4>)
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	68fa      	ldr	r2, [r7, #12]
 8006dce:	1ad2      	subs	r2, r2, r3
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006dd4:	4b0c      	ldr	r3, [pc, #48]	@ (8006e08 <prvHeapInit+0xb4>)
 8006dd6:	681a      	ldr	r2, [r3, #0]
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	685b      	ldr	r3, [r3, #4]
 8006de0:	4a0a      	ldr	r2, [pc, #40]	@ (8006e0c <prvHeapInit+0xb8>)
 8006de2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	685b      	ldr	r3, [r3, #4]
 8006de8:	4a09      	ldr	r2, [pc, #36]	@ (8006e10 <prvHeapInit+0xbc>)
 8006dea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006dec:	4b09      	ldr	r3, [pc, #36]	@ (8006e14 <prvHeapInit+0xc0>)
 8006dee:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8006df2:	601a      	str	r2, [r3, #0]
}
 8006df4:	bf00      	nop
 8006df6:	3714      	adds	r7, #20
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	bc80      	pop	{r7}
 8006dfc:	4770      	bx	lr
 8006dfe:	bf00      	nop
 8006e00:	2000059c 	.word	0x2000059c
 8006e04:	20002d9c 	.word	0x20002d9c
 8006e08:	20002da4 	.word	0x20002da4
 8006e0c:	20002dac 	.word	0x20002dac
 8006e10:	20002da8 	.word	0x20002da8
 8006e14:	20002db8 	.word	0x20002db8

08006e18 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006e18:	b480      	push	{r7}
 8006e1a:	b085      	sub	sp, #20
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006e20:	4b27      	ldr	r3, [pc, #156]	@ (8006ec0 <prvInsertBlockIntoFreeList+0xa8>)
 8006e22:	60fb      	str	r3, [r7, #12]
 8006e24:	e002      	b.n	8006e2c <prvInsertBlockIntoFreeList+0x14>
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	60fb      	str	r3, [r7, #12]
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	687a      	ldr	r2, [r7, #4]
 8006e32:	429a      	cmp	r2, r3
 8006e34:	d8f7      	bhi.n	8006e26 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	685b      	ldr	r3, [r3, #4]
 8006e3e:	68ba      	ldr	r2, [r7, #8]
 8006e40:	4413      	add	r3, r2
 8006e42:	687a      	ldr	r2, [r7, #4]
 8006e44:	429a      	cmp	r2, r3
 8006e46:	d108      	bne.n	8006e5a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	685a      	ldr	r2, [r3, #4]
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	685b      	ldr	r3, [r3, #4]
 8006e50:	441a      	add	r2, r3
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	685b      	ldr	r3, [r3, #4]
 8006e62:	68ba      	ldr	r2, [r7, #8]
 8006e64:	441a      	add	r2, r3
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	429a      	cmp	r2, r3
 8006e6c:	d118      	bne.n	8006ea0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	681a      	ldr	r2, [r3, #0]
 8006e72:	4b14      	ldr	r3, [pc, #80]	@ (8006ec4 <prvInsertBlockIntoFreeList+0xac>)
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	429a      	cmp	r2, r3
 8006e78:	d00d      	beq.n	8006e96 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	685a      	ldr	r2, [r3, #4]
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	685b      	ldr	r3, [r3, #4]
 8006e84:	441a      	add	r2, r3
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	681a      	ldr	r2, [r3, #0]
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	601a      	str	r2, [r3, #0]
 8006e94:	e008      	b.n	8006ea8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006e96:	4b0b      	ldr	r3, [pc, #44]	@ (8006ec4 <prvInsertBlockIntoFreeList+0xac>)
 8006e98:	681a      	ldr	r2, [r3, #0]
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	601a      	str	r2, [r3, #0]
 8006e9e:	e003      	b.n	8006ea8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	681a      	ldr	r2, [r3, #0]
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006ea8:	68fa      	ldr	r2, [r7, #12]
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	429a      	cmp	r2, r3
 8006eae:	d002      	beq.n	8006eb6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	687a      	ldr	r2, [r7, #4]
 8006eb4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006eb6:	bf00      	nop
 8006eb8:	3714      	adds	r7, #20
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	bc80      	pop	{r7}
 8006ebe:	4770      	bx	lr
 8006ec0:	20002d9c 	.word	0x20002d9c
 8006ec4:	20002da4 	.word	0x20002da4

08006ec8 <_vsniprintf_r>:
 8006ec8:	b530      	push	{r4, r5, lr}
 8006eca:	4614      	mov	r4, r2
 8006ecc:	2c00      	cmp	r4, #0
 8006ece:	4605      	mov	r5, r0
 8006ed0:	461a      	mov	r2, r3
 8006ed2:	b09b      	sub	sp, #108	@ 0x6c
 8006ed4:	da05      	bge.n	8006ee2 <_vsniprintf_r+0x1a>
 8006ed6:	238b      	movs	r3, #139	@ 0x8b
 8006ed8:	6003      	str	r3, [r0, #0]
 8006eda:	f04f 30ff 	mov.w	r0, #4294967295
 8006ede:	b01b      	add	sp, #108	@ 0x6c
 8006ee0:	bd30      	pop	{r4, r5, pc}
 8006ee2:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8006ee6:	f8ad 300c 	strh.w	r3, [sp, #12]
 8006eea:	f04f 0300 	mov.w	r3, #0
 8006eee:	9319      	str	r3, [sp, #100]	@ 0x64
 8006ef0:	bf0c      	ite	eq
 8006ef2:	4623      	moveq	r3, r4
 8006ef4:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006ef8:	9302      	str	r3, [sp, #8]
 8006efa:	9305      	str	r3, [sp, #20]
 8006efc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006f00:	9100      	str	r1, [sp, #0]
 8006f02:	9104      	str	r1, [sp, #16]
 8006f04:	f8ad 300e 	strh.w	r3, [sp, #14]
 8006f08:	4669      	mov	r1, sp
 8006f0a:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8006f0c:	f000 fa0a 	bl	8007324 <_svfiprintf_r>
 8006f10:	1c43      	adds	r3, r0, #1
 8006f12:	bfbc      	itt	lt
 8006f14:	238b      	movlt	r3, #139	@ 0x8b
 8006f16:	602b      	strlt	r3, [r5, #0]
 8006f18:	2c00      	cmp	r4, #0
 8006f1a:	d0e0      	beq.n	8006ede <_vsniprintf_r+0x16>
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	9b00      	ldr	r3, [sp, #0]
 8006f20:	701a      	strb	r2, [r3, #0]
 8006f22:	e7dc      	b.n	8006ede <_vsniprintf_r+0x16>

08006f24 <vsniprintf>:
 8006f24:	b507      	push	{r0, r1, r2, lr}
 8006f26:	9300      	str	r3, [sp, #0]
 8006f28:	4613      	mov	r3, r2
 8006f2a:	460a      	mov	r2, r1
 8006f2c:	4601      	mov	r1, r0
 8006f2e:	4803      	ldr	r0, [pc, #12]	@ (8006f3c <vsniprintf+0x18>)
 8006f30:	6800      	ldr	r0, [r0, #0]
 8006f32:	f7ff ffc9 	bl	8006ec8 <_vsniprintf_r>
 8006f36:	b003      	add	sp, #12
 8006f38:	f85d fb04 	ldr.w	pc, [sp], #4
 8006f3c:	20000008 	.word	0x20000008

08006f40 <memset>:
 8006f40:	4603      	mov	r3, r0
 8006f42:	4402      	add	r2, r0
 8006f44:	4293      	cmp	r3, r2
 8006f46:	d100      	bne.n	8006f4a <memset+0xa>
 8006f48:	4770      	bx	lr
 8006f4a:	f803 1b01 	strb.w	r1, [r3], #1
 8006f4e:	e7f9      	b.n	8006f44 <memset+0x4>

08006f50 <_reclaim_reent>:
 8006f50:	4b2d      	ldr	r3, [pc, #180]	@ (8007008 <_reclaim_reent+0xb8>)
 8006f52:	b570      	push	{r4, r5, r6, lr}
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	4604      	mov	r4, r0
 8006f58:	4283      	cmp	r3, r0
 8006f5a:	d053      	beq.n	8007004 <_reclaim_reent+0xb4>
 8006f5c:	69c3      	ldr	r3, [r0, #28]
 8006f5e:	b31b      	cbz	r3, 8006fa8 <_reclaim_reent+0x58>
 8006f60:	68db      	ldr	r3, [r3, #12]
 8006f62:	b163      	cbz	r3, 8006f7e <_reclaim_reent+0x2e>
 8006f64:	2500      	movs	r5, #0
 8006f66:	69e3      	ldr	r3, [r4, #28]
 8006f68:	68db      	ldr	r3, [r3, #12]
 8006f6a:	5959      	ldr	r1, [r3, r5]
 8006f6c:	b9b1      	cbnz	r1, 8006f9c <_reclaim_reent+0x4c>
 8006f6e:	3504      	adds	r5, #4
 8006f70:	2d80      	cmp	r5, #128	@ 0x80
 8006f72:	d1f8      	bne.n	8006f66 <_reclaim_reent+0x16>
 8006f74:	69e3      	ldr	r3, [r4, #28]
 8006f76:	4620      	mov	r0, r4
 8006f78:	68d9      	ldr	r1, [r3, #12]
 8006f7a:	f000 f881 	bl	8007080 <_free_r>
 8006f7e:	69e3      	ldr	r3, [r4, #28]
 8006f80:	6819      	ldr	r1, [r3, #0]
 8006f82:	b111      	cbz	r1, 8006f8a <_reclaim_reent+0x3a>
 8006f84:	4620      	mov	r0, r4
 8006f86:	f000 f87b 	bl	8007080 <_free_r>
 8006f8a:	69e3      	ldr	r3, [r4, #28]
 8006f8c:	689d      	ldr	r5, [r3, #8]
 8006f8e:	b15d      	cbz	r5, 8006fa8 <_reclaim_reent+0x58>
 8006f90:	4629      	mov	r1, r5
 8006f92:	4620      	mov	r0, r4
 8006f94:	682d      	ldr	r5, [r5, #0]
 8006f96:	f000 f873 	bl	8007080 <_free_r>
 8006f9a:	e7f8      	b.n	8006f8e <_reclaim_reent+0x3e>
 8006f9c:	680e      	ldr	r6, [r1, #0]
 8006f9e:	4620      	mov	r0, r4
 8006fa0:	f000 f86e 	bl	8007080 <_free_r>
 8006fa4:	4631      	mov	r1, r6
 8006fa6:	e7e1      	b.n	8006f6c <_reclaim_reent+0x1c>
 8006fa8:	6961      	ldr	r1, [r4, #20]
 8006faa:	b111      	cbz	r1, 8006fb2 <_reclaim_reent+0x62>
 8006fac:	4620      	mov	r0, r4
 8006fae:	f000 f867 	bl	8007080 <_free_r>
 8006fb2:	69e1      	ldr	r1, [r4, #28]
 8006fb4:	b111      	cbz	r1, 8006fbc <_reclaim_reent+0x6c>
 8006fb6:	4620      	mov	r0, r4
 8006fb8:	f000 f862 	bl	8007080 <_free_r>
 8006fbc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8006fbe:	b111      	cbz	r1, 8006fc6 <_reclaim_reent+0x76>
 8006fc0:	4620      	mov	r0, r4
 8006fc2:	f000 f85d 	bl	8007080 <_free_r>
 8006fc6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006fc8:	b111      	cbz	r1, 8006fd0 <_reclaim_reent+0x80>
 8006fca:	4620      	mov	r0, r4
 8006fcc:	f000 f858 	bl	8007080 <_free_r>
 8006fd0:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8006fd2:	b111      	cbz	r1, 8006fda <_reclaim_reent+0x8a>
 8006fd4:	4620      	mov	r0, r4
 8006fd6:	f000 f853 	bl	8007080 <_free_r>
 8006fda:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8006fdc:	b111      	cbz	r1, 8006fe4 <_reclaim_reent+0x94>
 8006fde:	4620      	mov	r0, r4
 8006fe0:	f000 f84e 	bl	8007080 <_free_r>
 8006fe4:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8006fe6:	b111      	cbz	r1, 8006fee <_reclaim_reent+0x9e>
 8006fe8:	4620      	mov	r0, r4
 8006fea:	f000 f849 	bl	8007080 <_free_r>
 8006fee:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8006ff0:	b111      	cbz	r1, 8006ff8 <_reclaim_reent+0xa8>
 8006ff2:	4620      	mov	r0, r4
 8006ff4:	f000 f844 	bl	8007080 <_free_r>
 8006ff8:	6a23      	ldr	r3, [r4, #32]
 8006ffa:	b11b      	cbz	r3, 8007004 <_reclaim_reent+0xb4>
 8006ffc:	4620      	mov	r0, r4
 8006ffe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007002:	4718      	bx	r3
 8007004:	bd70      	pop	{r4, r5, r6, pc}
 8007006:	bf00      	nop
 8007008:	20000008 	.word	0x20000008

0800700c <__errno>:
 800700c:	4b01      	ldr	r3, [pc, #4]	@ (8007014 <__errno+0x8>)
 800700e:	6818      	ldr	r0, [r3, #0]
 8007010:	4770      	bx	lr
 8007012:	bf00      	nop
 8007014:	20000008 	.word	0x20000008

08007018 <__libc_init_array>:
 8007018:	b570      	push	{r4, r5, r6, lr}
 800701a:	2600      	movs	r6, #0
 800701c:	4d0c      	ldr	r5, [pc, #48]	@ (8007050 <__libc_init_array+0x38>)
 800701e:	4c0d      	ldr	r4, [pc, #52]	@ (8007054 <__libc_init_array+0x3c>)
 8007020:	1b64      	subs	r4, r4, r5
 8007022:	10a4      	asrs	r4, r4, #2
 8007024:	42a6      	cmp	r6, r4
 8007026:	d109      	bne.n	800703c <__libc_init_array+0x24>
 8007028:	f000 fc76 	bl	8007918 <_init>
 800702c:	2600      	movs	r6, #0
 800702e:	4d0a      	ldr	r5, [pc, #40]	@ (8007058 <__libc_init_array+0x40>)
 8007030:	4c0a      	ldr	r4, [pc, #40]	@ (800705c <__libc_init_array+0x44>)
 8007032:	1b64      	subs	r4, r4, r5
 8007034:	10a4      	asrs	r4, r4, #2
 8007036:	42a6      	cmp	r6, r4
 8007038:	d105      	bne.n	8007046 <__libc_init_array+0x2e>
 800703a:	bd70      	pop	{r4, r5, r6, pc}
 800703c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007040:	4798      	blx	r3
 8007042:	3601      	adds	r6, #1
 8007044:	e7ee      	b.n	8007024 <__libc_init_array+0xc>
 8007046:	f855 3b04 	ldr.w	r3, [r5], #4
 800704a:	4798      	blx	r3
 800704c:	3601      	adds	r6, #1
 800704e:	e7f2      	b.n	8007036 <__libc_init_array+0x1e>
 8007050:	08007a0c 	.word	0x08007a0c
 8007054:	08007a0c 	.word	0x08007a0c
 8007058:	08007a0c 	.word	0x08007a0c
 800705c:	08007a10 	.word	0x08007a10

08007060 <__retarget_lock_acquire_recursive>:
 8007060:	4770      	bx	lr

08007062 <__retarget_lock_release_recursive>:
 8007062:	4770      	bx	lr

08007064 <memcpy>:
 8007064:	440a      	add	r2, r1
 8007066:	4291      	cmp	r1, r2
 8007068:	f100 33ff 	add.w	r3, r0, #4294967295
 800706c:	d100      	bne.n	8007070 <memcpy+0xc>
 800706e:	4770      	bx	lr
 8007070:	b510      	push	{r4, lr}
 8007072:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007076:	4291      	cmp	r1, r2
 8007078:	f803 4f01 	strb.w	r4, [r3, #1]!
 800707c:	d1f9      	bne.n	8007072 <memcpy+0xe>
 800707e:	bd10      	pop	{r4, pc}

08007080 <_free_r>:
 8007080:	b538      	push	{r3, r4, r5, lr}
 8007082:	4605      	mov	r5, r0
 8007084:	2900      	cmp	r1, #0
 8007086:	d040      	beq.n	800710a <_free_r+0x8a>
 8007088:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800708c:	1f0c      	subs	r4, r1, #4
 800708e:	2b00      	cmp	r3, #0
 8007090:	bfb8      	it	lt
 8007092:	18e4      	addlt	r4, r4, r3
 8007094:	f000 f8de 	bl	8007254 <__malloc_lock>
 8007098:	4a1c      	ldr	r2, [pc, #112]	@ (800710c <_free_r+0x8c>)
 800709a:	6813      	ldr	r3, [r2, #0]
 800709c:	b933      	cbnz	r3, 80070ac <_free_r+0x2c>
 800709e:	6063      	str	r3, [r4, #4]
 80070a0:	6014      	str	r4, [r2, #0]
 80070a2:	4628      	mov	r0, r5
 80070a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80070a8:	f000 b8da 	b.w	8007260 <__malloc_unlock>
 80070ac:	42a3      	cmp	r3, r4
 80070ae:	d908      	bls.n	80070c2 <_free_r+0x42>
 80070b0:	6820      	ldr	r0, [r4, #0]
 80070b2:	1821      	adds	r1, r4, r0
 80070b4:	428b      	cmp	r3, r1
 80070b6:	bf01      	itttt	eq
 80070b8:	6819      	ldreq	r1, [r3, #0]
 80070ba:	685b      	ldreq	r3, [r3, #4]
 80070bc:	1809      	addeq	r1, r1, r0
 80070be:	6021      	streq	r1, [r4, #0]
 80070c0:	e7ed      	b.n	800709e <_free_r+0x1e>
 80070c2:	461a      	mov	r2, r3
 80070c4:	685b      	ldr	r3, [r3, #4]
 80070c6:	b10b      	cbz	r3, 80070cc <_free_r+0x4c>
 80070c8:	42a3      	cmp	r3, r4
 80070ca:	d9fa      	bls.n	80070c2 <_free_r+0x42>
 80070cc:	6811      	ldr	r1, [r2, #0]
 80070ce:	1850      	adds	r0, r2, r1
 80070d0:	42a0      	cmp	r0, r4
 80070d2:	d10b      	bne.n	80070ec <_free_r+0x6c>
 80070d4:	6820      	ldr	r0, [r4, #0]
 80070d6:	4401      	add	r1, r0
 80070d8:	1850      	adds	r0, r2, r1
 80070da:	4283      	cmp	r3, r0
 80070dc:	6011      	str	r1, [r2, #0]
 80070de:	d1e0      	bne.n	80070a2 <_free_r+0x22>
 80070e0:	6818      	ldr	r0, [r3, #0]
 80070e2:	685b      	ldr	r3, [r3, #4]
 80070e4:	4408      	add	r0, r1
 80070e6:	6010      	str	r0, [r2, #0]
 80070e8:	6053      	str	r3, [r2, #4]
 80070ea:	e7da      	b.n	80070a2 <_free_r+0x22>
 80070ec:	d902      	bls.n	80070f4 <_free_r+0x74>
 80070ee:	230c      	movs	r3, #12
 80070f0:	602b      	str	r3, [r5, #0]
 80070f2:	e7d6      	b.n	80070a2 <_free_r+0x22>
 80070f4:	6820      	ldr	r0, [r4, #0]
 80070f6:	1821      	adds	r1, r4, r0
 80070f8:	428b      	cmp	r3, r1
 80070fa:	bf01      	itttt	eq
 80070fc:	6819      	ldreq	r1, [r3, #0]
 80070fe:	685b      	ldreq	r3, [r3, #4]
 8007100:	1809      	addeq	r1, r1, r0
 8007102:	6021      	streq	r1, [r4, #0]
 8007104:	6063      	str	r3, [r4, #4]
 8007106:	6054      	str	r4, [r2, #4]
 8007108:	e7cb      	b.n	80070a2 <_free_r+0x22>
 800710a:	bd38      	pop	{r3, r4, r5, pc}
 800710c:	20002f00 	.word	0x20002f00

08007110 <sbrk_aligned>:
 8007110:	b570      	push	{r4, r5, r6, lr}
 8007112:	4e0f      	ldr	r6, [pc, #60]	@ (8007150 <sbrk_aligned+0x40>)
 8007114:	460c      	mov	r4, r1
 8007116:	6831      	ldr	r1, [r6, #0]
 8007118:	4605      	mov	r5, r0
 800711a:	b911      	cbnz	r1, 8007122 <sbrk_aligned+0x12>
 800711c:	f000 fba8 	bl	8007870 <_sbrk_r>
 8007120:	6030      	str	r0, [r6, #0]
 8007122:	4621      	mov	r1, r4
 8007124:	4628      	mov	r0, r5
 8007126:	f000 fba3 	bl	8007870 <_sbrk_r>
 800712a:	1c43      	adds	r3, r0, #1
 800712c:	d103      	bne.n	8007136 <sbrk_aligned+0x26>
 800712e:	f04f 34ff 	mov.w	r4, #4294967295
 8007132:	4620      	mov	r0, r4
 8007134:	bd70      	pop	{r4, r5, r6, pc}
 8007136:	1cc4      	adds	r4, r0, #3
 8007138:	f024 0403 	bic.w	r4, r4, #3
 800713c:	42a0      	cmp	r0, r4
 800713e:	d0f8      	beq.n	8007132 <sbrk_aligned+0x22>
 8007140:	1a21      	subs	r1, r4, r0
 8007142:	4628      	mov	r0, r5
 8007144:	f000 fb94 	bl	8007870 <_sbrk_r>
 8007148:	3001      	adds	r0, #1
 800714a:	d1f2      	bne.n	8007132 <sbrk_aligned+0x22>
 800714c:	e7ef      	b.n	800712e <sbrk_aligned+0x1e>
 800714e:	bf00      	nop
 8007150:	20002efc 	.word	0x20002efc

08007154 <_malloc_r>:
 8007154:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007158:	1ccd      	adds	r5, r1, #3
 800715a:	f025 0503 	bic.w	r5, r5, #3
 800715e:	3508      	adds	r5, #8
 8007160:	2d0c      	cmp	r5, #12
 8007162:	bf38      	it	cc
 8007164:	250c      	movcc	r5, #12
 8007166:	2d00      	cmp	r5, #0
 8007168:	4606      	mov	r6, r0
 800716a:	db01      	blt.n	8007170 <_malloc_r+0x1c>
 800716c:	42a9      	cmp	r1, r5
 800716e:	d904      	bls.n	800717a <_malloc_r+0x26>
 8007170:	230c      	movs	r3, #12
 8007172:	6033      	str	r3, [r6, #0]
 8007174:	2000      	movs	r0, #0
 8007176:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800717a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007250 <_malloc_r+0xfc>
 800717e:	f000 f869 	bl	8007254 <__malloc_lock>
 8007182:	f8d8 3000 	ldr.w	r3, [r8]
 8007186:	461c      	mov	r4, r3
 8007188:	bb44      	cbnz	r4, 80071dc <_malloc_r+0x88>
 800718a:	4629      	mov	r1, r5
 800718c:	4630      	mov	r0, r6
 800718e:	f7ff ffbf 	bl	8007110 <sbrk_aligned>
 8007192:	1c43      	adds	r3, r0, #1
 8007194:	4604      	mov	r4, r0
 8007196:	d158      	bne.n	800724a <_malloc_r+0xf6>
 8007198:	f8d8 4000 	ldr.w	r4, [r8]
 800719c:	4627      	mov	r7, r4
 800719e:	2f00      	cmp	r7, #0
 80071a0:	d143      	bne.n	800722a <_malloc_r+0xd6>
 80071a2:	2c00      	cmp	r4, #0
 80071a4:	d04b      	beq.n	800723e <_malloc_r+0xea>
 80071a6:	6823      	ldr	r3, [r4, #0]
 80071a8:	4639      	mov	r1, r7
 80071aa:	4630      	mov	r0, r6
 80071ac:	eb04 0903 	add.w	r9, r4, r3
 80071b0:	f000 fb5e 	bl	8007870 <_sbrk_r>
 80071b4:	4581      	cmp	r9, r0
 80071b6:	d142      	bne.n	800723e <_malloc_r+0xea>
 80071b8:	6821      	ldr	r1, [r4, #0]
 80071ba:	4630      	mov	r0, r6
 80071bc:	1a6d      	subs	r5, r5, r1
 80071be:	4629      	mov	r1, r5
 80071c0:	f7ff ffa6 	bl	8007110 <sbrk_aligned>
 80071c4:	3001      	adds	r0, #1
 80071c6:	d03a      	beq.n	800723e <_malloc_r+0xea>
 80071c8:	6823      	ldr	r3, [r4, #0]
 80071ca:	442b      	add	r3, r5
 80071cc:	6023      	str	r3, [r4, #0]
 80071ce:	f8d8 3000 	ldr.w	r3, [r8]
 80071d2:	685a      	ldr	r2, [r3, #4]
 80071d4:	bb62      	cbnz	r2, 8007230 <_malloc_r+0xdc>
 80071d6:	f8c8 7000 	str.w	r7, [r8]
 80071da:	e00f      	b.n	80071fc <_malloc_r+0xa8>
 80071dc:	6822      	ldr	r2, [r4, #0]
 80071de:	1b52      	subs	r2, r2, r5
 80071e0:	d420      	bmi.n	8007224 <_malloc_r+0xd0>
 80071e2:	2a0b      	cmp	r2, #11
 80071e4:	d917      	bls.n	8007216 <_malloc_r+0xc2>
 80071e6:	1961      	adds	r1, r4, r5
 80071e8:	42a3      	cmp	r3, r4
 80071ea:	6025      	str	r5, [r4, #0]
 80071ec:	bf18      	it	ne
 80071ee:	6059      	strne	r1, [r3, #4]
 80071f0:	6863      	ldr	r3, [r4, #4]
 80071f2:	bf08      	it	eq
 80071f4:	f8c8 1000 	streq.w	r1, [r8]
 80071f8:	5162      	str	r2, [r4, r5]
 80071fa:	604b      	str	r3, [r1, #4]
 80071fc:	4630      	mov	r0, r6
 80071fe:	f000 f82f 	bl	8007260 <__malloc_unlock>
 8007202:	f104 000b 	add.w	r0, r4, #11
 8007206:	1d23      	adds	r3, r4, #4
 8007208:	f020 0007 	bic.w	r0, r0, #7
 800720c:	1ac2      	subs	r2, r0, r3
 800720e:	bf1c      	itt	ne
 8007210:	1a1b      	subne	r3, r3, r0
 8007212:	50a3      	strne	r3, [r4, r2]
 8007214:	e7af      	b.n	8007176 <_malloc_r+0x22>
 8007216:	6862      	ldr	r2, [r4, #4]
 8007218:	42a3      	cmp	r3, r4
 800721a:	bf0c      	ite	eq
 800721c:	f8c8 2000 	streq.w	r2, [r8]
 8007220:	605a      	strne	r2, [r3, #4]
 8007222:	e7eb      	b.n	80071fc <_malloc_r+0xa8>
 8007224:	4623      	mov	r3, r4
 8007226:	6864      	ldr	r4, [r4, #4]
 8007228:	e7ae      	b.n	8007188 <_malloc_r+0x34>
 800722a:	463c      	mov	r4, r7
 800722c:	687f      	ldr	r7, [r7, #4]
 800722e:	e7b6      	b.n	800719e <_malloc_r+0x4a>
 8007230:	461a      	mov	r2, r3
 8007232:	685b      	ldr	r3, [r3, #4]
 8007234:	42a3      	cmp	r3, r4
 8007236:	d1fb      	bne.n	8007230 <_malloc_r+0xdc>
 8007238:	2300      	movs	r3, #0
 800723a:	6053      	str	r3, [r2, #4]
 800723c:	e7de      	b.n	80071fc <_malloc_r+0xa8>
 800723e:	230c      	movs	r3, #12
 8007240:	4630      	mov	r0, r6
 8007242:	6033      	str	r3, [r6, #0]
 8007244:	f000 f80c 	bl	8007260 <__malloc_unlock>
 8007248:	e794      	b.n	8007174 <_malloc_r+0x20>
 800724a:	6005      	str	r5, [r0, #0]
 800724c:	e7d6      	b.n	80071fc <_malloc_r+0xa8>
 800724e:	bf00      	nop
 8007250:	20002f00 	.word	0x20002f00

08007254 <__malloc_lock>:
 8007254:	4801      	ldr	r0, [pc, #4]	@ (800725c <__malloc_lock+0x8>)
 8007256:	f7ff bf03 	b.w	8007060 <__retarget_lock_acquire_recursive>
 800725a:	bf00      	nop
 800725c:	20002ef8 	.word	0x20002ef8

08007260 <__malloc_unlock>:
 8007260:	4801      	ldr	r0, [pc, #4]	@ (8007268 <__malloc_unlock+0x8>)
 8007262:	f7ff befe 	b.w	8007062 <__retarget_lock_release_recursive>
 8007266:	bf00      	nop
 8007268:	20002ef8 	.word	0x20002ef8

0800726c <__ssputs_r>:
 800726c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007270:	461f      	mov	r7, r3
 8007272:	688e      	ldr	r6, [r1, #8]
 8007274:	4682      	mov	sl, r0
 8007276:	42be      	cmp	r6, r7
 8007278:	460c      	mov	r4, r1
 800727a:	4690      	mov	r8, r2
 800727c:	680b      	ldr	r3, [r1, #0]
 800727e:	d82d      	bhi.n	80072dc <__ssputs_r+0x70>
 8007280:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007284:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007288:	d026      	beq.n	80072d8 <__ssputs_r+0x6c>
 800728a:	6965      	ldr	r5, [r4, #20]
 800728c:	6909      	ldr	r1, [r1, #16]
 800728e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007292:	eba3 0901 	sub.w	r9, r3, r1
 8007296:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800729a:	1c7b      	adds	r3, r7, #1
 800729c:	444b      	add	r3, r9
 800729e:	106d      	asrs	r5, r5, #1
 80072a0:	429d      	cmp	r5, r3
 80072a2:	bf38      	it	cc
 80072a4:	461d      	movcc	r5, r3
 80072a6:	0553      	lsls	r3, r2, #21
 80072a8:	d527      	bpl.n	80072fa <__ssputs_r+0x8e>
 80072aa:	4629      	mov	r1, r5
 80072ac:	f7ff ff52 	bl	8007154 <_malloc_r>
 80072b0:	4606      	mov	r6, r0
 80072b2:	b360      	cbz	r0, 800730e <__ssputs_r+0xa2>
 80072b4:	464a      	mov	r2, r9
 80072b6:	6921      	ldr	r1, [r4, #16]
 80072b8:	f7ff fed4 	bl	8007064 <memcpy>
 80072bc:	89a3      	ldrh	r3, [r4, #12]
 80072be:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80072c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80072c6:	81a3      	strh	r3, [r4, #12]
 80072c8:	6126      	str	r6, [r4, #16]
 80072ca:	444e      	add	r6, r9
 80072cc:	6026      	str	r6, [r4, #0]
 80072ce:	463e      	mov	r6, r7
 80072d0:	6165      	str	r5, [r4, #20]
 80072d2:	eba5 0509 	sub.w	r5, r5, r9
 80072d6:	60a5      	str	r5, [r4, #8]
 80072d8:	42be      	cmp	r6, r7
 80072da:	d900      	bls.n	80072de <__ssputs_r+0x72>
 80072dc:	463e      	mov	r6, r7
 80072de:	4632      	mov	r2, r6
 80072e0:	4641      	mov	r1, r8
 80072e2:	6820      	ldr	r0, [r4, #0]
 80072e4:	f000 faaa 	bl	800783c <memmove>
 80072e8:	2000      	movs	r0, #0
 80072ea:	68a3      	ldr	r3, [r4, #8]
 80072ec:	1b9b      	subs	r3, r3, r6
 80072ee:	60a3      	str	r3, [r4, #8]
 80072f0:	6823      	ldr	r3, [r4, #0]
 80072f2:	4433      	add	r3, r6
 80072f4:	6023      	str	r3, [r4, #0]
 80072f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072fa:	462a      	mov	r2, r5
 80072fc:	f000 fad6 	bl	80078ac <_realloc_r>
 8007300:	4606      	mov	r6, r0
 8007302:	2800      	cmp	r0, #0
 8007304:	d1e0      	bne.n	80072c8 <__ssputs_r+0x5c>
 8007306:	4650      	mov	r0, sl
 8007308:	6921      	ldr	r1, [r4, #16]
 800730a:	f7ff feb9 	bl	8007080 <_free_r>
 800730e:	230c      	movs	r3, #12
 8007310:	f8ca 3000 	str.w	r3, [sl]
 8007314:	89a3      	ldrh	r3, [r4, #12]
 8007316:	f04f 30ff 	mov.w	r0, #4294967295
 800731a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800731e:	81a3      	strh	r3, [r4, #12]
 8007320:	e7e9      	b.n	80072f6 <__ssputs_r+0x8a>
	...

08007324 <_svfiprintf_r>:
 8007324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007328:	4698      	mov	r8, r3
 800732a:	898b      	ldrh	r3, [r1, #12]
 800732c:	4607      	mov	r7, r0
 800732e:	061b      	lsls	r3, r3, #24
 8007330:	460d      	mov	r5, r1
 8007332:	4614      	mov	r4, r2
 8007334:	b09d      	sub	sp, #116	@ 0x74
 8007336:	d510      	bpl.n	800735a <_svfiprintf_r+0x36>
 8007338:	690b      	ldr	r3, [r1, #16]
 800733a:	b973      	cbnz	r3, 800735a <_svfiprintf_r+0x36>
 800733c:	2140      	movs	r1, #64	@ 0x40
 800733e:	f7ff ff09 	bl	8007154 <_malloc_r>
 8007342:	6028      	str	r0, [r5, #0]
 8007344:	6128      	str	r0, [r5, #16]
 8007346:	b930      	cbnz	r0, 8007356 <_svfiprintf_r+0x32>
 8007348:	230c      	movs	r3, #12
 800734a:	603b      	str	r3, [r7, #0]
 800734c:	f04f 30ff 	mov.w	r0, #4294967295
 8007350:	b01d      	add	sp, #116	@ 0x74
 8007352:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007356:	2340      	movs	r3, #64	@ 0x40
 8007358:	616b      	str	r3, [r5, #20]
 800735a:	2300      	movs	r3, #0
 800735c:	9309      	str	r3, [sp, #36]	@ 0x24
 800735e:	2320      	movs	r3, #32
 8007360:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007364:	2330      	movs	r3, #48	@ 0x30
 8007366:	f04f 0901 	mov.w	r9, #1
 800736a:	f8cd 800c 	str.w	r8, [sp, #12]
 800736e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8007508 <_svfiprintf_r+0x1e4>
 8007372:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007376:	4623      	mov	r3, r4
 8007378:	469a      	mov	sl, r3
 800737a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800737e:	b10a      	cbz	r2, 8007384 <_svfiprintf_r+0x60>
 8007380:	2a25      	cmp	r2, #37	@ 0x25
 8007382:	d1f9      	bne.n	8007378 <_svfiprintf_r+0x54>
 8007384:	ebba 0b04 	subs.w	fp, sl, r4
 8007388:	d00b      	beq.n	80073a2 <_svfiprintf_r+0x7e>
 800738a:	465b      	mov	r3, fp
 800738c:	4622      	mov	r2, r4
 800738e:	4629      	mov	r1, r5
 8007390:	4638      	mov	r0, r7
 8007392:	f7ff ff6b 	bl	800726c <__ssputs_r>
 8007396:	3001      	adds	r0, #1
 8007398:	f000 80a7 	beq.w	80074ea <_svfiprintf_r+0x1c6>
 800739c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800739e:	445a      	add	r2, fp
 80073a0:	9209      	str	r2, [sp, #36]	@ 0x24
 80073a2:	f89a 3000 	ldrb.w	r3, [sl]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	f000 809f 	beq.w	80074ea <_svfiprintf_r+0x1c6>
 80073ac:	2300      	movs	r3, #0
 80073ae:	f04f 32ff 	mov.w	r2, #4294967295
 80073b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80073b6:	f10a 0a01 	add.w	sl, sl, #1
 80073ba:	9304      	str	r3, [sp, #16]
 80073bc:	9307      	str	r3, [sp, #28]
 80073be:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80073c2:	931a      	str	r3, [sp, #104]	@ 0x68
 80073c4:	4654      	mov	r4, sl
 80073c6:	2205      	movs	r2, #5
 80073c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80073cc:	484e      	ldr	r0, [pc, #312]	@ (8007508 <_svfiprintf_r+0x1e4>)
 80073ce:	f000 fa5f 	bl	8007890 <memchr>
 80073d2:	9a04      	ldr	r2, [sp, #16]
 80073d4:	b9d8      	cbnz	r0, 800740e <_svfiprintf_r+0xea>
 80073d6:	06d0      	lsls	r0, r2, #27
 80073d8:	bf44      	itt	mi
 80073da:	2320      	movmi	r3, #32
 80073dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80073e0:	0711      	lsls	r1, r2, #28
 80073e2:	bf44      	itt	mi
 80073e4:	232b      	movmi	r3, #43	@ 0x2b
 80073e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80073ea:	f89a 3000 	ldrb.w	r3, [sl]
 80073ee:	2b2a      	cmp	r3, #42	@ 0x2a
 80073f0:	d015      	beq.n	800741e <_svfiprintf_r+0xfa>
 80073f2:	4654      	mov	r4, sl
 80073f4:	2000      	movs	r0, #0
 80073f6:	f04f 0c0a 	mov.w	ip, #10
 80073fa:	9a07      	ldr	r2, [sp, #28]
 80073fc:	4621      	mov	r1, r4
 80073fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007402:	3b30      	subs	r3, #48	@ 0x30
 8007404:	2b09      	cmp	r3, #9
 8007406:	d94b      	bls.n	80074a0 <_svfiprintf_r+0x17c>
 8007408:	b1b0      	cbz	r0, 8007438 <_svfiprintf_r+0x114>
 800740a:	9207      	str	r2, [sp, #28]
 800740c:	e014      	b.n	8007438 <_svfiprintf_r+0x114>
 800740e:	eba0 0308 	sub.w	r3, r0, r8
 8007412:	fa09 f303 	lsl.w	r3, r9, r3
 8007416:	4313      	orrs	r3, r2
 8007418:	46a2      	mov	sl, r4
 800741a:	9304      	str	r3, [sp, #16]
 800741c:	e7d2      	b.n	80073c4 <_svfiprintf_r+0xa0>
 800741e:	9b03      	ldr	r3, [sp, #12]
 8007420:	1d19      	adds	r1, r3, #4
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	9103      	str	r1, [sp, #12]
 8007426:	2b00      	cmp	r3, #0
 8007428:	bfbb      	ittet	lt
 800742a:	425b      	neglt	r3, r3
 800742c:	f042 0202 	orrlt.w	r2, r2, #2
 8007430:	9307      	strge	r3, [sp, #28]
 8007432:	9307      	strlt	r3, [sp, #28]
 8007434:	bfb8      	it	lt
 8007436:	9204      	strlt	r2, [sp, #16]
 8007438:	7823      	ldrb	r3, [r4, #0]
 800743a:	2b2e      	cmp	r3, #46	@ 0x2e
 800743c:	d10a      	bne.n	8007454 <_svfiprintf_r+0x130>
 800743e:	7863      	ldrb	r3, [r4, #1]
 8007440:	2b2a      	cmp	r3, #42	@ 0x2a
 8007442:	d132      	bne.n	80074aa <_svfiprintf_r+0x186>
 8007444:	9b03      	ldr	r3, [sp, #12]
 8007446:	3402      	adds	r4, #2
 8007448:	1d1a      	adds	r2, r3, #4
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	9203      	str	r2, [sp, #12]
 800744e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007452:	9305      	str	r3, [sp, #20]
 8007454:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800750c <_svfiprintf_r+0x1e8>
 8007458:	2203      	movs	r2, #3
 800745a:	4650      	mov	r0, sl
 800745c:	7821      	ldrb	r1, [r4, #0]
 800745e:	f000 fa17 	bl	8007890 <memchr>
 8007462:	b138      	cbz	r0, 8007474 <_svfiprintf_r+0x150>
 8007464:	2240      	movs	r2, #64	@ 0x40
 8007466:	9b04      	ldr	r3, [sp, #16]
 8007468:	eba0 000a 	sub.w	r0, r0, sl
 800746c:	4082      	lsls	r2, r0
 800746e:	4313      	orrs	r3, r2
 8007470:	3401      	adds	r4, #1
 8007472:	9304      	str	r3, [sp, #16]
 8007474:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007478:	2206      	movs	r2, #6
 800747a:	4825      	ldr	r0, [pc, #148]	@ (8007510 <_svfiprintf_r+0x1ec>)
 800747c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007480:	f000 fa06 	bl	8007890 <memchr>
 8007484:	2800      	cmp	r0, #0
 8007486:	d036      	beq.n	80074f6 <_svfiprintf_r+0x1d2>
 8007488:	4b22      	ldr	r3, [pc, #136]	@ (8007514 <_svfiprintf_r+0x1f0>)
 800748a:	bb1b      	cbnz	r3, 80074d4 <_svfiprintf_r+0x1b0>
 800748c:	9b03      	ldr	r3, [sp, #12]
 800748e:	3307      	adds	r3, #7
 8007490:	f023 0307 	bic.w	r3, r3, #7
 8007494:	3308      	adds	r3, #8
 8007496:	9303      	str	r3, [sp, #12]
 8007498:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800749a:	4433      	add	r3, r6
 800749c:	9309      	str	r3, [sp, #36]	@ 0x24
 800749e:	e76a      	b.n	8007376 <_svfiprintf_r+0x52>
 80074a0:	460c      	mov	r4, r1
 80074a2:	2001      	movs	r0, #1
 80074a4:	fb0c 3202 	mla	r2, ip, r2, r3
 80074a8:	e7a8      	b.n	80073fc <_svfiprintf_r+0xd8>
 80074aa:	2300      	movs	r3, #0
 80074ac:	f04f 0c0a 	mov.w	ip, #10
 80074b0:	4619      	mov	r1, r3
 80074b2:	3401      	adds	r4, #1
 80074b4:	9305      	str	r3, [sp, #20]
 80074b6:	4620      	mov	r0, r4
 80074b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80074bc:	3a30      	subs	r2, #48	@ 0x30
 80074be:	2a09      	cmp	r2, #9
 80074c0:	d903      	bls.n	80074ca <_svfiprintf_r+0x1a6>
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d0c6      	beq.n	8007454 <_svfiprintf_r+0x130>
 80074c6:	9105      	str	r1, [sp, #20]
 80074c8:	e7c4      	b.n	8007454 <_svfiprintf_r+0x130>
 80074ca:	4604      	mov	r4, r0
 80074cc:	2301      	movs	r3, #1
 80074ce:	fb0c 2101 	mla	r1, ip, r1, r2
 80074d2:	e7f0      	b.n	80074b6 <_svfiprintf_r+0x192>
 80074d4:	ab03      	add	r3, sp, #12
 80074d6:	9300      	str	r3, [sp, #0]
 80074d8:	462a      	mov	r2, r5
 80074da:	4638      	mov	r0, r7
 80074dc:	4b0e      	ldr	r3, [pc, #56]	@ (8007518 <_svfiprintf_r+0x1f4>)
 80074de:	a904      	add	r1, sp, #16
 80074e0:	f3af 8000 	nop.w
 80074e4:	1c42      	adds	r2, r0, #1
 80074e6:	4606      	mov	r6, r0
 80074e8:	d1d6      	bne.n	8007498 <_svfiprintf_r+0x174>
 80074ea:	89ab      	ldrh	r3, [r5, #12]
 80074ec:	065b      	lsls	r3, r3, #25
 80074ee:	f53f af2d 	bmi.w	800734c <_svfiprintf_r+0x28>
 80074f2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80074f4:	e72c      	b.n	8007350 <_svfiprintf_r+0x2c>
 80074f6:	ab03      	add	r3, sp, #12
 80074f8:	9300      	str	r3, [sp, #0]
 80074fa:	462a      	mov	r2, r5
 80074fc:	4638      	mov	r0, r7
 80074fe:	4b06      	ldr	r3, [pc, #24]	@ (8007518 <_svfiprintf_r+0x1f4>)
 8007500:	a904      	add	r1, sp, #16
 8007502:	f000 f87d 	bl	8007600 <_printf_i>
 8007506:	e7ed      	b.n	80074e4 <_svfiprintf_r+0x1c0>
 8007508:	080079d9 	.word	0x080079d9
 800750c:	080079df 	.word	0x080079df
 8007510:	080079e3 	.word	0x080079e3
 8007514:	00000000 	.word	0x00000000
 8007518:	0800726d 	.word	0x0800726d

0800751c <_printf_common>:
 800751c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007520:	4616      	mov	r6, r2
 8007522:	4698      	mov	r8, r3
 8007524:	688a      	ldr	r2, [r1, #8]
 8007526:	690b      	ldr	r3, [r1, #16]
 8007528:	4607      	mov	r7, r0
 800752a:	4293      	cmp	r3, r2
 800752c:	bfb8      	it	lt
 800752e:	4613      	movlt	r3, r2
 8007530:	6033      	str	r3, [r6, #0]
 8007532:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007536:	460c      	mov	r4, r1
 8007538:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800753c:	b10a      	cbz	r2, 8007542 <_printf_common+0x26>
 800753e:	3301      	adds	r3, #1
 8007540:	6033      	str	r3, [r6, #0]
 8007542:	6823      	ldr	r3, [r4, #0]
 8007544:	0699      	lsls	r1, r3, #26
 8007546:	bf42      	ittt	mi
 8007548:	6833      	ldrmi	r3, [r6, #0]
 800754a:	3302      	addmi	r3, #2
 800754c:	6033      	strmi	r3, [r6, #0]
 800754e:	6825      	ldr	r5, [r4, #0]
 8007550:	f015 0506 	ands.w	r5, r5, #6
 8007554:	d106      	bne.n	8007564 <_printf_common+0x48>
 8007556:	f104 0a19 	add.w	sl, r4, #25
 800755a:	68e3      	ldr	r3, [r4, #12]
 800755c:	6832      	ldr	r2, [r6, #0]
 800755e:	1a9b      	subs	r3, r3, r2
 8007560:	42ab      	cmp	r3, r5
 8007562:	dc2b      	bgt.n	80075bc <_printf_common+0xa0>
 8007564:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007568:	6822      	ldr	r2, [r4, #0]
 800756a:	3b00      	subs	r3, #0
 800756c:	bf18      	it	ne
 800756e:	2301      	movne	r3, #1
 8007570:	0692      	lsls	r2, r2, #26
 8007572:	d430      	bmi.n	80075d6 <_printf_common+0xba>
 8007574:	4641      	mov	r1, r8
 8007576:	4638      	mov	r0, r7
 8007578:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800757c:	47c8      	blx	r9
 800757e:	3001      	adds	r0, #1
 8007580:	d023      	beq.n	80075ca <_printf_common+0xae>
 8007582:	6823      	ldr	r3, [r4, #0]
 8007584:	6922      	ldr	r2, [r4, #16]
 8007586:	f003 0306 	and.w	r3, r3, #6
 800758a:	2b04      	cmp	r3, #4
 800758c:	bf14      	ite	ne
 800758e:	2500      	movne	r5, #0
 8007590:	6833      	ldreq	r3, [r6, #0]
 8007592:	f04f 0600 	mov.w	r6, #0
 8007596:	bf08      	it	eq
 8007598:	68e5      	ldreq	r5, [r4, #12]
 800759a:	f104 041a 	add.w	r4, r4, #26
 800759e:	bf08      	it	eq
 80075a0:	1aed      	subeq	r5, r5, r3
 80075a2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80075a6:	bf08      	it	eq
 80075a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80075ac:	4293      	cmp	r3, r2
 80075ae:	bfc4      	itt	gt
 80075b0:	1a9b      	subgt	r3, r3, r2
 80075b2:	18ed      	addgt	r5, r5, r3
 80075b4:	42b5      	cmp	r5, r6
 80075b6:	d11a      	bne.n	80075ee <_printf_common+0xd2>
 80075b8:	2000      	movs	r0, #0
 80075ba:	e008      	b.n	80075ce <_printf_common+0xb2>
 80075bc:	2301      	movs	r3, #1
 80075be:	4652      	mov	r2, sl
 80075c0:	4641      	mov	r1, r8
 80075c2:	4638      	mov	r0, r7
 80075c4:	47c8      	blx	r9
 80075c6:	3001      	adds	r0, #1
 80075c8:	d103      	bne.n	80075d2 <_printf_common+0xb6>
 80075ca:	f04f 30ff 	mov.w	r0, #4294967295
 80075ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075d2:	3501      	adds	r5, #1
 80075d4:	e7c1      	b.n	800755a <_printf_common+0x3e>
 80075d6:	2030      	movs	r0, #48	@ 0x30
 80075d8:	18e1      	adds	r1, r4, r3
 80075da:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80075de:	1c5a      	adds	r2, r3, #1
 80075e0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80075e4:	4422      	add	r2, r4
 80075e6:	3302      	adds	r3, #2
 80075e8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80075ec:	e7c2      	b.n	8007574 <_printf_common+0x58>
 80075ee:	2301      	movs	r3, #1
 80075f0:	4622      	mov	r2, r4
 80075f2:	4641      	mov	r1, r8
 80075f4:	4638      	mov	r0, r7
 80075f6:	47c8      	blx	r9
 80075f8:	3001      	adds	r0, #1
 80075fa:	d0e6      	beq.n	80075ca <_printf_common+0xae>
 80075fc:	3601      	adds	r6, #1
 80075fe:	e7d9      	b.n	80075b4 <_printf_common+0x98>

08007600 <_printf_i>:
 8007600:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007604:	7e0f      	ldrb	r7, [r1, #24]
 8007606:	4691      	mov	r9, r2
 8007608:	2f78      	cmp	r7, #120	@ 0x78
 800760a:	4680      	mov	r8, r0
 800760c:	460c      	mov	r4, r1
 800760e:	469a      	mov	sl, r3
 8007610:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007612:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007616:	d807      	bhi.n	8007628 <_printf_i+0x28>
 8007618:	2f62      	cmp	r7, #98	@ 0x62
 800761a:	d80a      	bhi.n	8007632 <_printf_i+0x32>
 800761c:	2f00      	cmp	r7, #0
 800761e:	f000 80d1 	beq.w	80077c4 <_printf_i+0x1c4>
 8007622:	2f58      	cmp	r7, #88	@ 0x58
 8007624:	f000 80b8 	beq.w	8007798 <_printf_i+0x198>
 8007628:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800762c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007630:	e03a      	b.n	80076a8 <_printf_i+0xa8>
 8007632:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007636:	2b15      	cmp	r3, #21
 8007638:	d8f6      	bhi.n	8007628 <_printf_i+0x28>
 800763a:	a101      	add	r1, pc, #4	@ (adr r1, 8007640 <_printf_i+0x40>)
 800763c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007640:	08007699 	.word	0x08007699
 8007644:	080076ad 	.word	0x080076ad
 8007648:	08007629 	.word	0x08007629
 800764c:	08007629 	.word	0x08007629
 8007650:	08007629 	.word	0x08007629
 8007654:	08007629 	.word	0x08007629
 8007658:	080076ad 	.word	0x080076ad
 800765c:	08007629 	.word	0x08007629
 8007660:	08007629 	.word	0x08007629
 8007664:	08007629 	.word	0x08007629
 8007668:	08007629 	.word	0x08007629
 800766c:	080077ab 	.word	0x080077ab
 8007670:	080076d7 	.word	0x080076d7
 8007674:	08007765 	.word	0x08007765
 8007678:	08007629 	.word	0x08007629
 800767c:	08007629 	.word	0x08007629
 8007680:	080077cd 	.word	0x080077cd
 8007684:	08007629 	.word	0x08007629
 8007688:	080076d7 	.word	0x080076d7
 800768c:	08007629 	.word	0x08007629
 8007690:	08007629 	.word	0x08007629
 8007694:	0800776d 	.word	0x0800776d
 8007698:	6833      	ldr	r3, [r6, #0]
 800769a:	1d1a      	adds	r2, r3, #4
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	6032      	str	r2, [r6, #0]
 80076a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80076a4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80076a8:	2301      	movs	r3, #1
 80076aa:	e09c      	b.n	80077e6 <_printf_i+0x1e6>
 80076ac:	6833      	ldr	r3, [r6, #0]
 80076ae:	6820      	ldr	r0, [r4, #0]
 80076b0:	1d19      	adds	r1, r3, #4
 80076b2:	6031      	str	r1, [r6, #0]
 80076b4:	0606      	lsls	r6, r0, #24
 80076b6:	d501      	bpl.n	80076bc <_printf_i+0xbc>
 80076b8:	681d      	ldr	r5, [r3, #0]
 80076ba:	e003      	b.n	80076c4 <_printf_i+0xc4>
 80076bc:	0645      	lsls	r5, r0, #25
 80076be:	d5fb      	bpl.n	80076b8 <_printf_i+0xb8>
 80076c0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80076c4:	2d00      	cmp	r5, #0
 80076c6:	da03      	bge.n	80076d0 <_printf_i+0xd0>
 80076c8:	232d      	movs	r3, #45	@ 0x2d
 80076ca:	426d      	negs	r5, r5
 80076cc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80076d0:	230a      	movs	r3, #10
 80076d2:	4858      	ldr	r0, [pc, #352]	@ (8007834 <_printf_i+0x234>)
 80076d4:	e011      	b.n	80076fa <_printf_i+0xfa>
 80076d6:	6821      	ldr	r1, [r4, #0]
 80076d8:	6833      	ldr	r3, [r6, #0]
 80076da:	0608      	lsls	r0, r1, #24
 80076dc:	f853 5b04 	ldr.w	r5, [r3], #4
 80076e0:	d402      	bmi.n	80076e8 <_printf_i+0xe8>
 80076e2:	0649      	lsls	r1, r1, #25
 80076e4:	bf48      	it	mi
 80076e6:	b2ad      	uxthmi	r5, r5
 80076e8:	2f6f      	cmp	r7, #111	@ 0x6f
 80076ea:	6033      	str	r3, [r6, #0]
 80076ec:	bf14      	ite	ne
 80076ee:	230a      	movne	r3, #10
 80076f0:	2308      	moveq	r3, #8
 80076f2:	4850      	ldr	r0, [pc, #320]	@ (8007834 <_printf_i+0x234>)
 80076f4:	2100      	movs	r1, #0
 80076f6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80076fa:	6866      	ldr	r6, [r4, #4]
 80076fc:	2e00      	cmp	r6, #0
 80076fe:	60a6      	str	r6, [r4, #8]
 8007700:	db05      	blt.n	800770e <_printf_i+0x10e>
 8007702:	6821      	ldr	r1, [r4, #0]
 8007704:	432e      	orrs	r6, r5
 8007706:	f021 0104 	bic.w	r1, r1, #4
 800770a:	6021      	str	r1, [r4, #0]
 800770c:	d04b      	beq.n	80077a6 <_printf_i+0x1a6>
 800770e:	4616      	mov	r6, r2
 8007710:	fbb5 f1f3 	udiv	r1, r5, r3
 8007714:	fb03 5711 	mls	r7, r3, r1, r5
 8007718:	5dc7      	ldrb	r7, [r0, r7]
 800771a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800771e:	462f      	mov	r7, r5
 8007720:	42bb      	cmp	r3, r7
 8007722:	460d      	mov	r5, r1
 8007724:	d9f4      	bls.n	8007710 <_printf_i+0x110>
 8007726:	2b08      	cmp	r3, #8
 8007728:	d10b      	bne.n	8007742 <_printf_i+0x142>
 800772a:	6823      	ldr	r3, [r4, #0]
 800772c:	07df      	lsls	r7, r3, #31
 800772e:	d508      	bpl.n	8007742 <_printf_i+0x142>
 8007730:	6923      	ldr	r3, [r4, #16]
 8007732:	6861      	ldr	r1, [r4, #4]
 8007734:	4299      	cmp	r1, r3
 8007736:	bfde      	ittt	le
 8007738:	2330      	movle	r3, #48	@ 0x30
 800773a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800773e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007742:	1b92      	subs	r2, r2, r6
 8007744:	6122      	str	r2, [r4, #16]
 8007746:	464b      	mov	r3, r9
 8007748:	4621      	mov	r1, r4
 800774a:	4640      	mov	r0, r8
 800774c:	f8cd a000 	str.w	sl, [sp]
 8007750:	aa03      	add	r2, sp, #12
 8007752:	f7ff fee3 	bl	800751c <_printf_common>
 8007756:	3001      	adds	r0, #1
 8007758:	d14a      	bne.n	80077f0 <_printf_i+0x1f0>
 800775a:	f04f 30ff 	mov.w	r0, #4294967295
 800775e:	b004      	add	sp, #16
 8007760:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007764:	6823      	ldr	r3, [r4, #0]
 8007766:	f043 0320 	orr.w	r3, r3, #32
 800776a:	6023      	str	r3, [r4, #0]
 800776c:	2778      	movs	r7, #120	@ 0x78
 800776e:	4832      	ldr	r0, [pc, #200]	@ (8007838 <_printf_i+0x238>)
 8007770:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007774:	6823      	ldr	r3, [r4, #0]
 8007776:	6831      	ldr	r1, [r6, #0]
 8007778:	061f      	lsls	r7, r3, #24
 800777a:	f851 5b04 	ldr.w	r5, [r1], #4
 800777e:	d402      	bmi.n	8007786 <_printf_i+0x186>
 8007780:	065f      	lsls	r7, r3, #25
 8007782:	bf48      	it	mi
 8007784:	b2ad      	uxthmi	r5, r5
 8007786:	6031      	str	r1, [r6, #0]
 8007788:	07d9      	lsls	r1, r3, #31
 800778a:	bf44      	itt	mi
 800778c:	f043 0320 	orrmi.w	r3, r3, #32
 8007790:	6023      	strmi	r3, [r4, #0]
 8007792:	b11d      	cbz	r5, 800779c <_printf_i+0x19c>
 8007794:	2310      	movs	r3, #16
 8007796:	e7ad      	b.n	80076f4 <_printf_i+0xf4>
 8007798:	4826      	ldr	r0, [pc, #152]	@ (8007834 <_printf_i+0x234>)
 800779a:	e7e9      	b.n	8007770 <_printf_i+0x170>
 800779c:	6823      	ldr	r3, [r4, #0]
 800779e:	f023 0320 	bic.w	r3, r3, #32
 80077a2:	6023      	str	r3, [r4, #0]
 80077a4:	e7f6      	b.n	8007794 <_printf_i+0x194>
 80077a6:	4616      	mov	r6, r2
 80077a8:	e7bd      	b.n	8007726 <_printf_i+0x126>
 80077aa:	6833      	ldr	r3, [r6, #0]
 80077ac:	6825      	ldr	r5, [r4, #0]
 80077ae:	1d18      	adds	r0, r3, #4
 80077b0:	6961      	ldr	r1, [r4, #20]
 80077b2:	6030      	str	r0, [r6, #0]
 80077b4:	062e      	lsls	r6, r5, #24
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	d501      	bpl.n	80077be <_printf_i+0x1be>
 80077ba:	6019      	str	r1, [r3, #0]
 80077bc:	e002      	b.n	80077c4 <_printf_i+0x1c4>
 80077be:	0668      	lsls	r0, r5, #25
 80077c0:	d5fb      	bpl.n	80077ba <_printf_i+0x1ba>
 80077c2:	8019      	strh	r1, [r3, #0]
 80077c4:	2300      	movs	r3, #0
 80077c6:	4616      	mov	r6, r2
 80077c8:	6123      	str	r3, [r4, #16]
 80077ca:	e7bc      	b.n	8007746 <_printf_i+0x146>
 80077cc:	6833      	ldr	r3, [r6, #0]
 80077ce:	2100      	movs	r1, #0
 80077d0:	1d1a      	adds	r2, r3, #4
 80077d2:	6032      	str	r2, [r6, #0]
 80077d4:	681e      	ldr	r6, [r3, #0]
 80077d6:	6862      	ldr	r2, [r4, #4]
 80077d8:	4630      	mov	r0, r6
 80077da:	f000 f859 	bl	8007890 <memchr>
 80077de:	b108      	cbz	r0, 80077e4 <_printf_i+0x1e4>
 80077e0:	1b80      	subs	r0, r0, r6
 80077e2:	6060      	str	r0, [r4, #4]
 80077e4:	6863      	ldr	r3, [r4, #4]
 80077e6:	6123      	str	r3, [r4, #16]
 80077e8:	2300      	movs	r3, #0
 80077ea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80077ee:	e7aa      	b.n	8007746 <_printf_i+0x146>
 80077f0:	4632      	mov	r2, r6
 80077f2:	4649      	mov	r1, r9
 80077f4:	4640      	mov	r0, r8
 80077f6:	6923      	ldr	r3, [r4, #16]
 80077f8:	47d0      	blx	sl
 80077fa:	3001      	adds	r0, #1
 80077fc:	d0ad      	beq.n	800775a <_printf_i+0x15a>
 80077fe:	6823      	ldr	r3, [r4, #0]
 8007800:	079b      	lsls	r3, r3, #30
 8007802:	d413      	bmi.n	800782c <_printf_i+0x22c>
 8007804:	68e0      	ldr	r0, [r4, #12]
 8007806:	9b03      	ldr	r3, [sp, #12]
 8007808:	4298      	cmp	r0, r3
 800780a:	bfb8      	it	lt
 800780c:	4618      	movlt	r0, r3
 800780e:	e7a6      	b.n	800775e <_printf_i+0x15e>
 8007810:	2301      	movs	r3, #1
 8007812:	4632      	mov	r2, r6
 8007814:	4649      	mov	r1, r9
 8007816:	4640      	mov	r0, r8
 8007818:	47d0      	blx	sl
 800781a:	3001      	adds	r0, #1
 800781c:	d09d      	beq.n	800775a <_printf_i+0x15a>
 800781e:	3501      	adds	r5, #1
 8007820:	68e3      	ldr	r3, [r4, #12]
 8007822:	9903      	ldr	r1, [sp, #12]
 8007824:	1a5b      	subs	r3, r3, r1
 8007826:	42ab      	cmp	r3, r5
 8007828:	dcf2      	bgt.n	8007810 <_printf_i+0x210>
 800782a:	e7eb      	b.n	8007804 <_printf_i+0x204>
 800782c:	2500      	movs	r5, #0
 800782e:	f104 0619 	add.w	r6, r4, #25
 8007832:	e7f5      	b.n	8007820 <_printf_i+0x220>
 8007834:	080079ea 	.word	0x080079ea
 8007838:	080079fb 	.word	0x080079fb

0800783c <memmove>:
 800783c:	4288      	cmp	r0, r1
 800783e:	b510      	push	{r4, lr}
 8007840:	eb01 0402 	add.w	r4, r1, r2
 8007844:	d902      	bls.n	800784c <memmove+0x10>
 8007846:	4284      	cmp	r4, r0
 8007848:	4623      	mov	r3, r4
 800784a:	d807      	bhi.n	800785c <memmove+0x20>
 800784c:	1e43      	subs	r3, r0, #1
 800784e:	42a1      	cmp	r1, r4
 8007850:	d008      	beq.n	8007864 <memmove+0x28>
 8007852:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007856:	f803 2f01 	strb.w	r2, [r3, #1]!
 800785a:	e7f8      	b.n	800784e <memmove+0x12>
 800785c:	4601      	mov	r1, r0
 800785e:	4402      	add	r2, r0
 8007860:	428a      	cmp	r2, r1
 8007862:	d100      	bne.n	8007866 <memmove+0x2a>
 8007864:	bd10      	pop	{r4, pc}
 8007866:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800786a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800786e:	e7f7      	b.n	8007860 <memmove+0x24>

08007870 <_sbrk_r>:
 8007870:	b538      	push	{r3, r4, r5, lr}
 8007872:	2300      	movs	r3, #0
 8007874:	4d05      	ldr	r5, [pc, #20]	@ (800788c <_sbrk_r+0x1c>)
 8007876:	4604      	mov	r4, r0
 8007878:	4608      	mov	r0, r1
 800787a:	602b      	str	r3, [r5, #0]
 800787c:	f7fd fa70 	bl	8004d60 <_sbrk>
 8007880:	1c43      	adds	r3, r0, #1
 8007882:	d102      	bne.n	800788a <_sbrk_r+0x1a>
 8007884:	682b      	ldr	r3, [r5, #0]
 8007886:	b103      	cbz	r3, 800788a <_sbrk_r+0x1a>
 8007888:	6023      	str	r3, [r4, #0]
 800788a:	bd38      	pop	{r3, r4, r5, pc}
 800788c:	20002ef4 	.word	0x20002ef4

08007890 <memchr>:
 8007890:	4603      	mov	r3, r0
 8007892:	b510      	push	{r4, lr}
 8007894:	b2c9      	uxtb	r1, r1
 8007896:	4402      	add	r2, r0
 8007898:	4293      	cmp	r3, r2
 800789a:	4618      	mov	r0, r3
 800789c:	d101      	bne.n	80078a2 <memchr+0x12>
 800789e:	2000      	movs	r0, #0
 80078a0:	e003      	b.n	80078aa <memchr+0x1a>
 80078a2:	7804      	ldrb	r4, [r0, #0]
 80078a4:	3301      	adds	r3, #1
 80078a6:	428c      	cmp	r4, r1
 80078a8:	d1f6      	bne.n	8007898 <memchr+0x8>
 80078aa:	bd10      	pop	{r4, pc}

080078ac <_realloc_r>:
 80078ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078b0:	4607      	mov	r7, r0
 80078b2:	4614      	mov	r4, r2
 80078b4:	460d      	mov	r5, r1
 80078b6:	b921      	cbnz	r1, 80078c2 <_realloc_r+0x16>
 80078b8:	4611      	mov	r1, r2
 80078ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80078be:	f7ff bc49 	b.w	8007154 <_malloc_r>
 80078c2:	b92a      	cbnz	r2, 80078d0 <_realloc_r+0x24>
 80078c4:	f7ff fbdc 	bl	8007080 <_free_r>
 80078c8:	4625      	mov	r5, r4
 80078ca:	4628      	mov	r0, r5
 80078cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80078d0:	f000 f81a 	bl	8007908 <_malloc_usable_size_r>
 80078d4:	4284      	cmp	r4, r0
 80078d6:	4606      	mov	r6, r0
 80078d8:	d802      	bhi.n	80078e0 <_realloc_r+0x34>
 80078da:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80078de:	d8f4      	bhi.n	80078ca <_realloc_r+0x1e>
 80078e0:	4621      	mov	r1, r4
 80078e2:	4638      	mov	r0, r7
 80078e4:	f7ff fc36 	bl	8007154 <_malloc_r>
 80078e8:	4680      	mov	r8, r0
 80078ea:	b908      	cbnz	r0, 80078f0 <_realloc_r+0x44>
 80078ec:	4645      	mov	r5, r8
 80078ee:	e7ec      	b.n	80078ca <_realloc_r+0x1e>
 80078f0:	42b4      	cmp	r4, r6
 80078f2:	4622      	mov	r2, r4
 80078f4:	4629      	mov	r1, r5
 80078f6:	bf28      	it	cs
 80078f8:	4632      	movcs	r2, r6
 80078fa:	f7ff fbb3 	bl	8007064 <memcpy>
 80078fe:	4629      	mov	r1, r5
 8007900:	4638      	mov	r0, r7
 8007902:	f7ff fbbd 	bl	8007080 <_free_r>
 8007906:	e7f1      	b.n	80078ec <_realloc_r+0x40>

08007908 <_malloc_usable_size_r>:
 8007908:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800790c:	1f18      	subs	r0, r3, #4
 800790e:	2b00      	cmp	r3, #0
 8007910:	bfbc      	itt	lt
 8007912:	580b      	ldrlt	r3, [r1, r0]
 8007914:	18c0      	addlt	r0, r0, r3
 8007916:	4770      	bx	lr

08007918 <_init>:
 8007918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800791a:	bf00      	nop
 800791c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800791e:	bc08      	pop	{r3}
 8007920:	469e      	mov	lr, r3
 8007922:	4770      	bx	lr

08007924 <_fini>:
 8007924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007926:	bf00      	nop
 8007928:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800792a:	bc08      	pop	{r3}
 800792c:	469e      	mov	lr, r3
 800792e:	4770      	bx	lr
