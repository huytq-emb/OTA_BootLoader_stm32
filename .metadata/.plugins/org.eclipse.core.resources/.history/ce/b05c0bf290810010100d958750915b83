#include "boot.h"

/* Bitwise CRC-32 (poly 0x04C11DB7), init 0xFFFFFFFF, xorout 0xFFFFFFFF */
uint32_t crc32_compute(const uint8_t* data, size_t len){
    uint32_t crc = 0xFFFFFFFFu;
    while(len--){
        crc ^= ((uint32_t)(*data++)) << 24;
        for(int i=0;i<8;i++){
            if(crc & 0x80000000u) crc = (crc<<1) ^ 0x04C11DB7u;
            else crc <<= 1;
        }
    }
    return crc ^ 0xFFFFFFFFu;
}

uint32_t crc32_compute_flash(uint32_t addr, size_t len){
    return crc32_compute((const uint8_t*)addr, len);
}

/* CRC16-CCITT-FALSE for chunks */
uint16_t crc16_ccitt(const uint8_t* data, size_t len){
    uint16_t crc=0xFFFF;
    for(size_t i=0;i<len;i++){
        crc ^= (uint16_t)data[i] << 8;
        for(int b=0;b<8;b++){
            if(crc & 0x8000) crc = (uint16_t)((crc<<1) ^ 0x1021);
            else crc <<= 1;
        }
    }
    return crc;
}
