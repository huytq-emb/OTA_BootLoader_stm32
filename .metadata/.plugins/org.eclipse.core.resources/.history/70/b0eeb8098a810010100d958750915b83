/* uart2_log.c : USART2 simple logger (printf-lite via vsnprintf) */
#include "boot.h"
#include <stdarg.h>
#include <stdio.h>

static void gpio_init_usart2_txrx(void){
    /* PA2=TX, PA3=RX */
    RCC->APB2ENR |= RCC_APB2ENR_IOPAEN | RCC_APB2ENR_AFIOEN;
    /* PA2: output AF push-pull, 50MHz */
    GPIOA->CRL &= ~((0xF) << (2*4));
    GPIOA->CRL |=  (0xB) << (2*4); /* MODE=11(50MHz), CNF=10(AF PP) */
    /* PA3: input floating */
    GPIOA->CRL &= ~((0xF) << (3*4));
    GPIOA->CRL |=  (0x4) << (3*4); /* MODE=00, CNF=01(input floating) */
}

void uart2_init_115200(void){
    gpio_init_usart2_txrx();
    RCC->APB1ENR |= RCC_APB1ENR_USART2EN;

    /* USART2 on APB1 = 36MHz */
    uint32_t pclk1 = 36000000UL;
    uint32_t baud  = 115200UL;
    uint32_t usartdiv = (pclk1 + (baud/2U)) / baud; /* oversimplified for 16x */

    USART2->BRR = usartdiv; /* for F1, BRR integer is enough for typical baud */
    USART2->CR1 = USART_CR1_TE | USART_CR1_RE | USART_CR1_UE;
}

void log_putc(char c){
    while(!(USART2->SR & USART_SR_TXE)) {}
    USART2->DR = (uint16_t)c;
}

void log_write(const char *s){
    while(*s) log_putc(*s++);
}

void log_printf(const char *fmt, ...){
    char buf[256];
    va_list ap;
    va_start(ap, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, ap);
    va_end(ap);
    if(n < 0) return;
    if(n > (int)sizeof(buf)) n = sizeof(buf);
    for(int i=0;i<n;i++) log_putc(buf[i]);
}
