#ifndef APP_H_
#define APP_H_

#include "stm32f103xb.h"
#include <stdint.h>
#include <stddef.h>

/* ==== Memory Map (Application) ==== */
#define FLASH_BASE_ADDR     0x08000000UL
#define FLASH_TOTAL_BYTES   (128U * 1024U)
#define FLASH_PAGE_BYTES    1024U

#define APP_BASE            (FLASH_BASE_ADDR + 0x3000)          /* 0x08003000 */
#define META_PAGE_ADDR      (FLASH_BASE_ADDR + FLASH_TOTAL_BYTES - FLASH_PAGE_BYTES) /* 0x0801FC00 */

/* ==== Metadata (same layout as bootloader) ==== */
#define META_MAGIC          0x4D455441u /* 'META' */
#define META_FLAG_VALID     0x0001u     /* APP image verified OK */
#define META_FLAG_BOOTREQ   0x0002u     /* request bootloader (from APP) */

typedef struct {
    uint32_t magic;
    uint16_t ver;
    uint16_t _rsv0;
    uint32_t size;
    uint32_t crc32;
    uint32_t flags;       /* bit0: VALID, bit1: BOOTREQ */
    uint32_t _rsv[247];
} meta_t;

/* ==== UART ==== */
void uart1_init_115200(void); /* USART1 ↔ ESP32 */
void uart2_init_115200(void); /* USART2 → PC (optional debug) */
int  uart1_read_byte_timeout(uint8_t *b, uint32_t to_ms);
void uart1_write(const void *buf, size_t len);
void uart2_write(const char *s);

/* ==== SysTick ==== */
void systick_setup_1ms(void);
uint32_t millis(void);
void delay_ms(uint32_t ms);

/* ==== Metadata helpers ==== */
void meta_read(meta_t *m);
int  meta_write(const meta_t *m);

/* ==== Utils ==== */
void request_bootloader_and_reset(void);

#endif /* APP_H_ */
